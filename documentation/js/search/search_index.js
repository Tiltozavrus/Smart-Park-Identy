var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Admin.html",[0,1.103,1,1.326]],["body/entities/Admin.html",[0,1.339,1,2.254,2,2.641,3,0.334,4,0.334,5,0.263,6,3.632,7,0.298,8,0.909,9,3.311,10,2.401,11,2.933,12,0.519,13,0.024,14,1.564,15,3.209,16,4.623,17,3.259,18,4.085,19,4.623,20,5.086,21,5.441,22,4.274,23,1.07,24,4.274,25,0.846,26,5.441,27,4.274,28,4.494,29,4.274,30,0.425,31,4.085,32,4.085,33,3.632,34,2.252,35,3.632,36,2.894,37,0.334,38,0.168,39,1.339,40,0.928,41,1.261,42,3.632,43,0.018,44,0.018]],["title/classes/AllAuthServiceExceptionsFilter.html",[38,0.138,45,2.176]],["body/classes/AllAuthServiceExceptionsFilter.html",[0,0.473,1,2.23,3,0.118,4,0.118,5,0.093,7,0.105,10,0.606,12,0.488,13,0.024,23,0.577,25,0.338,30,0.492,37,0.196,38,0.127,39,1.764,40,1.165,41,1.858,43,0.008,44,0.008,45,1.553,46,0.419,47,1.023,48,2.185,49,2.424,50,1.324,51,2.826,52,1.417,53,2.514,54,0.741,55,1.511,56,3.387,57,1.511,58,1.381,59,1.693,60,1.143,61,1.887,62,2.185,63,2.826,64,1.511,65,1.511,66,1.324,67,1.511,68,1.887,69,1.511,70,1.149,71,2.826,72,1.134,73,3.387,74,1.887,75,0.796,76,2.424,77,1.702,78,1.134,79,1.887,80,1.134,81,0.933,82,1.134,83,1.134,84,1.134,85,1.134,86,1.134,87,1.134,88,1.134,89,0.535,90,0.933,91,3.904,92,1.134,93,1.134,94,1.134,95,1.134,96,1.134,97,0.419,98,1.134,99,1.887,100,1.702,101,0.933,102,1.381,103,0.74,104,0.859,105,1.721,106,1.324,107,0.933,108,1.836,109,1.134,110,2.424,111,1.476,112,1.324,113,1.553,114,2.326,115,2.141,116,1.836,117,1.887,118,1.836,119,1.995,120,1.836,121,1.887,122,1.836,123,1.836,124,1.134,125,1.582,126,1.553,127,1.582,128,2.065,129,0.74,130,1.232,131,1.023,132,0.796,133,1.023,134,0.933,135,1.134,136,1.023,137,2.957,138,1.134,139,1.134,140,1.887,141,1.134,142,1.134,143,3.413,144,1.553,145,2.208,146,3.655,147,1.887,148,2.72,149,1.553,150,2.424,151,3.051,152,1.553,153,1.887,154,1.553,155,2.826,156,2.566,157,1.553,158,1.43,159,1.887,160,0.837,161,1.43,162,2.826,163,0.947,164,1.702,165,1.023,166,0.947,167,1.918,168,1.134,169,1.134,170,1.134,171,1.134,172,2.826,173,1.023,174,2.826,175,1.134,176,1.134,177,1.134,178,1.134,179,1.134,180,1.134,181,1.134,182,1.134,183,1.134,184,1.023,185,1.134,186,1.134,187,1.134,188,0.859,189,1.134,190,1.134,191,3.76,192,3.76,193,3.76,194,1.553,195,4.851,196,3.387,197,4.458,198,1.887,199,3.138,200,1.553,201,3.76,202,3.264,203,1.134,204,1.134,205,1.134,206,1.134,207,2.826,208,3.591,209,1.887,210,2.826,211,1.134,212,1.887,213,2.955,214,1.134,215,1.887,216,1.134,217,1.134,218,0.933,219,1.134,220,1.134,221,1.134,222,1.887,223,1.134,224,1.836,225,1.134,226,2.957,227,1.134,228,1.134,229,1.134,230,1.134,231,1.134,232,1.134,233,1.134,234,1.134,235,1.134,236,1.023,237,1.134,238,1.134,239,1.134,240,1.134,241,1.134,242,1.134,243,1.134,244,1.134,245,1.134,246,1.134,247,1.134,248,1.134,249,1.134,250,1.134,251,1.134,252,1.134,253,1.134,254,1.134,255,1.134,256,1.008,257,1.134,258,2.826,259,1.134,260,0.933,261,1.134,262,1.134,263,1.134,264,1.134,265,1.134,266,1.887,267,1.887,268,1.134,269,1.134,270,1.134,271,1.134,272,1.134,273,1.134]],["title/controllers/AppController.html",[75,1.855,274,2.384]],["body/controllers/AppController.html",[3,0.411,4,0.411,5,0.324,13,0.023,30,0.483,37,0.411,38,0.207,43,0.02,44,0.02,75,3.254,89,1.862,274,4.182,275,3.251,276,4.47,277,2.992,278,4.47]],["title/modules/AppModule.html",[279,2.384,280,2.384]],["body/modules/AppModule.html",[3,0.327,4,0.327,5,0.257,12,0.363,13,0.024,17,2.902,30,0.517,37,0.327,38,0.164,43,0.018,44,0.018,89,1.48,274,4.01,275,3.315,277,3.761,278,3.552,279,3.631,280,4.61,281,2.583,282,3.315,283,3.552,284,3.552,285,3.552,286,4.086,287,4.028,288,3.139,289,3.139,290,4.18,291,4.558,292,5.033,293,4.558,294,3.861,295,2.378,296,3.552,297,2.583,298,4.18,299,4.18,300,4.18,301,4.18,302,4.18,303,4.18,304,3.552,305,3.552,306,3.552,307,4.18,308,4.18,309,4.18]],["title/injectables/AppService.html",[277,2.003,310,1.507]],["body/injectables/AppService.html",[3,0.395,4,0.395,5,0.311,7,0.353,13,0.023,23,0.904,25,0.811,30,0.395,37,0.395,38,0.199,41,1.492,43,0.02,44,0.02,50,3.18,66,2.665,89,1.79,277,3.434,310,2.583,311,3.424,312,4.298,313,6.682,314,5.058,315,5.058,316,5.058]],["title/controllers/AuthController.html",[75,1.855,188,2.003]],["body/controllers/AuthController.html",[0,0.355,1,2.266,3,0.089,4,0.089,5,0.07,7,0.079,10,0.79,12,0.541,13,0.024,14,1.367,23,0.935,25,0.351,30,0.462,37,0.154,38,0.102,39,1.869,40,1.307,41,1.743,43,0.006,44,0.006,45,0.701,47,0.768,48,1.333,49,1.479,50,1.037,51,1.479,52,0.742,54,0.334,56,1.96,58,2.122,59,2.046,60,1.755,61,0.851,62,0.768,63,1.479,66,2.755,68,0.851,70,0.519,71,1.96,72,0.851,73,3.122,74,1.479,75,0.597,76,2.651,77,1.333,78,0.851,79,1.479,80,0.851,81,0.701,82,0.851,83,0.851,84,0.851,85,0.851,86,0.851,87,0.851,88,0.851,89,0.401,90,0.701,91,3.464,92,0.851,93,0.851,94,0.851,95,0.851,96,0.851,97,0.315,98,0.851,99,1.479,100,1.333,101,0.701,102,1.117,103,0.556,104,0.645,105,1.901,106,1.037,107,0.701,108,2.008,109,0.851,110,1.96,111,1.614,112,1.037,113,1.217,114,1.927,115,2.008,116,1.485,117,1.479,118,1.485,119,1.613,120,2.202,121,1.479,122,2.008,123,2.008,124,0.851,125,1.897,126,1.217,127,1.897,128,2.111,129,0.556,130,0.965,131,0.768,132,0.597,133,0.768,134,0.701,135,0.851,136,0.768,137,3.202,138,0.851,139,0.851,140,1.479,141,0.851,142,0.851,143,3.153,144,1.217,145,1.989,146,3.451,147,1.479,148,2.365,149,1.217,150,1.96,151,2.729,152,1.217,153,1.479,154,1.217,155,2.341,156,2.504,157,1.217,158,1.12,159,1.479,160,0.656,161,1.12,162,2.341,163,0.742,164,1.333,165,0.768,166,0.742,167,1.668,168,0.851,169,0.851,170,0.851,171,0.851,172,2.341,173,0.768,174,2.341,175,0.851,176,0.851,177,0.851,178,0.851,179,0.851,180,0.851,181,0.851,182,0.851,183,0.851,184,0.768,185,0.851,186,0.851,187,0.851,188,1.12,189,0.851,190,0.851,191,3.305,192,3.305,193,3.305,194,1.927,195,4.59,196,3.831,197,4.62,198,2.341,199,3.464,200,1.927,201,3.305,202,3.722,203,0.851,204,0.851,205,0.851,206,0.851,207,3.305,208,3.927,209,1.479,210,2.341,211,0.851,212,1.479,213,2.569,214,0.851,215,1.479,216,0.851,217,0.851,218,1.927,219,0.851,220,0.851,221,0.851,222,2.341,223,1.479,224,2.202,225,0.851,226,3.247,227,0.851,228,0.851,229,0.851,230,0.851,231,0.851,232,0.851,233,0.851,234,1.479,235,1.479,236,0.768,237,0.851,238,0.851,239,0.851,240,0.851,241,0.851,242,0.851,243,0.851,244,0.851,245,0.851,246,2.341,247,0.851,248,0.851,249,0.851,250,0.851,251,0.851,252,0.851,253,0.851,254,0.851,255,1.479,256,1.251,257,0.851,258,2.341,259,0.851,260,0.701,261,0.851,262,0.851,263,0.851,264,0.851,265,0.851,266,2.341,267,1.96,268,0.851,269,0.851,270,0.851,271,0.851,272,0.851,273,0.851,275,0.701,317,1.134,318,1.969,319,1.969,320,1.969,321,1.969,322,1.969,323,1.969,324,1.969,325,1.969,326,1.217,327,1.969,328,1.969,329,1.134,330,1.134,331,1.134,332,1.134,333,1.134,334,1.134,335,0.851,336,1.134,337,3.118,338,1.969,339,1.134,340,1.134,341,1.134,342,1.134,343,1.134,344,1.134,345,1.674,346,1.134,347,1.134,348,1.969,349,1.134,350,1.134,351,1.134,352,0.851,353,1.134,354,3.118,355,1.969,356,1.969,357,1.134,358,0.851,359,1.134,360,1.134,361,1.134,362,1.134,363,1.969,364,1.134,365,1.134,366,1.134,367,1.134,368,1.134,369,1.134,370,1.134,371,1.134,372,1.134,373,1.134,374,1.134,375,1.134,376,1.969,377,1.134,378,1.134,379,1.134,380,1.134,381,1.134,382,0.851,383,1.134,384,1.134,385,1.134,386,1.969,387,1.134,388,1.134,389,1.134,390,1.134,391,1.134,392,1.134,393,1.134,394,1.134,395,1.134,396,1.134]],["title/classes/AuthControllerEdrrorInterceptor.html",[38,0.138,134,2.176]],["body/classes/AuthControllerEdrrorInterceptor.html",[0,0.484,1,2.243,3,0.121,4,0.121,5,0.095,7,0.108,10,0.619,12,0.469,13,0.024,23,0.276,25,0.344,30,0.494,37,0.2,38,0.129,39,1.775,40,1.173,41,1.865,43,0.008,44,0.008,45,0.954,46,0.429,47,1.045,48,2.219,49,1.921,50,1.348,51,1.921,52,0.964,54,0.455,56,2.461,58,0.66,59,1.497,60,0.546,61,1.159,62,1.045,63,1.921,66,0.813,68,1.159,70,0.706,71,2.461,72,1.159,73,3.423,74,2.863,75,0.813,76,2.461,77,2.582,78,1.159,79,2.461,80,1.159,81,0.954,82,1.159,83,1.159,84,1.159,85,1.159,86,1.159,87,1.159,88,1.159,89,0.546,90,0.954,91,3.936,92,1.159,93,1.159,94,1.159,95,1.159,96,1.159,97,0.429,98,1.159,99,1.921,100,2.219,101,0.954,102,1.402,103,0.756,104,0.878,105,1.744,106,1.348,107,0.954,108,1.865,109,1.159,110,2.461,111,1.499,112,1.348,113,1.581,114,2.357,115,2.169,116,1.865,117,1.921,118,1.865,119,2.026,120,1.865,121,1.921,122,1.865,123,1.865,124,1.159,125,1.606,126,1.581,127,1.606,128,2.078,129,0.756,130,1.254,131,1.045,132,0.813,133,1.045,134,1.581,135,1.921,136,2.219,137,3.074,138,1.159,139,1.159,140,1.921,141,1.159,142,1.159,143,3.431,144,1.581,145,2.224,146,3.668,147,1.921,148,2.747,149,1.581,150,2.461,151,3.074,152,1.581,153,1.921,154,1.581,155,2.863,156,2.593,157,1.581,158,1.456,159,1.921,160,0.852,161,1.456,162,2.863,163,0.964,164,1.732,165,1.045,166,0.964,167,1.937,168,1.159,169,1.159,170,1.159,171,1.159,172,2.863,173,1.045,174,2.863,175,1.159,176,1.159,177,1.159,178,1.159,179,1.159,180,1.159,181,1.159,182,1.159,183,1.159,184,1.045,185,1.159,186,1.159,187,1.159,188,0.878,189,1.159,190,1.159,191,3.794,192,3.794,193,3.794,194,1.581,195,4.869,196,3.423,197,4.472,198,1.921,199,3.175,200,1.581,201,3.794,202,3.284,203,1.159,204,1.159,205,1.159,206,1.159,207,2.863,208,3.625,209,1.921,210,2.863,211,1.159,212,1.921,213,2.984,214,1.159,215,1.921,216,1.159,217,1.159,218,0.954,219,1.159,220,1.159,221,1.159,222,1.921,223,1.159,224,1.865,225,1.159,226,2.982,227,1.159,228,1.159,229,1.159,230,1.159,231,1.159,232,1.159,233,1.159,234,1.159,235,1.159,236,1.045,237,1.159,238,1.159,239,1.159,240,1.159,241,1.159,242,1.159,243,1.159,244,1.159,245,1.159,246,1.159,247,1.159,248,1.159,249,1.159,250,1.159,251,1.159,252,1.159,253,1.159,254,1.159,255,1.159,256,1.026,257,1.159,258,2.863,259,1.159,260,0.954,261,1.159,262,1.159,263,1.159,264,1.159,265,1.159,266,1.921,267,1.921,268,1.159,269,1.159,270,1.159,271,1.159,272,1.159,273,1.159,397,2.559,398,1.543,399,1.311]],["title/modules/AuthModule.html",[279,2.384,286,2.176]],["body/modules/AuthModule.html",[0,1.343,1,2.052,3,0.335,4,0.335,5,0.264,9,2.1,13,0.024,30,0.544,37,0.335,38,0.168,43,0.018,44,0.018,89,1.517,102,2.847,104,2.438,128,1.929,132,2.871,133,2.901,188,3.409,275,3.368,279,3.689,281,2.648,282,3.368,286,4.113,287,4.092,288,3.217,289,3.217,291,4.631,292,3.641,293,4.631,294,2.648,295,2.438,296,3.641,297,2.648,400,3.641,401,3.641,402,4.285,403,4.285,404,2.871,405,3.217,406,4.285,407,2.901,408,4.285,409,3.641,410,4.285]],["title/entities/BaseUser.html",[0,1.103,9,1.725]],["body/entities/BaseUser.html",[0,1.594,2,3.144,3,0.397,4,0.397,5,0.313,7,0.355,8,1.012,9,3.169,12,0.441,13,0.023,14,1.33,23,0.91,30,0.397,34,2.68,36,3.445,37,0.397,38,0.2,39,2.027,40,1.315,43,0.02,44,0.02,411,4.324,412,5.497,413,5.088]],["title/classes/CheckTokenDto.html",[38,0.138,108,2.003]],["body/classes/CheckTokenDto.html",[3,0.382,4,0.382,5,0.301,7,0.341,8,0.987,12,0.424,13,0.024,14,1.277,23,0.873,25,0.794,30,0.462,37,0.382,38,0.232,43,0.019,44,0.019,46,1.356,97,1.356,108,3.362,160,2.116,414,5.023,415,3.307,416,1.84,417,4.151,418,4.151,419,2.092,420,5.023,421,1.959,422,2.573,423,4.151]],["title/classes/CreateAdminDto.html",[38,0.138,111,1.61]],["body/classes/CreateAdminDto.html",[3,0.336,4,0.336,5,0.265,7,0.3,8,0.913,10,2.715,11,2.943,12,0.474,13,0.024,14,1.429,23,0.977,25,0.895,30,0.427,37,0.427,38,0.236,39,1.713,40,1.187,43,0.018,44,0.018,46,1.196,97,1.196,111,2.5,112,2.269,416,2.51,419,1.524,421,1.727,424,3.417,425,2.45,426,4.306,427,3.66,428,2.5,429,3.66,430,4.306,431,3.66,432,2.915,433,2.11,434,4.105,435,3.234,436,3.234,437,2.45,438,3.234,439,2.45,440,3.234,441,3.234,442,2.661,443,1.196]],["title/classes/CreateAdminResp.html",[38,0.138,112,1.855]],["body/classes/CreateAdminResp.html",[1,1.578,3,0.327,4,0.327,5,0.258,7,0.292,8,0.897,10,2.654,11,2.053,12,0.561,13,0.024,14,1.404,23,1.06,25,0.868,30,0.42,37,0.42,38,0.233,39,1.96,40,1.288,43,0.018,44,0.018,46,1.164,54,1.236,58,1.793,59,1.483,60,1.483,97,1.164,111,1.916,112,2.83,416,2.492,419,1.483,421,1.681,424,3.558,425,2.384,428,1.916,432,2.837,433,2.053,434,4.452,435,3.146,436,3.146,437,2.384,438,4.034,439,2.384,440,3.146,441,3.146,442,2.59,443,1.492,444,3.637,445,4.19,446,4.19,447,4.19]],["title/classes/CreateTokenResp.html",[38,0.138,115,2.003]],["body/classes/CreateTokenResp.html",[3,0.368,4,0.368,5,0.29,7,0.328,8,0.965,12,0.502,13,0.023,14,1.511,23,1.033,25,0.876,30,0.368,37,0.368,38,0.185,43,0.019,44,0.019,46,1.308,97,1.308,115,3.289,160,2.083,326,3.866,415,3.188,416,2.456,419,1.667,424,3.558,448,6.523,449,6.523,450,6.523,451,4.71,452,4.71]],["title/classes/CreateUserDto.html",[38,0.138,105,1.61]],["body/classes/CreateUserDto.html",[3,0.321,4,0.321,5,0.253,7,0.287,8,0.886,12,0.46,13,0.024,14,1.387,23,0.948,25,0.929,30,0.414,37,0.414,38,0.231,39,1.663,40,1.152,43,0.017,44,0.017,46,1.141,59,2.33,97,1.141,105,2.426,106,2.165,416,1.548,419,2.33,421,1.649,422,3.271,424,3.342,433,2.014,437,2.338,439,2.338,443,1.141,453,2.338,454,3.15,455,4.11,456,3.492,457,3.592,458,3.592,459,3.592,460,3.592,461,3.492,462,4.11,463,2.782,464,3.492,465,2.338,466,2.782,467,3.086,468,2.54,469,3.086,470,2.54,471,3.086,472,2.54,473,3.086]],["title/interfaces/CreatedToken.html",[474,1.172,475,1.855]],["body/interfaces/CreatedToken.html",[3,0.216,4,0.216,5,0.17,7,0.193,8,0.674,12,0.535,13,0.024,25,0.858,30,0.216,37,0.482,38,0.108,40,1.211,41,1.932,43,0.013,44,0.013,52,2.193,54,0.815,70,1.845,145,1.108,160,2.003,163,1.52,166,1.795,167,2.413,256,1.108,428,1.263,443,0.767,474,1.746,475,2.511,476,1.455,477,1.353,478,2.511,479,3.248,480,1.707,481,2.494,482,1.707,483,1.455,484,1.571,485,2.494,486,2.733,487,2.295,488,1.977,489,1.263,490,1.571,491,3.421,492,2.126,493,2.336,494,2.511,495,3.446,496,2.563,497,3.24,498,2.398,499,1.263,500,1.707,501,1.707,502,2.494,503,1.707,504,2.494,505,2.494,506,1.707,507,2.494,508,1.707,509,3.24,510,3.24,511,2.494,512,1.707,513,1.707,514,1.707,515,2.494,516,1.707,517,2.511,518,1.571,519,1.707,520,1.108,521,1.707,522,1.707,523,1.707,524,3.24,525,1.707,526,1.707,527,1.707,528,1.707,529,2.126,530,1.707,531,1.707,532,1.707,533,1.455,534,1.707,535,1.707,536,1.707,537,1.707,538,1.707,539,1.707,540,1.707,541,1.353,542,1.707,543,1.707,544,1.455,545,2.494,546,1.707,547,1.707,548,1.707,549,1.455]],["title/interfaces/CreatedTokens.html",[474,1.172,550,2.384]],["body/interfaces/CreatedTokens.html",[0,0.475,1,1.421,3,0.119,4,0.119,5,0.093,7,0.106,8,0.421,9,1.587,10,1.813,11,1.236,12,0.219,13,0.024,17,1.587,25,0.825,30,0.456,34,0.799,37,0.295,38,0.06,39,1.182,40,1.224,41,1.959,43,0.008,44,0.008,52,2.289,54,0.448,81,2.794,89,0.537,102,2.147,103,0.743,105,1.481,107,0.938,111,1.481,113,0.938,114,1.559,119,0.938,125,1.236,126,1.559,127,1.236,128,1.901,129,2.052,130,0.743,137,3.557,143,1.435,144,1.559,145,2.211,146,2.147,148,2.147,149,1.559,151,1.842,152,1.559,154,0.938,156,1.435,157,0.938,158,0.863,160,1.671,161,0.863,163,0.571,166,1.702,167,2.528,194,0.938,200,1.559,202,3.457,213,3.756,218,0.938,224,2.147,226,2.572,256,1.012,260,0.938,294,2.001,295,0.863,297,0.938,310,1.079,326,2.794,335,1.139,352,1.139,358,1.139,382,1.139,404,1.706,405,1.139,442,0.938,443,0.421,454,2.052,465,0.863,468,0.938,470,0.938,472,0.938,474,0.84,476,0.799,486,0.743,488,0.743,489,0.694,492,0.799,493,1.236,494,1.329,496,1.012,498,1.726,499,1.726,517,0.799,520,1.299,529,0.799,533,0.799,541,0.743,544,0.799,549,0.799,550,2.192,551,1.027,552,1.289,553,1.289,554,1.289,555,1.289,556,1.289,557,3.56,558,1.289,559,1.289,560,1.289,561,2.752,562,1.139,563,2.432,564,1.139,565,1.139,566,2.432,567,1.139,568,1.139,569,1.139,570,1.139,571,1.139,572,1.894,573,1.139,574,1.139,575,1.289,576,1.289,577,1.289,578,1.289,579,1.289,580,1.289,581,1.289,582,1.289,583,1.289,584,1.139,585,1.289,586,1.289,587,1.289,588,4.072,589,1.289,590,1.289,591,2.144,592,1.289,593,2.144,594,3.767,595,1.289,596,1.289,597,1.289,598,2.144,599,1.289,600,2.144,601,1.289,602,2.144,603,1.289,604,1.289,605,1.289,606,1.289,607,2.144,608,2.144,609,2.144,610,1.289,611,1.289,612,1.289,613,1.289,614,1.289,615,1.289,616,1.289,617,1.289,618,1.289,619,1.289,620,1.289,621,1.289,622,1.289,623,1.289,624,1.289,625,1.289,626,1.289,627,1.289,628,3.207,629,1.289,630,1.289,631,1.289,632,1.289,633,1.289,634,1.289,635,1.289,636,2.144,637,1.289,638,2.144,639,1.289,640,1.289,641,1.289,642,1.289,643,2.144,644,1.289,645,1.289,646,1.289,647,1.894,648,1.289,649,1.289,650,1.289,651,1.289,652,1.289,653,1.289,654,1.289,655,1.289,656,1.289,657,1.289,658,1.289,659,1.289,660,1.289,661,1.289,662,1.289,663,1.289,664,1.289,665,1.289,666,1.289,667,1.289,668,1.289,669,2.144,670,1.289,671,2.144,672,1.289,673,1.289,674,3.145,675,1.289,676,2.144,677,1.289,678,1.289,679,1.289,680,1.289,681,1.289,682,1.289,683,1.289,684,1.289]],["title/interfaces/DecodedToken.html",[474,1.172,498,1.61]],["body/interfaces/DecodedToken.html",[3,0.21,4,0.21,5,0.166,7,0.188,8,0.661,12,0.571,13,0.024,25,0.822,30,0.21,37,0.478,38,0.106,40,1.199,41,1.922,43,0.013,44,0.013,52,2.174,54,0.794,60,1.833,70,1.811,145,1.08,160,1.725,163,1.491,166,1.769,167,2.393,256,1.08,428,1.231,443,0.748,474,1.725,475,2.086,476,1.418,477,1.319,478,2.086,479,3.143,480,1.664,481,2.447,482,1.664,483,1.418,484,1.532,485,2.447,486,3.113,487,2.253,488,2.538,489,1.231,490,1.532,491,3.394,492,2.086,493,2.302,494,2.475,495,3.411,496,2.683,497,3.201,498,2.524,499,1.231,500,1.664,501,1.664,502,2.447,503,1.664,504,2.447,505,2.447,506,1.664,507,2.447,508,1.664,509,3.201,510,3.201,511,2.447,512,1.664,513,1.664,514,1.664,515,2.447,516,1.664,517,2.475,518,1.532,519,1.664,520,1.08,521,1.664,522,1.664,523,1.664,524,3.201,525,1.664,526,1.664,527,1.664,528,1.664,529,2.086,530,1.664,531,1.664,532,1.664,533,1.418,534,1.664,535,1.664,536,1.664,537,1.664,538,1.664,539,1.664,540,1.664,541,1.319,542,1.664,543,1.664,544,1.418,545,2.447,546,1.664,547,1.664,548,1.664,549,1.418]],["title/classes/GetAdminResp.html",[38,0.138,116,2.003]],["body/classes/GetAdminResp.html",[1,1.664,3,0.345,4,0.345,5,0.272,7,0.308,8,0.928,10,2.558,12,0.57,13,0.024,14,1.452,23,1.086,25,0.816,30,0.345,37,0.345,38,0.173,39,1.998,40,1.32,43,0.018,44,0.018,46,1.227,54,1.303,58,1.89,59,1.564,60,1.564,97,1.227,116,3.16,416,2.092,419,2.151,422,2.927,425,2.513,438,4.171,439,2.513,440,3.317,441,3.317,442,2.73,443,1.543,444,3.761,685,4.788,686,4.418,687,4.721,688,4.418,689,4.418]],["title/classes/GetUsersResp.html",[38,0.138,118,2.003]],["body/classes/GetUsersResp.html",[3,0.326,4,0.326,5,0.257,7,0.291,8,0.894,12,0.573,13,0.024,14,1.546,23,1.116,25,0.887,30,0.326,37,0.326,38,0.164,39,1.956,40,1.285,43,0.018,44,0.018,46,1.158,54,1.23,58,1.784,59,2.379,60,1.476,97,1.158,118,3.047,128,1.476,416,2.228,419,2.21,422,3.117,439,2.372,443,1.487,444,3.626,453,2.372,454,3.059,467,4.021,468,2.577,469,3.131,470,2.577,471,3.131,472,2.577,473,4.021,685,4.848,690,4.17,691,4.17,692,4.17,693,4.17]],["title/injectables/JwtGuard.html",[310,1.507,694,2.644]],["body/injectables/JwtGuard.html",[3,0.408,4,0.408,5,0.322,13,0.023,30,0.481,37,0.408,38,0.205,43,0.02,44,0.02,89,1.851,310,2.634,311,3.539,407,3.539,478,2.754,694,4.622,695,4.443,696,5.228,697,5.228]],["title/injectables/JwtStrategy.html",[310,1.507,698,2.644]],["body/injectables/JwtStrategy.html",[3,0.335,4,0.335,5,0.264,7,0.299,12,0.473,13,0.024,23,0.974,30,0.509,37,0.335,38,0.168,41,1.264,43,0.018,44,0.018,50,2.871,52,1.614,54,1.607,58,2.332,59,1.929,60,1.929,66,2.257,89,1.517,102,1.833,104,2.438,166,1.614,202,3.409,294,4.113,295,2.438,310,2.332,311,2.901,345,3.641,407,2.901,478,2.257,483,2.257,496,1.719,520,1.719,584,3.217,698,4.092,699,3.641,700,5.449,701,4.285,702,4.285,703,5.449,704,4.285,705,4.285,706,4.285,707,4.285,708,3.641,709,4.285,710,4.285,711,4.285,712,4.285,713,4.285,714,4.285,715,4.285]],["title/classes/LoginAdminDto.html",[38,0.138,120,2.003]],["body/classes/LoginAdminDto.html",[3,0.368,4,0.368,5,0.29,7,0.328,8,0.965,10,2.509,11,3.065,12,0.502,13,0.023,14,1.511,23,1.033,25,0.876,30,0.452,37,0.368,38,0.227,43,0.019,44,0.019,46,1.308,97,1.308,120,3.289,416,2.356,419,1.667,421,1.889,425,2.679,429,4.002,431,4.002,432,3.914,433,2.833,687,4.002,716,4.697,717,4.71,718,4.71,719,4.71]],["title/classes/LoginUserDto.html",[38,0.138,122,2.003]],["body/classes/LoginUserDto.html",[3,0.359,4,0.359,5,0.283,7,0.32,8,0.951,12,0.494,13,0.023,14,1.488,23,1.018,25,0.868,30,0.445,37,0.359,38,0.224,43,0.019,44,0.019,46,1.276,97,1.276,122,3.239,416,2.436,419,1.627,421,1.843,433,2.79,453,2.614,454,3.032,457,3.855,458,3.855,459,3.855,460,3.855,461,3.905,463,3.111,465,2.614,466,3.111,647,4.646,716,4.646,720,4.596,721,4.596,722,4.596,723,4.596]],["title/interfaces/Payload.html",[474,1.172,496,1.412]],["body/interfaces/Payload.html",[0,0.475,1,1.421,3,0.119,4,0.119,5,0.093,7,0.106,8,0.421,9,1.587,10,1.813,11,1.236,12,0.219,13,0.024,17,1.587,25,0.785,30,0.456,34,0.799,37,0.295,38,0.06,39,1.182,40,1.269,41,1.959,43,0.008,44,0.008,52,2.289,54,0.448,81,2.794,89,0.537,102,2.147,103,0.743,105,1.481,107,0.938,111,1.481,113,0.938,114,1.559,119,0.938,125,1.236,126,1.559,127,1.236,128,1.901,129,2.632,130,0.743,137,3.557,143,1.435,144,1.559,145,2.211,146,2.147,148,2.147,149,1.559,151,1.842,152,1.559,154,0.938,156,1.435,157,0.938,158,0.863,160,1.395,161,0.863,163,0.571,166,1.702,167,2.528,194,0.938,200,1.559,202,3.457,213,3.756,218,0.938,224,2.147,226,2.572,256,1.012,260,0.938,294,2.001,295,0.863,297,0.938,310,1.079,326,2.001,335,1.139,352,1.139,358,1.139,382,1.139,404,1.706,405,1.139,442,0.938,443,0.421,454,2.052,465,0.863,468,0.938,470,0.938,472,0.938,474,0.84,476,0.799,486,0.743,488,0.743,489,0.694,492,0.799,493,1.236,494,1.329,496,1.299,498,1.726,499,1.726,517,0.799,520,1.299,529,0.799,533,0.799,541,0.743,544,0.799,549,0.799,550,1.708,551,1.027,552,1.289,553,1.289,554,1.289,555,1.289,556,1.289,557,3.56,558,1.289,559,1.289,560,1.289,561,2.752,562,1.139,563,2.432,564,1.139,565,1.139,566,2.432,567,1.139,568,1.139,569,1.139,570,1.139,571,1.139,572,1.894,573,1.139,574,2.833,575,1.289,576,1.289,577,1.289,578,1.289,579,1.289,580,1.289,581,1.289,582,1.289,583,1.289,584,1.139,585,1.289,586,1.289,587,1.289,588,4.072,589,1.289,590,1.289,591,2.144,592,1.289,593,2.144,594,3.767,595,1.289,596,1.289,597,1.289,598,2.144,599,1.289,600,2.144,601,1.289,602,2.144,603,1.289,604,1.289,605,1.289,606,1.289,607,2.144,608,2.144,609,2.144,610,1.289,611,1.289,612,1.289,613,1.289,614,1.289,615,1.289,616,1.289,617,1.289,618,1.289,619,1.289,620,1.289,621,1.289,622,1.289,623,1.289,624,1.289,625,1.289,626,1.289,627,1.289,628,3.207,629,1.289,630,1.289,631,1.289,632,1.289,633,1.289,634,1.289,635,1.289,636,2.144,637,1.289,638,2.144,639,1.289,640,1.289,641,1.289,642,1.289,643,2.144,644,1.289,645,1.289,646,1.289,647,1.894,648,1.289,649,1.289,650,1.289,651,1.289,652,1.289,653,1.289,654,1.289,655,1.289,656,1.289,657,1.289,658,1.289,659,1.289,660,1.289,661,1.289,662,1.289,663,1.289,664,1.289,665,1.289,666,1.289,667,1.289,668,1.289,669,2.144,670,1.289,671,2.144,672,1.289,673,1.289,674,3.145,675,1.289,676,2.144,677,1.289,678,1.289,679,1.289,680,1.289,681,1.289,682,1.289,683,1.289,684,1.289]],["title/interfaces/Payload-1.html",[443,0.819,474,0.982,496,1.183]],["body/interfaces/Payload-1.html",[3,0.216,4,0.216,5,0.17,7,0.193,8,0.674,12,0.535,13,0.024,25,0.828,30,0.216,37,0.482,38,0.108,40,1.211,41,1.932,43,0.013,44,0.013,52,2.193,54,0.815,70,1.845,145,1.108,160,1.746,163,1.52,166,1.795,167,2.413,256,1.108,428,1.263,443,0.767,474,1.746,475,2.126,476,1.455,477,1.353,478,2.511,479,3.248,480,1.707,481,2.494,482,1.707,483,1.455,484,1.571,485,2.494,486,2.733,487,2.295,488,1.977,489,1.263,490,1.571,491,3.421,492,2.126,493,2.336,494,2.511,495,3.446,496,2.675,497,3.599,498,2.398,499,1.263,500,1.707,501,1.707,502,2.494,503,1.707,504,2.494,505,2.494,506,1.707,507,2.494,508,1.707,509,3.24,510,3.24,511,2.494,512,1.707,513,1.707,514,1.707,515,2.494,516,1.707,517,2.511,518,1.571,519,1.707,520,1.108,521,1.707,522,1.707,523,1.707,524,3.24,525,1.707,526,1.707,527,1.707,528,1.707,529,2.126,530,1.707,531,1.707,532,1.707,533,1.455,534,1.707,535,1.707,536,1.707,537,1.707,538,1.707,539,1.707,540,1.707,541,1.353,542,1.707,543,1.707,544,1.455,545,2.494,546,1.707,547,1.707,548,1.707,549,1.455]],["title/classes/RefreshTokenDto.html",[38,0.138,123,2.003]],["body/classes/RefreshTokenDto.html",[3,0.382,4,0.382,5,0.301,7,0.341,8,0.987,12,0.424,13,0.024,14,1.277,23,0.873,25,0.794,30,0.462,37,0.382,38,0.232,43,0.019,44,0.019,46,1.356,97,1.356,123,3.362,326,3.928,415,3.307,416,1.84,417,4.151,418,4.151,419,2.092,420,5.023,421,1.959,422,2.573,423,4.151,724,5.023]],["title/guards/RolesGuard.html",[132,1.855,725,2.644]],["body/guards/RolesGuard.html",[3,0.283,4,0.283,5,0.223,7,0.253,12,0.424,13,0.024,17,1.775,23,0.873,30,0.507,37,0.283,38,0.142,41,1.629,43,0.016,44,0.016,48,2.452,50,2.572,52,1.838,54,1.44,58,2.089,59,1.728,60,1.728,66,1.908,70,1.656,77,4,89,1.282,90,2.239,100,3.738,101,2.239,102,2.779,103,1.775,104,2.061,129,1.775,130,1.775,131,2.452,132,2.572,137,2.777,143,2.061,145,1.958,158,2.061,160,1.206,161,2.061,164,3.305,166,1.364,167,2.474,184,2.452,226,2.061,236,2.452,310,2.089,399,3.078,443,1.006,518,2.061,520,1.453,594,2.72,674,2.72,726,3.622,727,3.078,728,5.908,729,3.622,730,6.354,731,3.622,732,4.881,733,3.622,734,4.881,735,3.078,736,3.665,737,3.622,738,3.622,739,3.622,740,3.622,741,3.622,742,3.622,743,3.622,744,3.622,745,3.622,746,3.622,747,3.622,748,3.622,749,3.622,750,3.622]],["title/classes/TokenFactory.html",[38,0.138,499,1.61]],["body/classes/TokenFactory.html",[3,0.171,4,0.171,5,0.135,7,0.153,12,0.582,13,0.024,23,1.028,25,0.906,30,0.171,37,0.449,38,0.086,40,1.208,41,1.838,43,0.011,44,0.011,46,0.609,50,1.786,52,2.346,54,1,58,2.731,59,2.035,60,2.035,66,2.931,70,1.551,145,0.879,160,1.853,163,1.277,166,1.562,167,2.232,256,0.879,428,1.002,443,0.609,474,1.554,475,1.786,477,1.074,478,1.786,479,2.931,480,1.355,481,2.884,482,1.355,483,1.155,484,1.247,485,2.096,486,2.615,487,1.929,488,1.662,489,1.002,490,1.247,491,3.429,492,1.786,493,2.032,494,2.184,495,3.298,496,2.532,497,4.018,498,2.545,499,1.551,500,2.096,501,2.563,502,2.884,503,2.096,504,2.096,505,2.096,506,2.096,507,2.096,508,2.096,509,3.552,510,2.884,511,2.096,512,1.355,513,1.355,514,1.355,515,2.096,516,2.096,517,2.184,518,1.247,519,1.355,520,0.879,521,1.355,522,1.355,523,1.355,524,2.884,525,1.355,526,1.355,527,1.355,528,1.355,529,1.786,530,1.355,531,1.355,532,1.355,533,1.155,534,1.355,535,1.355,536,1.355,537,1.355,538,1.355,539,1.355,540,1.355,541,1.074,542,1.355,543,1.355,544,1.786,545,2.096,546,2.096,547,2.096,548,1.355,549,1.155,751,3.391,752,3.391,753,3.391,754,3.391,755,3.391,756,3.391,757,3.391,758,2.192,759,2.192,760,2.192,761,2.192,762,2.192,763,2.192,764,2.192,765,2.192,766,2.192]],["title/interfaces/TokenInfo.html",[474,1.172,479,1.855]],["body/interfaces/TokenInfo.html",[3,0.214,4,0.214,5,0.169,7,0.191,8,0.67,12,0.545,13,0.024,25,0.826,30,0.214,37,0.481,38,0.108,40,1.363,41,1.929,43,0.013,44,0.013,52,2.187,54,0.808,70,1.834,145,1.099,160,1.739,163,1.511,166,1.787,167,2.406,256,1.099,428,1.253,443,0.761,474,1.739,475,2.113,476,1.443,477,1.343,478,2.113,479,3.241,480,1.693,481,2.479,482,1.693,483,1.443,484,1.559,485,2.479,486,2.724,487,2.282,488,1.966,489,1.253,490,1.559,491,3.413,492,2.113,493,2.325,494,3.059,495,3.802,496,2.559,497,3.228,498,2.388,499,1.253,500,1.693,501,1.693,502,2.479,503,1.693,504,2.479,505,2.479,506,1.693,507,2.479,508,1.693,509,3.228,510,3.228,511,2.479,512,1.693,513,1.693,514,1.693,515,2.479,516,1.693,517,2.5,518,1.559,519,1.693,520,1.099,521,1.693,522,1.693,523,1.693,524,3.228,525,1.693,526,1.693,527,1.693,528,1.693,529,2.113,530,1.693,531,1.693,532,1.693,533,1.443,534,1.693,535,1.693,536,1.693,537,1.693,538,1.693,539,1.693,540,1.693,541,1.343,542,1.693,543,1.693,544,1.443,545,2.479,546,1.693,547,1.693,548,1.693,549,1.443]],["title/classes/UpdateAdminDto.html",[38,0.138,125,1.725]],["body/classes/UpdateAdminDto.html",[3,0.338,4,0.338,5,0.266,7,0.302,8,0.916,10,2.62,11,2.95,12,0.476,13,0.024,14,1.433,23,0.98,25,0.85,30,0.428,37,0.338,38,0.215,43,0.018,44,0.018,46,1.202,60,2.241,97,1.202,125,2.687,416,2.384,419,1.532,421,1.736,425,2.462,427,3.678,428,2.508,432,2.93,433,2.121,434,4.118,435,3.25,436,4.118,437,2.462,520,2.2,767,4.52,768,6.329,769,4.66,770,4.328,771,4.328,772,3.678,773,4.328,774,4.66,775,4.328,776,4.328,777,3.678,778,3.678]],["title/classes/UpdateUserDto.html",[38,0.138,127,1.725]],["body/classes/UpdateUserDto.html",[3,0.338,4,0.338,5,0.266,7,0.302,8,0.916,12,0.476,13,0.024,14,1.433,23,0.98,25,0.896,30,0.428,37,0.338,38,0.215,43,0.018,44,0.018,46,1.202,59,2.131,60,2.241,97,1.202,127,2.687,419,1.532,421,1.736,422,2.889,433,2.121,437,2.462,453,2.462,454,2.95,456,3.678,457,3.713,458,3.713,459,3.713,460,3.713,463,2.93,465,2.462,466,2.93,520,2.415,767,4.52,769,3.678,772,3.678,774,3.678,777,4.66,778,3.678,779,6.329,780,4.328,781,4.328,782,4.328,783,4.328]],["title/entities/User.html",[0,1.103,128,1.246]],["body/entities/User.html",[0,1.31,2,2.583,3,0.327,4,0.327,5,0.257,7,0.291,8,0.896,9,3.295,12,0.583,13,0.024,14,1.548,15,3.139,16,4.558,17,3.166,18,4.028,19,4.558,20,4.558,23,1.059,25,0.839,28,4.447,30,0.463,31,4.028,32,4.028,33,4.558,34,2.202,35,3.552,36,2.83,37,0.327,38,0.164,39,1.31,40,0.908,41,1.233,42,3.552,43,0.018,44,0.018,59,2.097,128,2.097,404,2.202,454,2.902,784,3.552,785,4.18,786,4.18,787,4.18,788,5.364,789,5.364,790,4.18,791,4.18]],["title/classes/UserCreateResp.html",[38,0.138,106,1.855]],["body/classes/UserCreateResp.html",[3,0.304,4,0.304,5,0.24,7,0.272,8,0.855,12,0.563,13,0.024,14,1.496,23,1.087,25,0.912,30,0.4,37,0.4,38,0.225,39,1.906,40,1.243,43,0.017,44,0.017,46,1.081,54,1.149,58,1.666,59,2.375,60,1.379,97,1.081,105,1.781,106,2.699,128,1.379,416,2.156,419,2.296,421,1.562,422,3.204,424,3.594,433,1.908,437,2.215,439,2.215,443,1.423,444,3.468,453,2.215,454,3.096,457,2.637,458,2.637,459,2.637,460,2.637,463,2.637,464,3.31,465,2.215,466,2.637,467,3.847,468,2.407,469,2.924,470,2.407,471,2.924,472,2.407,473,3.847,792,3.894,793,3.894,794,3.894,795,3.894]],["title/entities/UserSmsCode.html",[0,1.103,404,1.855]],["body/entities/UserSmsCode.html",[0,1.377,2,2.716,3,0.343,4,0.343,5,0.271,7,0.306,8,0.925,12,0.526,13,0.024,14,1.584,15,3.3,17,2.154,18,4.158,23,1.084,25,0.744,28,3.3,30,0.433,31,3.3,32,4.158,34,2.315,36,2.975,37,0.343,38,0.173,39,1.9,40,1.203,43,0.018,44,0.018,128,2.49,404,2.917,412,5.152,574,4.158,796,3.735,797,6.365,798,4.395,799,4.395,800,4.395,801,4.395,802,4.395,803,4.395,804,4.395,805,4.395,806,4.395,807,4.395]],["title/coverage.html",[808,4.07]],["body/coverage.html",[0,1.73,1,1.164,5,0.19,6,2.627,9,1.515,12,0.268,13,0.024,38,0.27,43,0.014,44,0.014,45,1.911,47,3.438,75,2.305,102,1.323,103,1.515,105,1.414,106,1.629,108,1.759,111,1.414,112,1.629,115,1.759,116,1.759,118,1.759,120,1.759,122,1.759,123,1.759,125,1.515,127,1.515,128,1.094,130,1.515,132,1.629,134,1.911,146,1.759,188,1.759,274,2.093,276,2.627,277,1.759,310,2.363,312,2.627,404,1.629,411,2.627,414,2.627,415,3.438,424,3.315,425,3.315,453,3.315,474,2.015,475,1.629,477,2.855,479,1.629,496,1.755,498,1.414,499,1.414,541,3.531,550,2.093,551,3.738,685,3.286,694,2.322,695,2.627,698,2.322,699,2.627,716,3.286,724,2.627,725,2.322,727,2.627,736,2.322,767,3.286,784,2.627,796,2.627,808,2.627,809,3.092,810,3.092,811,3.092,812,2.627,813,5.522,814,2.627,815,6.627,816,6.051,817,3.092,818,5.522,819,3.092,820,3.092,821,6.691,822,4.376,823,3.718,824,3.092,825,2.627,826,2.627,827,2.627,828,3.092,829,3.092]],["title/dependencies.html",[282,2.614,830,2.506]],["body/dependencies.html",[13,0.024,34,2.402,38,0.222,43,0.019,44,0.019,89,1.614,90,2.817,97,1.266,101,2.817,282,2.817,295,2.593,297,2.817,407,3.086,409,3.874,421,1.829,483,2.402,484,2.593,708,4.815,735,4.815,831,6.449,832,4.559,833,4.559,834,4.559,835,4.559,836,4.559,837,4.559,838,4.559,839,4.559,840,4.559,841,4.559,842,4.559,843,4.559,844,4.559,845,4.559,846,4.559,847,4.559,848,4.559,849,4.559,850,4.559,851,4.559,852,4.559,853,4.559,854,4.559,855,4.559,856,4.559,857,4.559,858,4.559,859,4.559]],["title/miscellaneous/enumerations.html",[860,1.445,861,3.595]],["body/miscellaneous/enumerations.html",[1,2.269,7,0.352,13,0.023,43,0.02,44,0.02,128,2.133,129,2.952,163,2.269,428,2.306,443,1.4,477,2.471,486,2.952,487,3.428,488,2.952,489,2.306,490,2.869,860,2.471,861,4.286,862,5.12,863,5.043,864,5.798,865,5.043]],["title/miscellaneous/functions.html",[860,1.445,866,3.595]],["body/miscellaneous/functions.html",[7,0.383,13,0.021,43,0.021,44,0.021,825,4.671,827,5.675,860,2.693,866,4.671,867,5.497]],["title/index.html",[7,0.206,868,2.949,869,2.949]],["body/index.html",[5,0.335,13,0.021,43,0.021,44,0.021,136,3.686,870,5.444,871,5.444,872,5.444,873,5.444,874,4.627,875,5.444,876,5.444,877,5.444,878,5.444]],["title/modules.html",[281,2.959]],["body/modules.html",[13,0.021,43,0.021,44,0.021,280,3.686,281,3.365,286,3.365,879,6.303,880,6.303,881,6.303,882,6.303]],["title/overview.html",[883,4.07]],["body/overview.html",[2,3.027,13,0.022,43,0.019,44,0.019,46,1.36,102,2.723,275,3.027,277,3.62,280,4.656,281,3.027,282,3.659,283,4.163,284,4.163,285,4.163,286,4.183,287,4.446,288,3.678,289,3.678,311,3.316,400,4.163,401,4.163,443,1.36,476,2.581,725,3.678,883,4.163,884,5.921,885,5.921,886,4.898,887,4.898]],["title/properties.html",[8,0.706,830,2.506]],["body/properties.html",[8,0.909,13,0.023,43,0.021,44,0.021,197,3.686,888,5.444,889,5.444,890,5.444,891,5.444,892,5.444]],["title/miscellaneous/typealiases.html",[860,1.445,893,4.23]],["body/miscellaneous/typealiases.html",[7,0.377,12,0.469,13,0.021,43,0.021,44,0.021,477,2.651,491,3.572,493,3.077,826,5.337,860,2.651,862,5.337,894,5.41]],["title/miscellaneous/variables.html",[860,1.445,895,3.595]],["body/miscellaneous/variables.html",[7,0.294,11,2.063,12,0.544,13,0.024,17,2.641,25,0.566,40,0.914,41,1.242,43,0.018,44,0.018,62,2.851,103,2.641,129,2.063,130,3.173,148,3.066,151,3.381,156,3.066,160,1.402,163,1.586,165,4.242,173,3.648,224,2.396,256,2.162,304,3.579,305,3.579,306,3.579,489,1.926,551,2.851,562,3.162,563,4.463,564,3.162,565,3.162,566,4.463,567,3.162,568,3.162,569,3.162,570,3.162,571,3.162,572,4.047,573,3.162,736,4.047,812,3.579,814,4.58,823,3.579,860,2.063,864,5.325,874,4.58,895,3.579,896,4.211,897,5.389,898,4.211,899,4.211,900,4.211,901,4.211,902,4.211,903,4.211,904,4.211,905,4.211,906,4.211,907,4.211,908,4.211]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":541,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["0.0.1",{"_index":889,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["0.2.43",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["0.22.15",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["0.5.6",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["0000",{"_index":723,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["0000'})@isstring",{"_index":720,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["1",{"_index":443,"title":{"interfaces/Payload-1.html":{}},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1.0.0",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["134",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["14",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["16",{"_index":886,"title":{},"body":{"overview.html":{}}}],["18",{"_index":789,"title":{},"body":{"entities/User.html":{}}}],["2",{"_index":884,"title":{},"body":{"overview.html":{}}}],["2.14.1",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":208,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["200})@apiresponse({status",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":199,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["201})@apiresponse({status",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["24",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["24'})@isphonenumber('ru",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["24'})@validateif(o",{"_index":780,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["3.0.2",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["3/26",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":885,"title":{},"body":{"overview.html":{}}}],["4.3.0",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":196,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["401",{"_index":266,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["403",{"_index":198,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["404",{"_index":207,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["5.2.0",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":887,"title":{},"body":{"overview.html":{}}}],["60",{"_index":639,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["60000",{"_index":637,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["7",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["7.2.0",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["81375461323",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["936",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["_e",{"_index":523,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["_payload",{"_index":513,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["active",{"_index":487,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["admin",{"_index":1,"title":{"entities/Admin.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"interfaces/Payload.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["admin'})@apibody({type",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin'})@apiparam({type",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin'})@apiresponse({status",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin.baseuser",{"_index":611,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["admin.dto",{"_index":114,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["admin.dto.ts",{"_index":425,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["admin.dto.ts:11",{"_index":431,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginAdminDto.html":{}}}],["admin.dto.ts:12",{"_index":689,"title":{},"body":{"classes/GetAdminResp.html":{}}}],["admin.dto.ts:13",{"_index":773,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["admin.dto.ts:14",{"_index":445,"title":{},"body":{"classes/CreateAdminResp.html":{}}}],["admin.dto.ts:17",{"_index":688,"title":{},"body":{"classes/GetAdminResp.html":{}}}],["admin.dto.ts:20",{"_index":447,"title":{},"body":{"classes/CreateAdminResp.html":{}}}],["admin.dto.ts:23",{"_index":446,"title":{},"body":{"classes/CreateAdminResp.html":{}}}],["admin.dto.ts:4",{"_index":686,"title":{},"body":{"classes/GetAdminResp.html":{}}}],["admin.dto.ts:7",{"_index":429,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginAdminDto.html":{}}}],["admin.dto.ts:8",{"_index":771,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["admin.email",{"_index":442,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"interfaces/Payload.html":{}}}],["admin.id",{"_index":440,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{}}}],["admin.password",{"_index":610,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["adminexist",{"_index":565,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["adminexistbyemail(email",{"_index":595,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["adminfailedauth",{"_index":568,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["adminnotfoud",{"_index":567,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["adminreposiotry",{"_index":580,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["admins",{"_index":245,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["admins'})@apiresponse({status",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["algorithm",{"_index":502,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["aliases",{"_index":894,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allauthserviceexceptionsfilter",{"_index":45,"title":{"classes/AllAuthServiceExceptionsFilter.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{}}}],["apibearerauth",{"_index":91,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apibody",{"_index":92,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apibody({type",{"_index":201,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apioperation",{"_index":93,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apioperation({summary",{"_index":193,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiparam",{"_index":94,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiparam({name",{"_index":250,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiparam({type",{"_index":210,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiproperty",{"_index":419,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["apiproperty()@isstring({message",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({example",{"_index":416,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UserCreateResp.html":{}}}],["apiproperty({example:\"qwerty",{"_index":719,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["apiproperty({required",{"_index":779,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":95,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiresponse({status",{"_index":195,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiresponse({type",{"_index":254,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apitags",{"_index":96,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apitags('auth",{"_index":186,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["app.controller",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":274,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":280,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":63,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["assert",{"_index":554,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["async",{"_index":202,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{}}}],["auth",{"_index":156,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["auth'})@apibody({type",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":403,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":104,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["auth/auth.module",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":188,"title":{"controllers/AuthController.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcontrolleredrrorinterceptor",{"_index":134,"title":{"classes/AuthControllerEdrrorInterceptor.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{}}}],["authguard",{"_index":696,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":697,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authheader",{"_index":742,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authheader.split",{"_index":745,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":892,"title":{},"body":{"properties.html":{}}}],["authorizated",{"_index":267,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["authorizated'})@httpcode(200",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["authservice",{"_index":102,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["authserviceexceptions",{"_index":103,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authserviceexceptions.adminexist",{"_index":152,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.adminfailedauth",{"_index":154,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.adminnotfoud",{"_index":631,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.invalidtoken",{"_index":158,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["authserviceexceptions.tokenexpired",{"_index":161,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["authserviceexceptions.tokennotfound",{"_index":164,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["authserviceexceptions.userexist",{"_index":144,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.userfailedauth",{"_index":157,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.usernotfound",{"_index":149,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["autoloadentities",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":213,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["bad",{"_index":235,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception",{"_index":72,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception(\"admin",{"_index":153,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception(\"failed",{"_index":155,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception(\"user",{"_index":147,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["base",{"_index":587,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["baseuser",{"_index":9,"title":{"entities/BaseUser.html":{}},"body":{"entities/Admin.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"coverage.html":{}}}],["baseuser.entity",{"_index":35,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["baseuserreposiotry",{"_index":578,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["body",{"_index":73,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["body'})@apiresponse({status",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":734,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":827,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":882,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":879,"title":{},"body":{"modules.html":{}}}],["callhandler",{"_index":74,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["canactivate",{"_index":728,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":732,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cascade",{"_index":20,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["cascade'})@joincolumn",{"_index":22,"title":{},"body":{"entities/Admin.html":{}}}],["case",{"_index":143,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":51,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["catch(_e",{"_index":521,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["catch(e",{"_index":750,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch(exception",{"_index":61,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["catcherror",{"_index":99,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["check",{"_index":591,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["checkexpirationstatus",{"_index":751,"title":{},"body":{"classes/TokenFactory.html":{}}}],["checkexpirationstatus(expires",{"_index":547,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["checktoken",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["checktoken(@body",{"_index":269,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["checktoken(decoded",{"_index":679,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["checktoken(req",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["checktokendto",{"_index":108,"title":{"classes/CheckTokenDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"coverage.html":{}}}],["checktokendto})@apiresponse({status",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["class",{"_index":38,"title":{"classes/AllAuthServiceExceptionsFilter.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":46,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":400,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":401,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["code",{"_index":647,"title":{},"body":{"interfaces/CreatedTokens.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{}}}],["column",{"_index":28,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["column({length",{"_index":788,"title":{},"body":{"entities/User.html":{}}}],["column({name",{"_index":799,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["column({name:\"smscode",{"_index":807,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["column({unique",{"_index":26,"title":{},"body":{"entities/Admin.html":{}}}],["configmodule",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{}}}],["configservice.get(\"identy_database_uri",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"identy_refresh_secret",{"_index":585,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["configservice.get(\"identy_secret",{"_index":584,"title":{},"body":{"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{}}}],["console.log(\"interceptor",{"_index":141,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["const",{"_index":167,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["constructor",{"_index":54,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{}}}],["constructor(admin",{"_index":438,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{}}}],["constructor(configservice",{"_index":701,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(httpadapterhost",{"_index":55,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["constructor(private",{"_index":189,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["constructor(reflector",{"_index":729,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(secretkey",{"_index":758,"title":{},"body":{"classes/TokenFactory.html":{}}}],["constructor(user",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["context",{"_index":399,"title":{},"body":{"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":740,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":739,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":741,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":75,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{}}}],["controller('auth",{"_index":187,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["controllers",{"_index":275,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["coverage",{"_index":808,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":194,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createadmin",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["createadmin(@body",{"_index":230,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createadmin(req",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createadmindto",{"_index":111,"title":{"classes/CreateAdminDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["createadmindto})@apibearerauth",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["createadminresp",{"_index":112,"title":{"classes/CreateAdminResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"coverage.html":{}}}],["createadminresp(await",{"_index":231,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createadminresp})@apibody({type",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["createbaseuser",{"_index":589,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["created",{"_index":200,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["created.smscode",{"_index":671,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createdtoken",{"_index":475,"title":{"interfaces/CreatedToken.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["createdtokens",{"_index":550,"title":{"interfaces/CreatedTokens.html":{}},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["createexpiresfunc",{"_index":493,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/typealiases.html":{}}}],["createrefreshtoken",{"_index":752,"title":{},"body":{"classes/TokenFactory.html":{}}}],["createrefreshtoken(payload",{"_index":506,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["createsms",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["createsms(@param(\"phone",{"_index":251,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createsms(phone",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["createsmscode(phonenumber",{"_index":660,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createsometoken",{"_index":753,"title":{},"body":{"classes/TokenFactory.html":{}}}],["createsometoken(payload",{"_index":508,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["createtoken",{"_index":754,"title":{},"body":{"classes/TokenFactory.html":{}}}],["createtoken(payload",{"_index":503,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["createtokenfunc",{"_index":491,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/typealiases.html":{}}}],["createtokenresp",{"_index":115,"title":{"classes/CreateTokenResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateTokenResp.html":{},"coverage.html":{}}}],["createtokenresp})@apiresponse({status",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokens(payload",{"_index":655,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createuser",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(@body",{"_index":203,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createuser(createuserdto",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(req",{"_index":597,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createuserdto",{"_index":105,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["createuserdto})@apibearerauth",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto",{"_index":556,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["ctx",{"_index":170,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["database",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":511,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decode",{"_index":482,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decode(token",{"_index":519,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decoded",{"_index":674,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["decoded.payload.payload.role.includes(role",{"_index":749,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decodedtoken",{"_index":498,"title":{"interfaces/DecodedToken.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["decoderefreshtoken",{"_index":755,"title":{},"body":{"classes/TokenFactory.html":{}}}],["decoderefreshtoken(refresh",{"_index":677,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["decoderefreshtoken(token",{"_index":546,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodesometoken",{"_index":756,"title":{},"body":{"classes/TokenFactory.html":{}}}],["decodesometoken(token",{"_index":516,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetoken",{"_index":757,"title":{},"body":{"classes/TokenFactory.html":{}}}],["decodetoken(token",{"_index":544,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetype",{"_index":488,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["decodetype.integtiryerror",{"_index":533,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetype.invalidtoken",{"_index":529,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetype.valid",{"_index":542,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"entities/Admin.html":{},"controllers/AuthController.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["default",{"_index":165,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["delete",{"_index":76,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["delete(\"/admin/:id",{"_index":240,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["delete('/admin/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('/user/:id",{"_index":206,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["delete('/user/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteadmin",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteadmin(@param('id",{"_index":241,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["deleteadmin(id",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["deletebaseuser(id",{"_index":604,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["deleted",{"_index":209,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["deleted'})@apiparam({type",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuser",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuser(@param('id",{"_index":211,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["deleteuser(id",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["dependencies",{"_index":282,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":197,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"properties.html":{}}}],["documentation",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":107,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["dto/check",{"_index":109,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/create",{"_index":113,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["dto/get",{"_index":117,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/login",{"_index":121,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/refresh",{"_index":124,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/update",{"_index":126,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["dynamicmodule",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":70,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["e.message",{"_index":524,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["e.message.indexof(\"unexpected",{"_index":540,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["eager",{"_index":18,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["email",{"_index":10,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{},"interfaces/Payload.html":{},"classes/UpdateAdminDto.html":{}}}],["encode",{"_index":480,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["encode(_payload",{"_index":514,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["enough",{"_index":526,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"overview.html":{}}}],["entity",{"_index":0,"title":{"entities/Admin.html":{},"entities/BaseUser.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"coverage.html":{}}}],["entity({name",{"_index":36,"title":{},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["entity/user_sms_code.entity",{"_index":405,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["entitynotfounderror",{"_index":558,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["enum",{"_index":485,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["enumerations",{"_index":861,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":873,"title":{},"body":{"index.html":{}}}],["err",{"_index":140,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["error",{"_index":522,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["error(\"admin",{"_index":566,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["error(\"invalid",{"_index":570,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["error(\"token",{"_index":572,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["error(\"user",{"_index":563,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":537,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["example",{"_index":422,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["exception",{"_index":65,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":177,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["exception.getstatus",{"_index":178,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["exceptionfilter",{"_index":49,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["executioncontext",{"_index":77,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":148,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["exist'})@apibearerauth",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["exist'})@apiresponse({status",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["expirationstatus",{"_index":486,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["expirationstatus.active",{"_index":548,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expirationstatus.expired",{"_index":549,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expired",{"_index":163,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expires",{"_index":495,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expiresfunc",{"_index":492,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expiresfunc(now",{"_index":512,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["export",{"_index":37,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["express",{"_index":735,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":478,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["extractjwt",{"_index":706,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":712,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyj0exaioijkv1qilcjhbgcioijiuzuxmij9.eyjwyxlsb2fkijp7injvbguioijhzg1pbiisinvzzxjjzci6mn0simlzc3vlzci6mty0nza3mzi5mtk4niwizxhwaxjlcyi6mty0nze1oty5mtk4nn0.v_9tx8twre8vkqtf3eaxn8bvnmbstfbwskyzuoixd00nbv7_kcylkojxxj4f0afuvrsoyv1codff2k_cg8ylxa",{"_index":423,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["eyj0exaioijkv1qilcjhbgcioijiuzuxmij9.eyjwyxlsb2fkijp7injvbguioijhzg1pbiisinvzzxjjzci6mn0simlzc3vlzci6mty0nza3mzi5mtk4niwizxhwaxjlcyi6mty0nze1oty5mtk4nn0.v_9tx8twre8vkqtf3eaxn8bvnmbstfbwskyzuoixd00nbv7_kcylkojxxj4f0afuvrsoyv1codff2k_cg8ylxa'})@isjwt",{"_index":417,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzuxmiisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiywrtaw4ionrydwusimlhdci6mtuxnjizotaymn0.vfb0qj1lrg_4ujbzormxnvkugiukq5kxwqndbkq_g9vvz",{"_index":448,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["failed",{"_index":256,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":520,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["false})@validateif(o",{"_index":769,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"index.html":{}}}],["findmanyoptions",{"_index":561,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["found",{"_index":151,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["found'})@apiresponse({status",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["fpg",{"_index":450,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["function",{"_index":826,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":866,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(\"/admin",{"_index":244,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["get('/admin')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/user",{"_index":216,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["get('/user')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["getadmin",{"_index":628,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin(id",{"_index":619,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin.email",{"_index":633,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin.id",{"_index":644,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin.password",{"_index":642,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadminresp",{"_index":116,"title":{"classes/GetAdminResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/GetAdminResp.html":{},"coverage.html":{}}}],["getadminresp(admin",{"_index":248,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getadminresp(await",{"_index":238,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getadminresp})@apiresponse({status",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["getadmins",{"_index":246,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getadmins(opts",{"_index":615,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["gethello",{"_index":313,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":868,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":218,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuser(id",{"_index":617,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuser.phonenumber",{"_index":625,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getusers(opts",{"_index":613,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getusersresp",{"_index":118,"title":{"classes/GetUsersResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/GetUsersResp.html":{},"coverage.html":{}}}],["getusersresp(await",{"_index":227,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getusersresp(user",{"_index":220,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getusersresp})@apiresponse({status",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserwithcode",{"_index":648,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuserwithcode.id",{"_index":653,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuserwithcode.smscode",{"_index":652,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["guard",{"_index":725,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":726,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":534,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["hello",{"_index":315,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":62,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":171,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["hourinms",{"_index":638,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["hs512",{"_index":586,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["httpadapter",{"_index":168,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":183,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpadapterhost",{"_index":56,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpcode",{"_index":78,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpcode(200",{"_index":268,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpexception",{"_index":71,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpstatus",{"_index":88,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["id",{"_index":39,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["id'})@apibearerauth",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["identy",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identy_database_uri=\"postgresql://root:root@localhost:5432/identy",{"_index":876,"title":{},"body":{"index.html":{}}}],["identy_refresh_secret=\"refresh_super_secret",{"_index":878,"title":{},"body":{"index.html":{}}}],["identy_secret=\"super_secret",{"_index":877,"title":{},"body":{"index.html":{}}}],["if(!isdeleted",{"_index":215,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["if(!requiredroles",{"_index":747,"title":{},"body":{"guards/RolesGuard.html":{}}}],["if(authheader",{"_index":744,"title":{},"body":{"guards/RolesGuard.html":{}}}],["if(exception",{"_index":175,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["if(getadmin",{"_index":630,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(getuser",{"_index":623,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(getuserwithcode",{"_index":651,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(req.email",{"_index":632,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(req.phonenumber",{"_index":624,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(user",{"_index":661,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(userwithsms",{"_index":666,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["ignoreexpiration",{"_index":713,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":48,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":30,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["imports",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["inject",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":310,"title":{"injectables/AppService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{}},"body":{"injectables/AppService.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":311,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["injectrepository",{"_index":552,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(admin",{"_index":579,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(baseuser",{"_index":577,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(user",{"_index":575,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(usersmscode",{"_index":581,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["instanceof",{"_index":176,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["integtiryerror",{"_index":490,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["intercept",{"_index":397,"title":{},"body":{"classes/AuthControllerEdrrorInterceptor.html":{}}}],["intercept(context",{"_index":135,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["interface",{"_index":474,"title":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"interfaces/TokenInfo.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["interfaces",{"_index":476,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"interfaces/TokenInfo.html":{},"overview.html":{}}}],["invalidtoken",{"_index":489,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["isdeleted",{"_index":212,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["isemail",{"_index":432,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/LoginAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["isemail({},{message",{"_index":435,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/UpdateAdminDto.html":{}}}],["isglobal",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":420,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isphonenumber",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["isphonenumber(\"ru",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["isstring",{"_index":433,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["isstring({message",{"_index":437,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["issued",{"_index":494,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["joincolumn",{"_index":31,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["joincolumn({name",{"_index":806,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["json",{"_index":535,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["jwt",{"_index":483,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":711,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":694,"title":{"injectables/JwtGuard.html":{}},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":408,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtstrategy",{"_index":698,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["key",{"_index":509,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["length",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["license",{"_index":890,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":444,"title":{},"body":{"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["local",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loginadmin",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmin(@body",{"_index":257,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["loginadmin(email",{"_index":640,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["loginadmin(req",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmindto",{"_index":120,"title":{"classes/LoginAdminDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/LoginAdminDto.html":{},"coverage.html":{}}}],["loginuser",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@body",{"_index":262,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["loginuser(phonenumber",{"_index":646,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["loginuser(req",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":122,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto})@apiresponse({status",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["many",{"_index":527,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["matching",{"_index":44,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random()*9",{"_index":663,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["memberof",{"_index":588,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["message",{"_index":427,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["metadata",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":50,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{}}}],["minuteinms",{"_index":636,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["miscellaneous",{"_index":860,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":279,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules",{"_index":281,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["mongorepository",{"_index":559,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["mysql",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":59,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{}}}],["nestinterceptor",{"_index":79,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["nestjs/common",{"_index":89,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":90,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":97,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"dependencies.html":{}}}],["new",{"_index":146,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["newexpection",{"_index":179,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["newexpection.getresponse",{"_index":181,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["newexpection.getstatus",{"_index":182,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["next",{"_index":136,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"index.html":{}}}],["next.handle",{"_index":138,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["nonsense",{"_index":539,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["notfoundexception",{"_index":80,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["notfoundexception(\"admin",{"_index":243,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["notfoundexception(\"user",{"_index":150,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["now",{"_index":510,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["number",{"_index":40,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"miscellaneous/variables.html":{}}}],["o",{"_index":775,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["o.email",{"_index":776,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["o.email)@isemail",{"_index":770,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["o.name",{"_index":778,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["o.name)@isstring({message",{"_index":772,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["o.phonenumber",{"_index":783,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["o.phonenumber)@isphonenumber('ru",{"_index":781,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["object",{"_index":173,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":100,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ondelete",{"_index":19,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["onetomany",{"_index":803,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["onetoone",{"_index":32,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["onetoone(undefined",{"_index":15,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["onupdate",{"_index":21,"title":{},"body":{"entities/Admin.html":{}}}],["optional",{"_index":60,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["out",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["overview",{"_index":883,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":830,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":81,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"classes/UserCreateResp.html":{}}}],["params",{"_index":875,"title":{},"body":{"index.html":{}}}],["parse",{"_index":536,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["passport",{"_index":708,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":705,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":709,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":11,"title":{},"body":{"entities/Admin.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/LoginAdminDto.html":{},"interfaces/Payload.html":{},"classes/UpdateAdminDto.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":496,"title":{"interfaces/Payload.html":{},"interfaces/Payload-1.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["payload.role",{"_index":715,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":224,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["phonenumber",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{}}}],["pipe",{"_index":139,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["pkg/.../index.ts",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pkg/tesing/index.ts",{"_index":812,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":82,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/admin",{"_index":229,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/admin/login",{"_index":253,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/checktoken",{"_index":265,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/refreshtoken",{"_index":271,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/testsms/:phone",{"_index":249,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/user/login",{"_index":261,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post('/admin')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/admin/login')@apiresponse({type",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/checktoken')@apibody({type",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/refreshtoken')@apibody({type",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/testsms/:phone')@apiparam({name",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user",{"_index":190,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post('/user')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user/login')@apibody({type",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["primary",{"_index":16,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn",{"_index":412,"title":{},"body":{"entities/BaseUser.html":{},"entities/UserSmsCode.html":{}}}],["private",{"_index":52,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["project",{"_index":871,"title":{},"body":{"index.html":{}}}],["promise",{"_index":137,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"properties.html":{}}}],["providers",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["put",{"_index":83,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["put(\"/admin/:id",{"_index":233,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["put(\"/user/:id",{"_index":221,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["put('/admin/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('/user/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["queryfailederror",{"_index":560,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["qwerty",{"_index":436,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/UpdateAdminDto.html":{}}}],["qwerty'})@isstring",{"_index":718,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["qwerty'})@isstring({message",{"_index":430,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["randomnubmer",{"_index":662,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["randomnubmer()}${randomnubmer()}${randomnubmer()}${randomnubmer",{"_index":669,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["randomuuid",{"_index":555,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["readonly",{"_index":166,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["reflect",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":730,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refreshsecretkey",{"_index":501,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["refreshtoken",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTokenResp.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":272,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["refreshtoken(req",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(token",{"_index":682,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["refreshtoken.token",{"_index":659,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["refreshtokendto",{"_index":123,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokendto})@apiresponse({status",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["relations",{"_index":650,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["repository",{"_index":557,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["req",{"_index":226,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["req.code",{"_index":264,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["req.email",{"_index":609,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["req.headers.authorization",{"_index":743,"title":{},"body":{"guards/RolesGuard.html":{}}}],["req.name",{"_index":599,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["req.password",{"_index":260,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["req.phonenumber",{"_index":600,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["request",{"_index":236,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["request'})@apibearerauth",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["require",{"_index":872,"title":{},"body":{"index.html":{}}}],["require('express",{"_index":98,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["required",{"_index":768,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["requiredroles",{"_index":737,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":748,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["resp",{"_index":172,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["result",{"_index":517,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["result.affected",{"_index":606,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["results",{"_index":43,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":41,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":66,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{}}}],["rimraf",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":129,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":645,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["role.user",{"_index":654,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["roles",{"_index":130,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":191,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["roles.decorator",{"_index":131,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["roles.guard",{"_index":133,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{}}}],["roles_key",{"_index":736,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":132,"title":{"guards/RolesGuard.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["root",{"_index":874,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":101,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["s1zza9lpxthwka64zdl2ofkt8f6jbt_k4riu",{"_index":449,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["secretkey",{"_index":500,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["secretorkey",{"_index":714,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["segments",{"_index":528,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["setmetadata(roles_key",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":870,"title":{},"body":{"index.html":{}}}],["signature",{"_index":530,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["simple",{"_index":484,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"dependencies.html":{}}}],["smscode",{"_index":797,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["smsrepository",{"_index":582,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["src/.../auth.service.ts",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":867,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.ts",{"_index":863,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../token.ts",{"_index":862,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":312,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":314,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":47,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:133",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:145",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:158",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:176",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:189",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:203",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:215",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:228",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:238",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":398,"title":{},"body":{"classes/AuthControllerEdrrorInterceptor.html":{}}}],["src/auth/auth.controller.ts:246",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:256",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:267",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:275",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:65",{"_index":57,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":64,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["src/auth/auth.controller.ts:89",{"_index":69,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["src/auth/auth.module.ts",{"_index":402,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":551,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/check",{"_index":414,"title":{},"body":{"classes/CheckTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":424,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["src/auth/dto/get",{"_index":685,"title":{},"body":{"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":716,"title":{},"body":{"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/refresh",{"_index":724,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":767,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/entity/admin.entity.ts",{"_index":6,"title":{},"body":{"entities/Admin.html":{},"coverage.html":{}}}],["src/auth/entity/admin.entity.ts:15",{"_index":27,"title":{},"body":{"entities/Admin.html":{}}}],["src/auth/entity/admin.entity.ts:18",{"_index":29,"title":{},"body":{"entities/Admin.html":{}}}],["src/auth/entity/admin.entity.ts:8",{"_index":24,"title":{},"body":{"entities/Admin.html":{}}}],["src/auth/entity/baseuser.entity.ts",{"_index":411,"title":{},"body":{"entities/BaseUser.html":{},"coverage.html":{}}}],["src/auth/entity/baseuser.entity.ts:6",{"_index":413,"title":{},"body":{"entities/BaseUser.html":{}}}],["src/auth/entity/user.entity.ts",{"_index":784,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/auth/entity/user.entity.ts:16",{"_index":790,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entity/user.entity.ts:19",{"_index":787,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entity/user.entity.ts:9",{"_index":786,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entity/user_sms_code.entity.ts",{"_index":796,"title":{},"body":{"entities/UserSmsCode.html":{},"coverage.html":{}}}],["src/auth/entity/user_sms_code.entity.ts:11",{"_index":802,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["src/auth/entity/user_sms_code.entity.ts:14",{"_index":800,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["src/auth/entity/user_sms_code.entity.ts:7",{"_index":798,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["src/auth/jwt.guard.ts",{"_index":695,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":699,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:19",{"_index":704,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":702,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/roles.decorator.ts",{"_index":823,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles.guard.ts",{"_index":727,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles.guard.ts:10",{"_index":731,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles.guard.ts:13",{"_index":733,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles.ts",{"_index":865,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/token.ts",{"_index":477,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/token.ts:112",{"_index":766,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:116",{"_index":764,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:120",{"_index":760,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:39",{"_index":759,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:46",{"_index":763,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:50",{"_index":761,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:54",{"_index":762,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:76",{"_index":765,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/main.ts",{"_index":825,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":869,"title":{"index.html":{}},"body":{}}],["statements",{"_index":811,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":255,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["statuscode",{"_index":174,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["strategy",{"_index":707,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":25,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":710,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["supplied",{"_index":525,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["support",{"_index":880,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":532,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["svg",{"_index":881,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["switch(decoded.expirationstatus",{"_index":681,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["switch(decoded.type",{"_index":680,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["switch(e",{"_index":184,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["switch(err",{"_index":142,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["switcherror",{"_index":53,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["switcherror(e",{"_index":68,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["synchronize",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":497,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["table",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["talgorithm",{"_index":481,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["testdatabase",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":814,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["this.adminexistbyemail(req.email",{"_index":608,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.find(opts",{"_index":616,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.findone",{"_index":641,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.findone(id",{"_index":620,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.findone({where",{"_index":596,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.merge",{"_index":635,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.save",{"_index":634,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.save(admin",{"_index":612,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.algorithm",{"_index":515,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.authservice.createadmin(req",{"_index":232,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.createsmscode(phone",{"_index":252,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.createuser(createuserdto",{"_index":205,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.decodetoken(req.token",{"_index":270,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.decodetoken(token",{"_index":746,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.authservice.deleteadmin(id",{"_index":242,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.deleteuser(id",{"_index":214,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.getadmins()).map",{"_index":247,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.getusers()).map",{"_index":219,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.loginadmin(req.email",{"_index":259,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.loginuser(req.phonenumber",{"_index":263,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.refreshtoken(req.refreshtoken",{"_index":273,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.updateadmin(id",{"_index":239,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.updateuser(id",{"_index":228,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.baseuser.id",{"_index":42,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["this.baseuserreposiotry.delete({id",{"_index":605,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.baseuserreposiotry.save(new",{"_index":590,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.checkexpirationstatus(result.expires",{"_index":543,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.checktoken(decoded",{"_index":676,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.createbaseuser",{"_index":602,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.createsometoken(payload",{"_index":504,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.createtokens(decoded.payload.payload",{"_index":684,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.createtokens({userid",{"_index":643,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.decoderefreshtoken(token",{"_index":683,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.decodesometoken(token",{"_index":545,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.deletebaseuser(id",{"_index":607,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.email",{"_index":441,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{}}}],["this.getadmin(id",{"_index":629,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.getuser(id",{"_index":622,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.httpadapterhost",{"_index":169,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.id",{"_index":439,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["this.name",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["this.phonenumber",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["this.reflector.getallandoverride",{"_index":738,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.refreshsecretkey",{"_index":507,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.secretkey",{"_index":505,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.smsrepository.findone",{"_index":649,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.smsrepository.findone({where",{"_index":665,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.smsrepository.save(usersmscode",{"_index":670,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.smsrepository.save(userwithsms",{"_index":673,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.switcherror(exception",{"_index":180,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.tokenfactory",{"_index":583,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.createrefreshtoken(payload)(this.expiresfunc",{"_index":657,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.createtoken(payload)(this.expiresfunc",{"_index":656,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.decoderefreshtoken(refresh",{"_index":678,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.decodetoken(token",{"_index":675,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userexistbyphonenumber(req.phonenumber",{"_index":598,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.find(opts",{"_index":614,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.findone(id",{"_index":618,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.findone({where",{"_index":593,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.merge(getuser",{"_index":627,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.save",{"_index":626,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.save(user",{"_index":603,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["throw",{"_index":145,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["thrown",{"_index":538,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["throws",{"_index":553,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["token",{"_index":160,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateTokenResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/variables.html":{}}}],["token.dto",{"_index":110,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["token.dto.ts",{"_index":415,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateTokenResp.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:11",{"_index":418,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:5",{"_index":452,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["token.dto.ts:8",{"_index":451,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["token.token",{"_index":658,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["tokenexpired",{"_index":571,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["tokenfactory",{"_index":499,"title":{"classes/TokenFactory.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["tokeninfo",{"_index":479,"title":{"interfaces/TokenInfo.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["tokennotfound",{"_index":573,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":258,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["transformer",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":17,"title":{},"body":{"entities/Admin.html":{},"modules/AppModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"miscellaneous/variables.html":{}}}],["true})@joincolumn",{"_index":785,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":801,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["try",{"_index":518,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["type",{"_index":12,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":893,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedoc",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["typeorm",{"_index":34,"title":{},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([baseuser",{"_index":410,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeormmodule.forrootasync",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":86,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["unauthorizedexception(\"invalid",{"_index":159,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["unauthorizedexception(\"token",{"_index":162,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["undefined",{"_index":594,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["undefined})@apibearerauth",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["unique",{"_index":33,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["unknown",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":891,"title":{},"body":{"properties.html":{}}}],["update",{"_index":222,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updateadmin",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateadmin(@param(\"id",{"_index":237,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updateadmin(id",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["updateadmindto",{"_index":125,"title":{"classes/UpdateAdminDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["updated",{"_index":234,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updatet",{"_index":223,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updateuser",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuser(@param(\"id",{"_index":225,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updateuser(id",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuser(id:number",{"_index":621,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["updateuserdto",{"_index":127,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["url",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":84,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useguards",{"_index":87,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useguards(rolesguard",{"_index":192,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useinterceptors",{"_index":85,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useinterceptors(authcontrolleredrrorinterceptor",{"_index":185,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["user",{"_index":128,"title":{"entities/User.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apibody({type",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@apiparam({type",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@apiresponse({status",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.baseuser",{"_index":601,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["user.dto",{"_index":119,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["user.dto.ts",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":721,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:13",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:14",{"_index":691,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["user.dto.ts:17",{"_index":792,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.dto.ts:19",{"_index":693,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["user.dto.ts:24",{"_index":692,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["user.dto.ts:27",{"_index":793,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.dto.ts:32",{"_index":795,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.dto.ts:37",{"_index":794,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.dto.ts:4",{"_index":690,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["user.dto.ts:7",{"_index":722,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:8",{"_index":782,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:9",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":804,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["user.id",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{}}}],["user.name",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{}}}],["user.name@example.com",{"_index":434,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/UpdateAdminDto.html":{}}}],["user.name@example.com'})@isemail",{"_index":426,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["user.phonenumber",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{}}}],["user@example.com",{"_index":687,"title":{},"body":{"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{}}}],["user@example.com'})@isemail",{"_index":717,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["user_sms_code.entity",{"_index":791,"title":{},"body":{"entities/User.html":{}}}],["usercreateresp",{"_index":106,"title":{"classes/UserCreateResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateUserDto.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["usercreateresp(await",{"_index":204,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["usercreateresp})@apibody({type",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["userexist",{"_index":562,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["userexistbyphonenumber(phone",{"_index":592,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["userfailedauth",{"_index":569,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":574,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/UserSmsCode.html":{}}}],["username",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usernotfound",{"_index":564,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["userreposiotry",{"_index":576,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["users",{"_index":217,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["users'})@apiresponse({status",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersmscode",{"_index":404,"title":{"entities/UserSmsCode.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"coverage.html":{}}}],["usersmscode.smscode",{"_index":668,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["usersmscode.user",{"_index":667,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["usersmscodes",{"_index":805,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["userwithsms",{"_index":664,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["userwithsms.smscode",{"_index":672,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["valid",{"_index":428,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"miscellaneous/enumerations.html":{}}}],["validate",{"_index":700,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":703,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":774,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["validateif(o",{"_index":777,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["validator",{"_index":421,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"dependencies.html":{}}}],["value",{"_index":864,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":895,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":531,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["version",{"_index":888,"title":{},"body":{"properties.html":{}}}],["void",{"_index":67,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["world",{"_index":316,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Admin.html":{"url":"entities/Admin.html","title":"entity - Admin","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/admin.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                baseUser\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        baseUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {primary: true, eager: true, onDelete: 'CASCADE', onUpdate: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/admin.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/admin.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/admin.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToOne, Unique } from \"typeorm\";\nimport { BaseUser } from \"./baseuser.entity\";\n\n@Entity({name: \"Admin\"})\nexport class Admin {\n    @OneToOne(() => BaseUser, {primary: true, eager: true, onDelete: \"CASCADE\", onUpdate: \"CASCADE\", })\n    @JoinColumn()\n    baseUser: BaseUser;\n\n    get id(): number {\n        return this.baseUser.id\n    }\n\n    @Column({unique: true})\n    email: string;\n\n    @Column()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllAuthServiceExceptionsFilter.html":{"url":"classes/AllAuthServiceExceptionsFilter.html","title":"class - AllAuthServiceExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllAuthServiceExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                switchError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.controller.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        switchError\n                        \n                    \n                \n            \n            \n                \n                    \n                    switchError(e: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpException\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, BadRequestException, Body, CallHandler, Catch, Controller, Delete, ExceptionFilter, ExecutionContext, Get, HttpCode, NestInterceptor, NotFoundException, Param, Post, Put, UseFilters, UseInterceptors,  UnauthorizedException, UseGuards, HttpException, HttpStatus} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport e = require('express');\nimport { catchError, Observable } from 'rxjs';\nimport { AuthService, AuthServiceExceptions } from './auth.service';\nimport { CreateUserDto, UserCreateResp } from './dto';\nimport { CheckTokenDto } from './dto/check-token.dto';\nimport { CreateAdminDto, CreateAdminResp } from './dto/create-admin.dto';\nimport { CreateTokenResp } from './dto/create-token.dto';\nimport { GetAdminResp } from './dto/get-admin.dto';\nimport { GetUsersResp } from './dto/get-user.dto';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entity';\nimport { Role } from './roles';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\nclass AuthControllerEdrrorInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable | Promise> {\n        return next.handle()\n            .pipe(\n                catchError(\n                    (err: any) => {\n                        console.log(\"Interceptor\")\n                        switch(err) {\n                            case AuthServiceExceptions.UserExist:\n                                throw new BadRequestException(\"User Exist\")\n\n                            case AuthServiceExceptions.UserNotFound:\n                                throw new NotFoundException(\"User not found\")\n\n                            case AuthServiceExceptions.AdminExist:\n                                throw new BadRequestException(\"Admin Exist\")\n\n                            case AuthServiceExceptions.AdminFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.UserFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.InvalidToken:\n                                throw new UnauthorizedException(\"Invalid token\")\n\n                            case AuthServiceExceptions.TokenExpired:\n                                throw new UnauthorizedException(\"Token expired\")\n                            \n                            case AuthServiceExceptions.TokenNotFound:\n                                throw new UnauthorizedException(\"Token not found\")\n\n                            default:\n                                throw err\n                        }\n                    }\n                )\n            )\n    }\n}\n\n@Catch()\nexport class AllAuthServiceExceptionsFilter implements ExceptionFilter {\n    constructor(\n        private readonly httpAdapterHost: HttpAdapterHost,\n    ) {}\n\n    catch(exception: any, host: ArgumentsHost) {\n        const {httpAdapter} = this.httpAdapterHost\n        const ctx = host.switchToHttp()\n\n        let resp: string | object\n        let statusCode: number\n\n        if(exception instanceof HttpException) {\n            resp = exception.getResponse()\n            statusCode = exception.getStatus()\n        } else {\n            const newExpection = this.switchError(exception)\n            resp = newExpection.getResponse()\n            statusCode = newExpection.getStatus()\n        }\n\n        httpAdapter.reply(ctx.getResponse(), resp, statusCode)\n    }\n\n    private switchError(e: any): HttpException {\n        switch(e) {\n            case AuthServiceExceptions.UserExist:\n                return new BadRequestException(\"User Exist\")\n\n            case AuthServiceExceptions.UserNotFound:\n                return new NotFoundException(\"User not found\")\n\n            case AuthServiceExceptions.AdminExist:\n                return new BadRequestException(\"Admin Exist\")\n\n            case AuthServiceExceptions.AdminFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.UserFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.InvalidToken:\n                return new UnauthorizedException(\"Invalid token\")\n\n            case AuthServiceExceptions.TokenExpired:\n                return new UnauthorizedException(\"Token expired\")\n            \n            case AuthServiceExceptions.TokenNotFound:\n                return new UnauthorizedException(\"Token not found\")\n        }\n    }\n}\n\n@UseInterceptors(AuthControllerEdrrorInterceptor)\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n\n    @Post('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Create user\"})\n    @ApiResponse({status: 400, description: \"User exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"User created\", type: UserCreateResp})\n    @ApiBody({type: CreateUserDto})\n    @ApiBearerAuth()\n    async createUser(@Body() createUserDto: CreateUserDto): Promise {\n        return new UserCreateResp(await this.authService.createUser(createUserDto))\n    }\n\n    @Delete('/user/:id')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Delete user\"})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 200, description: \"User deleted\"})\n    @ApiParam({type: Number, description: \"id of user\", name: \"id\"})\n    @ApiBearerAuth()\n    async deleteUser(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteUser(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"User not found\")\n        }\n    }\n\n    @Get('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"get users\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetUsersResp]})\n    @ApiBearerAuth()\n    async getUser(): Promise {\n        return (await this.authService.getUsers()).map(\n            (user) => {\n                return new GetUsersResp(user)\n            }\n        )\n    }\n\n    @Put(\"/user/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update user\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of user\"})\n    @ApiBody({type: UpdateUserDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"user updatet\", type: GetUsersResp})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 400, description: \"User with this phone number exist\"})\n    @ApiBearerAuth()\n    async updateUser(@Param(\"id\") id: number, @Body() req: UpdateUserDto): Promise {\n        return new GetUsersResp(await this.authService.updateUser(id, req))\n    }\n\n    @Post(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"create admin\"})\n    @ApiResponse({status: 400, description: \"admin exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"Admin created\", type: CreateAdminResp})\n    @ApiBody({type: CreateAdminDto})\n    @ApiBearerAuth()\n    async createAdmin(@Body() req: CreateAdminDto): Promise {\n        return new CreateAdminResp(await this.authService.createAdmin(req))\n    }\n\n    @Put(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update admin\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of admin\"})\n    @ApiBody({type: UpdateAdminDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"admin updated\", type: GetAdminResp})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 400, description: \"Admin with this email bad request\"})\n    @ApiBearerAuth()\n    async updateAdmin(@Param(\"id\") id: number, @Body() req: UpdateAdminDto) {\n        return new GetAdminResp(await this.authService.updateAdmin(id, req))\n    }\n\n    @Delete(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"delete admin\"})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 200, description: \"Admin deleted\"})\n    @ApiParam({type: Number, description: \"id of admin\", name: 'id'})\n    @ApiBearerAuth()\n    async deleteAdmin(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteAdmin(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"Admin not found\")\n        }\n    }\n\n    @Get(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Get admins\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetAdminResp]})\n    @ApiBearerAuth()\n    async getAdmins(): Promise {\n        return (await this.authService.getAdmins()).map(\n            (admin) => {\n                return new GetAdminResp(admin)\n            }\n        )\n    }\n\n    @Post(\"/testSms/:phone\")\n    @ApiParam({name: \"phone\", type: String})\n    async createSms(@Param(\"phone\") phone) {\n        return await this.authService.createSmsCode(phone)\n    }\n\n    @Post(\"/admin/login\")\n    @ApiResponse({type: CreateTokenResp, status: 201})\n    @ApiResponse({status: 400, description: \"failed auth\"})\n    @ApiBody({type: LoginAdminDto, description: \"body\"})\n    async loginAdmin(@Body() req: LoginAdminDto): Promise {\n        const tokens = await this.authService.loginAdmin(req.email, req.password)\n\n        return tokens\n    }\n    \n    @Post(\"/user/login\")\n    @ApiBody({type: LoginUserDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 400, description: \"failed to auth\"})\n    async loginUser(@Body() req: LoginUserDto): Promise {\n        const tokens = await this.authService.loginUser(req.phoneNumber, req.code)\n\n        return tokens\n    }\n\n    @Post(\"/checkToken\")\n    @ApiBody({type: CheckTokenDto})\n    @ApiResponse({status: 200})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    @HttpCode(200)\n    async checkToken(@Body() req: CheckTokenDto) {\n        this.authService.decodeToken(req.token)\n    }\n\n    @Post(\"/refreshToken\")\n    @ApiBody({type: RefreshTokenDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    async refreshToken(@Body() req: RefreshTokenDto): Promise {\n        return this.authService.refreshToken(req.refreshToken)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n      ConfigModule.forRoot(\n          {\n              isGlobal: true,\n          }\n      ),\n      TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            useFactory: (configService: ConfigService) => ({\n                type: \"postgres\",\n                autoLoadEntities: true,\n                synchronize: true,\n                url: configService.get(\"IDENTY_DATABASE_URI\")\n            }),\n            inject: [ConfigService]\n      }),\n      AuthModule,\n      \n    ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkToken\n                            \n                            \n                                    Async\n                                createAdmin\n                            \n                            \n                                    Async\n                                createSms\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteAdmin\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAdmins\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                loginAdmin\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                updateAdmin\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: CheckTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkToken')@ApiBody({type: CheckTokenDto})@ApiResponse({status: 200})@ApiResponse({status: 401, description: 'Not Authorizated'})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:267\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CheckTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAdmin(req: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/admin')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'create admin'})@ApiResponse({status: 400, description: 'admin exist'})@ApiResponse({status: 403, description: 'You are not admin'})@ApiResponse({status: 201, description: 'Admin created', type: CreateAdminResp})@ApiBody({type: CreateAdminDto})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CreateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createSms\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSms(phone)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/testSms/:phone')@ApiParam({name: 'phone', type: String})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/user')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'Create user'})@ApiResponse({status: 400, description: 'User exist'})@ApiResponse({status: 403, description: 'You are not admin'})@ApiResponse({status: 201, description: 'User created', type: UserCreateResp})@ApiBody({type: CreateUserDto})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAdmin(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/admin/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'delete admin'})@ApiResponse({status: 404, description: 'Admin not found'})@ApiResponse({status: 200, description: 'Admin deleted'})@ApiParam({type: Number, description: 'id of admin', name: 'id'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/user/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'Delete user'})@ApiResponse({status: 404, description: 'User not found'})@ApiResponse({status: 200, description: 'User deleted'})@ApiParam({type: Number, description: 'id of user', name: 'id'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAdmins\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdmins()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/admin')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'Get admins'})@ApiResponse({status: 200, description: '', type: undefined})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'get users'})@ApiResponse({status: 200, description: '', type: undefined})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginAdmin(req: LoginAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/admin/login')@ApiResponse({type: CreateTokenResp, status: 201})@ApiResponse({status: 400, description: 'failed auth'})@ApiBody({type: LoginAdminDto, description: 'body'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:246\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                LoginAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(req: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/user/login')@ApiBody({type: LoginUserDto})@ApiResponse({status: 201, type: CreateTokenResp})@ApiResponse({status: 400, description: 'failed to auth'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(req: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refreshToken')@ApiBody({type: RefreshTokenDto})@ApiResponse({status: 201, type: CreateTokenResp})@ApiResponse({status: 401, description: 'Not Authorizated'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:275\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAdmin(id: number, req: UpdateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/admin/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'update admin'})@ApiParam({type: Number, name: 'id', description: 'id of admin'})@ApiBody({type: UpdateAdminDto, description: 'body'})@ApiResponse({status: 200, description: 'admin updated', type: GetAdminResp})@ApiResponse({status: 404, description: 'Admin not found'})@ApiResponse({status: 400, description: 'Admin with this email bad request'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                UpdateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, req: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/user/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'update user'})@ApiParam({type: Number, name: 'id', description: 'id of user'})@ApiBody({type: UpdateUserDto, description: 'body'})@ApiResponse({status: 200, description: 'user updatet', type: GetUsersResp})@ApiResponse({status: 404, description: 'User not found'})@ApiResponse({status: 400, description: 'User with this phone number exist'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ArgumentsHost, BadRequestException, Body, CallHandler, Catch, Controller, Delete, ExceptionFilter, ExecutionContext, Get, HttpCode, NestInterceptor, NotFoundException, Param, Post, Put, UseFilters, UseInterceptors,  UnauthorizedException, UseGuards, HttpException, HttpStatus} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport e = require('express');\nimport { catchError, Observable } from 'rxjs';\nimport { AuthService, AuthServiceExceptions } from './auth.service';\nimport { CreateUserDto, UserCreateResp } from './dto';\nimport { CheckTokenDto } from './dto/check-token.dto';\nimport { CreateAdminDto, CreateAdminResp } from './dto/create-admin.dto';\nimport { CreateTokenResp } from './dto/create-token.dto';\nimport { GetAdminResp } from './dto/get-admin.dto';\nimport { GetUsersResp } from './dto/get-user.dto';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entity';\nimport { Role } from './roles';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\nclass AuthControllerEdrrorInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable | Promise> {\n        return next.handle()\n            .pipe(\n                catchError(\n                    (err: any) => {\n                        console.log(\"Interceptor\")\n                        switch(err) {\n                            case AuthServiceExceptions.UserExist:\n                                throw new BadRequestException(\"User Exist\")\n\n                            case AuthServiceExceptions.UserNotFound:\n                                throw new NotFoundException(\"User not found\")\n\n                            case AuthServiceExceptions.AdminExist:\n                                throw new BadRequestException(\"Admin Exist\")\n\n                            case AuthServiceExceptions.AdminFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.UserFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.InvalidToken:\n                                throw new UnauthorizedException(\"Invalid token\")\n\n                            case AuthServiceExceptions.TokenExpired:\n                                throw new UnauthorizedException(\"Token expired\")\n                            \n                            case AuthServiceExceptions.TokenNotFound:\n                                throw new UnauthorizedException(\"Token not found\")\n\n                            default:\n                                throw err\n                        }\n                    }\n                )\n            )\n    }\n}\n\n@Catch()\nexport class AllAuthServiceExceptionsFilter implements ExceptionFilter {\n    constructor(\n        private readonly httpAdapterHost: HttpAdapterHost,\n    ) {}\n\n    catch(exception: any, host: ArgumentsHost) {\n        const {httpAdapter} = this.httpAdapterHost\n        const ctx = host.switchToHttp()\n\n        let resp: string | object\n        let statusCode: number\n\n        if(exception instanceof HttpException) {\n            resp = exception.getResponse()\n            statusCode = exception.getStatus()\n        } else {\n            const newExpection = this.switchError(exception)\n            resp = newExpection.getResponse()\n            statusCode = newExpection.getStatus()\n        }\n\n        httpAdapter.reply(ctx.getResponse(), resp, statusCode)\n    }\n\n    private switchError(e: any): HttpException {\n        switch(e) {\n            case AuthServiceExceptions.UserExist:\n                return new BadRequestException(\"User Exist\")\n\n            case AuthServiceExceptions.UserNotFound:\n                return new NotFoundException(\"User not found\")\n\n            case AuthServiceExceptions.AdminExist:\n                return new BadRequestException(\"Admin Exist\")\n\n            case AuthServiceExceptions.AdminFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.UserFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.InvalidToken:\n                return new UnauthorizedException(\"Invalid token\")\n\n            case AuthServiceExceptions.TokenExpired:\n                return new UnauthorizedException(\"Token expired\")\n            \n            case AuthServiceExceptions.TokenNotFound:\n                return new UnauthorizedException(\"Token not found\")\n        }\n    }\n}\n\n@UseInterceptors(AuthControllerEdrrorInterceptor)\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n\n    @Post('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Create user\"})\n    @ApiResponse({status: 400, description: \"User exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"User created\", type: UserCreateResp})\n    @ApiBody({type: CreateUserDto})\n    @ApiBearerAuth()\n    async createUser(@Body() createUserDto: CreateUserDto): Promise {\n        return new UserCreateResp(await this.authService.createUser(createUserDto))\n    }\n\n    @Delete('/user/:id')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Delete user\"})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 200, description: \"User deleted\"})\n    @ApiParam({type: Number, description: \"id of user\", name: \"id\"})\n    @ApiBearerAuth()\n    async deleteUser(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteUser(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"User not found\")\n        }\n    }\n\n    @Get('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"get users\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetUsersResp]})\n    @ApiBearerAuth()\n    async getUser(): Promise {\n        return (await this.authService.getUsers()).map(\n            (user) => {\n                return new GetUsersResp(user)\n            }\n        )\n    }\n\n    @Put(\"/user/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update user\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of user\"})\n    @ApiBody({type: UpdateUserDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"user updatet\", type: GetUsersResp})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 400, description: \"User with this phone number exist\"})\n    @ApiBearerAuth()\n    async updateUser(@Param(\"id\") id: number, @Body() req: UpdateUserDto): Promise {\n        return new GetUsersResp(await this.authService.updateUser(id, req))\n    }\n\n    @Post(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"create admin\"})\n    @ApiResponse({status: 400, description: \"admin exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"Admin created\", type: CreateAdminResp})\n    @ApiBody({type: CreateAdminDto})\n    @ApiBearerAuth()\n    async createAdmin(@Body() req: CreateAdminDto): Promise {\n        return new CreateAdminResp(await this.authService.createAdmin(req))\n    }\n\n    @Put(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update admin\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of admin\"})\n    @ApiBody({type: UpdateAdminDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"admin updated\", type: GetAdminResp})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 400, description: \"Admin with this email bad request\"})\n    @ApiBearerAuth()\n    async updateAdmin(@Param(\"id\") id: number, @Body() req: UpdateAdminDto) {\n        return new GetAdminResp(await this.authService.updateAdmin(id, req))\n    }\n\n    @Delete(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"delete admin\"})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 200, description: \"Admin deleted\"})\n    @ApiParam({type: Number, description: \"id of admin\", name: 'id'})\n    @ApiBearerAuth()\n    async deleteAdmin(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteAdmin(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"Admin not found\")\n        }\n    }\n\n    @Get(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Get admins\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetAdminResp]})\n    @ApiBearerAuth()\n    async getAdmins(): Promise {\n        return (await this.authService.getAdmins()).map(\n            (admin) => {\n                return new GetAdminResp(admin)\n            }\n        )\n    }\n\n    @Post(\"/testSms/:phone\")\n    @ApiParam({name: \"phone\", type: String})\n    async createSms(@Param(\"phone\") phone) {\n        return await this.authService.createSmsCode(phone)\n    }\n\n    @Post(\"/admin/login\")\n    @ApiResponse({type: CreateTokenResp, status: 201})\n    @ApiResponse({status: 400, description: \"failed auth\"})\n    @ApiBody({type: LoginAdminDto, description: \"body\"})\n    async loginAdmin(@Body() req: LoginAdminDto): Promise {\n        const tokens = await this.authService.loginAdmin(req.email, req.password)\n\n        return tokens\n    }\n    \n    @Post(\"/user/login\")\n    @ApiBody({type: LoginUserDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 400, description: \"failed to auth\"})\n    async loginUser(@Body() req: LoginUserDto): Promise {\n        const tokens = await this.authService.loginUser(req.phoneNumber, req.code)\n\n        return tokens\n    }\n\n    @Post(\"/checkToken\")\n    @ApiBody({type: CheckTokenDto})\n    @ApiResponse({status: 200})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    @HttpCode(200)\n    async checkToken(@Body() req: CheckTokenDto) {\n        this.authService.decodeToken(req.token)\n    }\n\n    @Post(\"/refreshToken\")\n    @ApiBody({type: RefreshTokenDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    async refreshToken(@Body() req: RefreshTokenDto): Promise {\n        return this.authService.refreshToken(req.refreshToken)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthControllerEdrrorInterceptor.html":{"url":"classes/AuthControllerEdrrorInterceptor.html","title":"class - AuthControllerEdrrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthControllerEdrrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, BadRequestException, Body, CallHandler, Catch, Controller, Delete, ExceptionFilter, ExecutionContext, Get, HttpCode, NestInterceptor, NotFoundException, Param, Post, Put, UseFilters, UseInterceptors,  UnauthorizedException, UseGuards, HttpException, HttpStatus} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport e = require('express');\nimport { catchError, Observable } from 'rxjs';\nimport { AuthService, AuthServiceExceptions } from './auth.service';\nimport { CreateUserDto, UserCreateResp } from './dto';\nimport { CheckTokenDto } from './dto/check-token.dto';\nimport { CreateAdminDto, CreateAdminResp } from './dto/create-admin.dto';\nimport { CreateTokenResp } from './dto/create-token.dto';\nimport { GetAdminResp } from './dto/get-admin.dto';\nimport { GetUsersResp } from './dto/get-user.dto';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entity';\nimport { Role } from './roles';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\nclass AuthControllerEdrrorInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable | Promise> {\n        return next.handle()\n            .pipe(\n                catchError(\n                    (err: any) => {\n                        console.log(\"Interceptor\")\n                        switch(err) {\n                            case AuthServiceExceptions.UserExist:\n                                throw new BadRequestException(\"User Exist\")\n\n                            case AuthServiceExceptions.UserNotFound:\n                                throw new NotFoundException(\"User not found\")\n\n                            case AuthServiceExceptions.AdminExist:\n                                throw new BadRequestException(\"Admin Exist\")\n\n                            case AuthServiceExceptions.AdminFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.UserFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.InvalidToken:\n                                throw new UnauthorizedException(\"Invalid token\")\n\n                            case AuthServiceExceptions.TokenExpired:\n                                throw new UnauthorizedException(\"Token expired\")\n                            \n                            case AuthServiceExceptions.TokenNotFound:\n                                throw new UnauthorizedException(\"Token not found\")\n\n                            default:\n                                throw err\n                        }\n                    }\n                )\n            )\n    }\n}\n\n@Catch()\nexport class AllAuthServiceExceptionsFilter implements ExceptionFilter {\n    constructor(\n        private readonly httpAdapterHost: HttpAdapterHost,\n    ) {}\n\n    catch(exception: any, host: ArgumentsHost) {\n        const {httpAdapter} = this.httpAdapterHost\n        const ctx = host.switchToHttp()\n\n        let resp: string | object\n        let statusCode: number\n\n        if(exception instanceof HttpException) {\n            resp = exception.getResponse()\n            statusCode = exception.getStatus()\n        } else {\n            const newExpection = this.switchError(exception)\n            resp = newExpection.getResponse()\n            statusCode = newExpection.getStatus()\n        }\n\n        httpAdapter.reply(ctx.getResponse(), resp, statusCode)\n    }\n\n    private switchError(e: any): HttpException {\n        switch(e) {\n            case AuthServiceExceptions.UserExist:\n                return new BadRequestException(\"User Exist\")\n\n            case AuthServiceExceptions.UserNotFound:\n                return new NotFoundException(\"User not found\")\n\n            case AuthServiceExceptions.AdminExist:\n                return new BadRequestException(\"Admin Exist\")\n\n            case AuthServiceExceptions.AdminFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.UserFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.InvalidToken:\n                return new UnauthorizedException(\"Invalid token\")\n\n            case AuthServiceExceptions.TokenExpired:\n                return new UnauthorizedException(\"Token expired\")\n            \n            case AuthServiceExceptions.TokenNotFound:\n                return new UnauthorizedException(\"Token not found\")\n        }\n    }\n}\n\n@UseInterceptors(AuthControllerEdrrorInterceptor)\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n\n    @Post('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Create user\"})\n    @ApiResponse({status: 400, description: \"User exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"User created\", type: UserCreateResp})\n    @ApiBody({type: CreateUserDto})\n    @ApiBearerAuth()\n    async createUser(@Body() createUserDto: CreateUserDto): Promise {\n        return new UserCreateResp(await this.authService.createUser(createUserDto))\n    }\n\n    @Delete('/user/:id')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Delete user\"})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 200, description: \"User deleted\"})\n    @ApiParam({type: Number, description: \"id of user\", name: \"id\"})\n    @ApiBearerAuth()\n    async deleteUser(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteUser(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"User not found\")\n        }\n    }\n\n    @Get('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"get users\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetUsersResp]})\n    @ApiBearerAuth()\n    async getUser(): Promise {\n        return (await this.authService.getUsers()).map(\n            (user) => {\n                return new GetUsersResp(user)\n            }\n        )\n    }\n\n    @Put(\"/user/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update user\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of user\"})\n    @ApiBody({type: UpdateUserDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"user updatet\", type: GetUsersResp})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 400, description: \"User with this phone number exist\"})\n    @ApiBearerAuth()\n    async updateUser(@Param(\"id\") id: number, @Body() req: UpdateUserDto): Promise {\n        return new GetUsersResp(await this.authService.updateUser(id, req))\n    }\n\n    @Post(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"create admin\"})\n    @ApiResponse({status: 400, description: \"admin exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"Admin created\", type: CreateAdminResp})\n    @ApiBody({type: CreateAdminDto})\n    @ApiBearerAuth()\n    async createAdmin(@Body() req: CreateAdminDto): Promise {\n        return new CreateAdminResp(await this.authService.createAdmin(req))\n    }\n\n    @Put(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update admin\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of admin\"})\n    @ApiBody({type: UpdateAdminDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"admin updated\", type: GetAdminResp})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 400, description: \"Admin with this email bad request\"})\n    @ApiBearerAuth()\n    async updateAdmin(@Param(\"id\") id: number, @Body() req: UpdateAdminDto) {\n        return new GetAdminResp(await this.authService.updateAdmin(id, req))\n    }\n\n    @Delete(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"delete admin\"})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 200, description: \"Admin deleted\"})\n    @ApiParam({type: Number, description: \"id of admin\", name: 'id'})\n    @ApiBearerAuth()\n    async deleteAdmin(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteAdmin(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"Admin not found\")\n        }\n    }\n\n    @Get(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Get admins\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetAdminResp]})\n    @ApiBearerAuth()\n    async getAdmins(): Promise {\n        return (await this.authService.getAdmins()).map(\n            (admin) => {\n                return new GetAdminResp(admin)\n            }\n        )\n    }\n\n    @Post(\"/testSms/:phone\")\n    @ApiParam({name: \"phone\", type: String})\n    async createSms(@Param(\"phone\") phone) {\n        return await this.authService.createSmsCode(phone)\n    }\n\n    @Post(\"/admin/login\")\n    @ApiResponse({type: CreateTokenResp, status: 201})\n    @ApiResponse({status: 400, description: \"failed auth\"})\n    @ApiBody({type: LoginAdminDto, description: \"body\"})\n    async loginAdmin(@Body() req: LoginAdminDto): Promise {\n        const tokens = await this.authService.loginAdmin(req.email, req.password)\n\n        return tokens\n    }\n    \n    @Post(\"/user/login\")\n    @ApiBody({type: LoginUserDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 400, description: \"failed to auth\"})\n    async loginUser(@Body() req: LoginUserDto): Promise {\n        const tokens = await this.authService.loginUser(req.phoneNumber, req.code)\n\n        return tokens\n    }\n\n    @Post(\"/checkToken\")\n    @ApiBody({type: CheckTokenDto})\n    @ApiResponse({status: 200})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    @HttpCode(200)\n    async checkToken(@Body() req: CheckTokenDto) {\n        this.authService.decodeToken(req.token)\n    }\n\n    @Post(\"/refreshToken\")\n    @ApiBody({type: RefreshTokenDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    async refreshToken(@Body() req: RefreshTokenDto): Promise {\n        return this.authService.refreshToken(req.refreshToken)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport {Admin, BaseUser, User} from './entity'\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UserSmsCode } from './entity/user_sms_code.entity';\nimport { RolesGuard } from './roles.guard';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([BaseUser, User, Admin, UserSmsCode]),\n        ConfigModule,\n    ],\n    providers: [AuthService, RolesGuard],\n    controllers: [AuthController]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BaseUser.html":{"url":"entities/BaseUser.html","title":"entity - BaseUser","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BaseUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/baseuser.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/baseuser.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {Entity, PrimaryGeneratedColumn} from 'typeorm';\n\n@Entity({name: \"BaseUser\"})\nexport class BaseUser {\n    @PrimaryGeneratedColumn()\n    id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckTokenDto.html":{"url":"classes/CheckTokenDto.html","title":"class - CheckTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/check-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA'})@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/check-token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsJWT } from \"class-validator\";\n\nexport class CheckTokenDto {\n    @ApiProperty(\n        {\n            example: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA\"\n        }\n    )\n    @IsJWT()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user.name@example.com'})@IsEmail({}, {message: 'email is not valid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty'})@IsString({message: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString } from \"class-validator\";\n\nexport class CreateAdminDto {\n    @ApiProperty({example: \"user.name@example.com\"})\n    @IsEmail({},{message: \"email is not valid\"})\n    email: string\n\n    @ApiProperty({example: \"qwerty\"})\n    @IsString({message: \"\"})\n    password: string\n}\n\nexport class CreateAdminResp {\n    constructor(admin: {id: number, email: string}) {\n        this.id = admin.id\n        this.email = admin.email\n    }   \n    @ApiProperty({example: 1})\n    id: number\n\n    @ApiProperty({example: \"user.name@example.com\"})\n    email: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminResp.html":{"url":"classes/CreateAdminResp.html","title":"class - CreateAdminResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(admin: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/create-admin.dto.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        admin\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user.name@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString } from \"class-validator\";\n\nexport class CreateAdminDto {\n    @ApiProperty({example: \"user.name@example.com\"})\n    @IsEmail({},{message: \"email is not valid\"})\n    email: string\n\n    @ApiProperty({example: \"qwerty\"})\n    @IsString({message: \"\"})\n    password: string\n}\n\nexport class CreateAdminResp {\n    constructor(admin: {id: number, email: string}) {\n        this.id = admin.id\n        this.email = admin.email\n    }   \n    @ApiProperty({example: 1})\n    id: number\n\n    @ApiProperty({example: \"user.name@example.com\"})\n    email: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTokenResp.html":{"url":"classes/CreateTokenResp.html","title":"class - CreateTokenResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTokenResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-token.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateTokenResp {\n    @ApiProperty({example: \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg\"})\n    token: string\n\n    @ApiProperty({example: \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg\"})\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString({message: 'should be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+7 (936) 134 14 24'})@IsPhoneNumber('RU')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsPhoneNumber, IsString, Length } from \"class-validator\"\n\nexport class CreateUserDto {\n    @ApiProperty({\n            example: \"+7 (936) 134 14 24\",\n    })\n    @IsPhoneNumber(\"RU\")\n    phoneNumber: string\n\n    @ApiProperty()\n    @IsString({message: \"should be a string\"})\n    name: string\n}\n\n\nexport class UserCreateResp {\n    constructor(user: {id: number, phoneNumber: string, name: string}) {\n        this.id = user.id\n        this.phoneNumber = user.phoneNumber\n        this.name = user.name\n    }\n\n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    @ApiProperty({\n        example: \"81375461323\",\n    })\n    phoneNumber: string;\n\n    @ApiProperty({\n        example: \"Some name\"\n    })\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatedToken.html":{"url":"interfaces/CreatedToken.html","title":"interface - CreatedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        TokenInfo\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\nexport enum ExpirationStatus {\n    Expired = \"expired\",\n    Active = \"active\"\n}\n\nexport enum DecodeType {\n    Valid = 1,\n    InvalidToken,\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\ninterface TokenInfo {\n    issued: number\n    expires: number\n}\n\nexport interface Payload extends TokenInfo {\n    payload: T\n}\n\nexport interface CreatedToken extends TokenInfo {\n    token: string\n}\n\nexport interface DecodedToken {\n    type: DecodeType\n    payload?: Payload\n    expirationStatus?: ExpirationStatus\n}\n\nexport class TokenFactory {\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatedTokens.html":{"url":"interfaces/CreatedTokens.html","title":"interface - CreatedTokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatedTokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { throws } from 'assert';\nimport { randomUUID } from 'crypto';\nimport { Repository, EntityNotFoundError, MongoRepository, QueryFailedError, FindManyOptions } from 'typeorm';\nimport { CreateUserDto } from './dto';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {User, BaseUser, Admin} from './entity'\nimport { UserSmsCode } from './entity/user_sms_code.entity';\nimport { Role } from './roles';\nimport { CreateExpiresFunc, DecodedToken, DecodeType, ExpirationStatus, TokenFactory } from './token';\n\nexport const AuthServiceExceptions = {\n    UserExist: Error(\"user exist with this phone number\"),\n    UserNotFound: Error(\"user not found\"),\n    AdminExist: Error(\"admin exist\"),\n    AdminNotFoud: Error(\"admin not found\"),\n    AdminFailedAuth: Error(\"admin failed auth\"),\n    UserFailedAuth: Error(\"User failed auth\"),\n    InvalidToken: Error(\"Invalid token\"),\n    TokenExpired: Error(\"Token expired\"),\n    TokenNotFound: Error(\"Token not found\")\n}\n\nexport interface CreatedTokens {\n    token: string\n    refreshToken: string\n}\n\nexport interface Payload {\n    role: Role, \n    userId: number\n}\n\n@Injectable()\nexport class AuthService {\n    private readonly tokenFactory: TokenFactory\n\n    constructor(\n        @InjectRepository(User)\n        private readonly userReposiotry: Repository,\n\n        @InjectRepository(BaseUser)\n        private readonly baseUserReposiotry: Repository,\n\n        @InjectRepository(Admin)\n        private readonly adminReposiotry: Repository,\n\n        private readonly configService: ConfigService,\n\n        @InjectRepository(UserSmsCode)\n        private readonly smsRepository: Repository\n    ) {\n        this.tokenFactory = new TokenFactory(\n            configService.get(\"IDENTY_SECRET\"),\n            configService.get(\"IDENTY_REFRESH_SECRET\"),\n            \"HS512\"\n        )\n    }\n\n    /**\n     * create a base user\n     *\n     * @private\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private createBaseUser(): Promise {\n        return this.baseUserReposiotry.save(new BaseUser(), {})\n    }\n\n    /**\n     * check if user exist by phone number\n     *\n     * @private\n     * @param {string} phone\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async userExistByPhoneNumber(phone: string): Promise {\n        return await this.userReposiotry.findOne({where: [{phoneNumber: phone}]}) === undefined ? false : true\n    }\n\n    /**\n     *  check if admin exist by email\n     *\n     * @private\n     * @param {string} email\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async adminExistByEmail(email: string): Promise  {\n        return await this.adminReposiotry.findOne({where: [{email: email}]}) === undefined ? false : true\n    }\n\n    /**\n     *\n     *\n     * @param {CreateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createUser(req: CreateUserDto): Promise {\n        if (await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        const user = new User()\n        user.name = req.name\n        user.phoneNumber = req.phoneNumber\n        user.baseUser = await this.createBaseUser()\n        return this.userReposiotry.save(user)\n    }\n\n    /**\n     *\n     *\n     * @private\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    private async deleteBaseUser(id: number) {\n        const result = await this.baseUserReposiotry.delete({id: id})\n        if (result.affected == 0) {\n            return false\n        }\n        return true\n    }\n\n    /**\n     *\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    async deleteUser(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    /**\n     *\n     *\n     * @param {CreateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createAdmin(req: CreateAdminDto): Promise {\n        if (await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        const admin = new Admin()\n        admin.email = req.email\n        admin.password = req.password\n        admin.baseUser = await this.createBaseUser()\n        return this.adminReposiotry.save(admin)\n\n    }\n\n    async getUsers(opts?: FindManyOptions): Promise {\n        return this.userReposiotry.find(opts)\n    }\n\n    async deleteAdmin(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    async getAdmins(opts?: FindManyOptions): Promise {\n        return this.adminReposiotry.find(opts)\n    }\n\n    async getUser(id: number): Promise {\n        return this.userReposiotry.findOne(id)\n    }\n\n    async getAdmin(id: number): Promise {\n        return this.adminReposiotry.findOne(id)\n    }\n\n    async updateUser(id:number, req: UpdateUserDto): Promise {\n        const getUser = await this.getUser(id)\n        if(getUser === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n        \n        if(req.phoneNumber && getUser.phoneNumber != req.phoneNumber && await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        return this.userReposiotry.save(\n            this.userReposiotry.merge(getUser, req),\n        )\n    }\n\n    async updateAdmin(id: number, req: UpdateAdminDto): Promise {\n        const getAdmin = await this.getAdmin(id)\n        if(getAdmin === undefined) {\n            throw AuthServiceExceptions.AdminNotFoud\n        }\n\n        if(req.email && getAdmin.email != req.email && await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        return this.adminReposiotry.save(\n            this.adminReposiotry.merge(\n                getAdmin, \n                req\n            )\n        )\n    }\n\n    private expiresFunc: CreateExpiresFunc = (issued: number) => {\n        const minuteInMs = 60000\n        const hourInMs = minuteInMs * 60\n        return issued + 24 * hourInMs\n    }\n\n    async loginAdmin(email: string, password: string): Promise {\n        const getAdmin = await this.adminReposiotry.findOne(\n            {\n                where: [\n                    {\n                        email: email\n                    }\n                ]\n            }\n        )\n        if (getAdmin === undefined || getAdmin.password != password) {\n            throw AuthServiceExceptions.AdminFailedAuth\n        }\n\n        return this.createTokens({userId: getAdmin.id, role: Role.Admin})\n    }\n\n    async loginUser(phoneNumber: string, code: string): Promise {\n        const getUserWithCode = await this.smsRepository.findOne(\n            {\n                relations: [\"user\"],\n                where: [\n                    {\n                        user: {\n                            phoneNumber: phoneNumber\n                        }\n                    }\n                ],\n            }\n        )\n        if(getUserWithCode === undefined || getUserWithCode.smsCode !== code) {\n            throw AuthServiceExceptions.UserFailedAuth\n        }\n\n        return this.createTokens({userId: getUserWithCode.id, role: Role.User})\n    }\n\n    private createTokens(payload: Payload): CreatedTokens {\n        const token = this.tokenFactory.createToken(payload)(this.expiresFunc)\n\n        const refreshToken = this.tokenFactory.createRefreshToken(payload)(this.expiresFunc)\n\n        return {\n            token: token.token,\n            refreshToken: refreshToken.token\n        }\n    }\n\n\n    async createSmsCode(phoneNumber: string): Promise {\n        const user = await this.userReposiotry.findOne({where: [{phoneNumber: phoneNumber}]})\n        if(user === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n\n\n        const randomNubmer = () => Math.floor(Math.random()*9 + 1);\n\n        const userWithSms = await this.smsRepository.findOne({where: {user: {baseUser: {id: user.id}}}})\n        if(userWithSms === undefined) {\n            const userSmsCode = new UserSmsCode()\n            userSmsCode.user = user\n            userSmsCode.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n\n            const created = await this.smsRepository.save(userSmsCode)\n\n            return created.smsCode\n        } else {\n            userWithSms.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n            const created = await this.smsRepository.save(userWithSms)\n\n            return created.smsCode\n        }\n    }\n\n    decodeToken(token: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeToken(token)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    decodeRefreshToken(refresh: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeRefreshToken(refresh)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    private checkToken(decoded: DecodedToken) {\n        switch(decoded.type) {\n            case DecodeType.InvalidToken, DecodeType.IntegtiryError:\n                throw AuthServiceExceptions.InvalidToken\n        }\n        switch(decoded.expirationStatus) {\n            case ExpirationStatus.Expired:\n                throw AuthServiceExceptions.TokenExpired\n        }\n    }\n\n    async refreshToken(token: string): Promise {\n        const decoded = this.decodeRefreshToken(token)\n\n        return this.createTokens(decoded.payload.payload)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DecodedToken.html":{"url":"interfaces/DecodedToken.html","title":"interface - DecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            expirationStatus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expirationStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationStatus:         ExpirationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExpirationStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     Payload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Payload\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         DecodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DecodeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\nexport enum ExpirationStatus {\n    Expired = \"expired\",\n    Active = \"active\"\n}\n\nexport enum DecodeType {\n    Valid = 1,\n    InvalidToken,\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\ninterface TokenInfo {\n    issued: number\n    expires: number\n}\n\nexport interface Payload extends TokenInfo {\n    payload: T\n}\n\nexport interface CreatedToken extends TokenInfo {\n    token: string\n}\n\nexport interface DecodedToken {\n    type: DecodeType\n    payload?: Payload\n    expirationStatus?: ExpirationStatus\n}\n\nexport class TokenFactory {\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAdminResp.html":{"url":"classes/GetAdminResp.html","title":"class - GetAdminResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAdminResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/get-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(admin: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/get-admin.dto.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        admin\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-admin.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-admin.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\n\nexport class GetAdminResp {\n    constructor(admin: {id: number, email: string}) {\n        this.id = admin.id\n        this.email = admin.email\n    }\n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    @ApiProperty({\n        example: \"user@example.com\",\n    })\n    email: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersResp.html":{"url":"classes/GetUsersResp.html","title":"class - GetUsersResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/get-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/get-user.dto.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Some name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '81375461323'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\n\n\nexport class GetUsersResp {\n    constructor(user: {id: number, phoneNumber: string, name: string}) {\n        this.id = user.id\n        this.phoneNumber = user.phoneNumber\n        this.name = user.name\n    }\n    \n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    @ApiProperty({\n        example: \"81375461323\",\n    })\n    phoneNumber: string\n\n    @ApiProperty({\n        example: \"Some name\"\n    })\n    name: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        private readonly configService: ConfigService\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: configService.get(\"IDENTY_SECRET\")\n        });\n    }\n\n    async validate(payload: any) {\n        return { ...payload.role };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAdminDto.html":{"url":"classes/LoginAdminDto.html","title":"class - LoginAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-admin.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-admin.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString } from \"class-validator\";\n\nexport class LoginAdminDto {\n    @ApiProperty({example: \"user@example.com\"})\n    @IsEmail()\n    email: string\n\n    @ApiProperty({example:\"qwerty\"})\n    @IsString()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '0000'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+7 (936) 134 14 24'})@IsPhoneNumber('RU')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPhoneNumber, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class LoginUserDto {\n    @ApiProperty({example: \"+7 (936) 134 14 24\"})\n    @IsPhoneNumber(\"RU\")\n    phoneNumber: string\n\n    @ApiProperty({example: \"0000\"})\n    @IsString()\n    code: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         Role\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { throws } from 'assert';\nimport { randomUUID } from 'crypto';\nimport { Repository, EntityNotFoundError, MongoRepository, QueryFailedError, FindManyOptions } from 'typeorm';\nimport { CreateUserDto } from './dto';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {User, BaseUser, Admin} from './entity'\nimport { UserSmsCode } from './entity/user_sms_code.entity';\nimport { Role } from './roles';\nimport { CreateExpiresFunc, DecodedToken, DecodeType, ExpirationStatus, TokenFactory } from './token';\n\nexport const AuthServiceExceptions = {\n    UserExist: Error(\"user exist with this phone number\"),\n    UserNotFound: Error(\"user not found\"),\n    AdminExist: Error(\"admin exist\"),\n    AdminNotFoud: Error(\"admin not found\"),\n    AdminFailedAuth: Error(\"admin failed auth\"),\n    UserFailedAuth: Error(\"User failed auth\"),\n    InvalidToken: Error(\"Invalid token\"),\n    TokenExpired: Error(\"Token expired\"),\n    TokenNotFound: Error(\"Token not found\")\n}\n\nexport interface CreatedTokens {\n    token: string\n    refreshToken: string\n}\n\nexport interface Payload {\n    role: Role, \n    userId: number\n}\n\n@Injectable()\nexport class AuthService {\n    private readonly tokenFactory: TokenFactory\n\n    constructor(\n        @InjectRepository(User)\n        private readonly userReposiotry: Repository,\n\n        @InjectRepository(BaseUser)\n        private readonly baseUserReposiotry: Repository,\n\n        @InjectRepository(Admin)\n        private readonly adminReposiotry: Repository,\n\n        private readonly configService: ConfigService,\n\n        @InjectRepository(UserSmsCode)\n        private readonly smsRepository: Repository\n    ) {\n        this.tokenFactory = new TokenFactory(\n            configService.get(\"IDENTY_SECRET\"),\n            configService.get(\"IDENTY_REFRESH_SECRET\"),\n            \"HS512\"\n        )\n    }\n\n    /**\n     * create a base user\n     *\n     * @private\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private createBaseUser(): Promise {\n        return this.baseUserReposiotry.save(new BaseUser(), {})\n    }\n\n    /**\n     * check if user exist by phone number\n     *\n     * @private\n     * @param {string} phone\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async userExistByPhoneNumber(phone: string): Promise {\n        return await this.userReposiotry.findOne({where: [{phoneNumber: phone}]}) === undefined ? false : true\n    }\n\n    /**\n     *  check if admin exist by email\n     *\n     * @private\n     * @param {string} email\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async adminExistByEmail(email: string): Promise  {\n        return await this.adminReposiotry.findOne({where: [{email: email}]}) === undefined ? false : true\n    }\n\n    /**\n     *\n     *\n     * @param {CreateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createUser(req: CreateUserDto): Promise {\n        if (await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        const user = new User()\n        user.name = req.name\n        user.phoneNumber = req.phoneNumber\n        user.baseUser = await this.createBaseUser()\n        return this.userReposiotry.save(user)\n    }\n\n    /**\n     *\n     *\n     * @private\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    private async deleteBaseUser(id: number) {\n        const result = await this.baseUserReposiotry.delete({id: id})\n        if (result.affected == 0) {\n            return false\n        }\n        return true\n    }\n\n    /**\n     *\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    async deleteUser(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    /**\n     *\n     *\n     * @param {CreateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createAdmin(req: CreateAdminDto): Promise {\n        if (await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        const admin = new Admin()\n        admin.email = req.email\n        admin.password = req.password\n        admin.baseUser = await this.createBaseUser()\n        return this.adminReposiotry.save(admin)\n\n    }\n\n    async getUsers(opts?: FindManyOptions): Promise {\n        return this.userReposiotry.find(opts)\n    }\n\n    async deleteAdmin(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    async getAdmins(opts?: FindManyOptions): Promise {\n        return this.adminReposiotry.find(opts)\n    }\n\n    async getUser(id: number): Promise {\n        return this.userReposiotry.findOne(id)\n    }\n\n    async getAdmin(id: number): Promise {\n        return this.adminReposiotry.findOne(id)\n    }\n\n    async updateUser(id:number, req: UpdateUserDto): Promise {\n        const getUser = await this.getUser(id)\n        if(getUser === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n        \n        if(req.phoneNumber && getUser.phoneNumber != req.phoneNumber && await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        return this.userReposiotry.save(\n            this.userReposiotry.merge(getUser, req),\n        )\n    }\n\n    async updateAdmin(id: number, req: UpdateAdminDto): Promise {\n        const getAdmin = await this.getAdmin(id)\n        if(getAdmin === undefined) {\n            throw AuthServiceExceptions.AdminNotFoud\n        }\n\n        if(req.email && getAdmin.email != req.email && await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        return this.adminReposiotry.save(\n            this.adminReposiotry.merge(\n                getAdmin, \n                req\n            )\n        )\n    }\n\n    private expiresFunc: CreateExpiresFunc = (issued: number) => {\n        const minuteInMs = 60000\n        const hourInMs = minuteInMs * 60\n        return issued + 24 * hourInMs\n    }\n\n    async loginAdmin(email: string, password: string): Promise {\n        const getAdmin = await this.adminReposiotry.findOne(\n            {\n                where: [\n                    {\n                        email: email\n                    }\n                ]\n            }\n        )\n        if (getAdmin === undefined || getAdmin.password != password) {\n            throw AuthServiceExceptions.AdminFailedAuth\n        }\n\n        return this.createTokens({userId: getAdmin.id, role: Role.Admin})\n    }\n\n    async loginUser(phoneNumber: string, code: string): Promise {\n        const getUserWithCode = await this.smsRepository.findOne(\n            {\n                relations: [\"user\"],\n                where: [\n                    {\n                        user: {\n                            phoneNumber: phoneNumber\n                        }\n                    }\n                ],\n            }\n        )\n        if(getUserWithCode === undefined || getUserWithCode.smsCode !== code) {\n            throw AuthServiceExceptions.UserFailedAuth\n        }\n\n        return this.createTokens({userId: getUserWithCode.id, role: Role.User})\n    }\n\n    private createTokens(payload: Payload): CreatedTokens {\n        const token = this.tokenFactory.createToken(payload)(this.expiresFunc)\n\n        const refreshToken = this.tokenFactory.createRefreshToken(payload)(this.expiresFunc)\n\n        return {\n            token: token.token,\n            refreshToken: refreshToken.token\n        }\n    }\n\n\n    async createSmsCode(phoneNumber: string): Promise {\n        const user = await this.userReposiotry.findOne({where: [{phoneNumber: phoneNumber}]})\n        if(user === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n\n\n        const randomNubmer = () => Math.floor(Math.random()*9 + 1);\n\n        const userWithSms = await this.smsRepository.findOne({where: {user: {baseUser: {id: user.id}}}})\n        if(userWithSms === undefined) {\n            const userSmsCode = new UserSmsCode()\n            userSmsCode.user = user\n            userSmsCode.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n\n            const created = await this.smsRepository.save(userSmsCode)\n\n            return created.smsCode\n        } else {\n            userWithSms.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n            const created = await this.smsRepository.save(userWithSms)\n\n            return created.smsCode\n        }\n    }\n\n    decodeToken(token: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeToken(token)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    decodeRefreshToken(refresh: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeRefreshToken(refresh)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    private checkToken(decoded: DecodedToken) {\n        switch(decoded.type) {\n            case DecodeType.InvalidToken, DecodeType.IntegtiryError:\n                throw AuthServiceExceptions.InvalidToken\n        }\n        switch(decoded.expirationStatus) {\n            case ExpirationStatus.Expired:\n                throw AuthServiceExceptions.TokenExpired\n        }\n    }\n\n    async refreshToken(token: string): Promise {\n        const decoded = this.decodeRefreshToken(token)\n\n        return this.createTokens(decoded.payload.payload)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload-1.html":{"url":"interfaces/Payload-1.html","title":"interface - Payload-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        TokenInfo\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\nexport enum ExpirationStatus {\n    Expired = \"expired\",\n    Active = \"active\"\n}\n\nexport enum DecodeType {\n    Valid = 1,\n    InvalidToken,\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\ninterface TokenInfo {\n    issued: number\n    expires: number\n}\n\nexport interface Payload extends TokenInfo {\n    payload: T\n}\n\nexport interface CreatedToken extends TokenInfo {\n    token: string\n}\n\nexport interface DecodedToken {\n    type: DecodeType\n    payload?: Payload\n    expirationStatus?: ExpirationStatus\n}\n\nexport class TokenFactory {\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA'})@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsJWT } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @ApiProperty(\n        {\n            example: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA\"\n        }\n    )\n    @IsJWT()\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Request } from \"express\";\nimport { Observable } from \"rxjs\";\nimport { AuthService, AuthServiceExceptions } from \"./auth.service\";\nimport { Role } from \"./roles\";\nimport { ROLES_KEY } from \"./roles.decorator\";\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor (private reflector: Reflector, private readonly authService: AuthService) {}\n\n    canActivate(context: ExecutionContext): boolean | Promise | Observable {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [\n                context.getHandler(),\n                context.getClass()\n            ]\n        )\n\n        const req = context.switchToHttp().getRequest()\n        const authHeader = req.headers.authorization\n        try {\n            if(authHeader === undefined) {\n                throw AuthServiceExceptions.TokenNotFound\n            }\n            const token = authHeader.split(\" \")[1]\n            const decoded = this.authService.decodeToken(token)\n\n            if(!requiredRoles) {\n                return true\n            }\n\n            return requiredRoles.some((role) => decoded.payload.payload.role.includes(role))\n        } catch(e) {\n            switch(e) {\n                case AuthServiceExceptions.InvalidToken, AuthServiceExceptions.TokenExpired, AuthServiceExceptions.TokenNotFound:\n                    throw e\n            }\n            return false\n        }\n    }\n\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenFactory.html":{"url":"classes/TokenFactory.html","title":"class - TokenFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkExpirationStatus\n                            \n                            \n                                createRefreshToken\n                            \n                            \n                                    Private\n                                createSomeToken\n                            \n                            \n                                createToken\n                            \n                            \n                                decodeRefreshToken\n                            \n                            \n                                    Private\n                                decodeSomeToken\n                            \n                            \n                                decodeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(secretKey: string, refreshSecretKey: string, algorithm: TAlgorithm)\n                    \n                \n                        \n                            \n                                Defined in src/auth/token.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        secretKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshSecretKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        algorithm\n                                                  \n                                                        \n                                                                    TAlgorithm\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkExpirationStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkExpirationStatus(expires: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expires\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpirationStatus\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \ncreateRefreshToken(payload: T)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateTokenFunc\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createSomeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSomeToken(payload: T, key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:54\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateTokenFunc\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(payload: T)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateTokenFunc\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeRefreshToken\n                        \n                    \n                \n            \n            \n                \ndecodeRefreshToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:116\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DecodedToken\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        decodeSomeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeSomeToken(token: string, key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:76\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DecodedToken\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:112\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DecodedToken\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\nexport enum ExpirationStatus {\n    Expired = \"expired\",\n    Active = \"active\"\n}\n\nexport enum DecodeType {\n    Valid = 1,\n    InvalidToken,\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\ninterface TokenInfo {\n    issued: number\n    expires: number\n}\n\nexport interface Payload extends TokenInfo {\n    payload: T\n}\n\nexport interface CreatedToken extends TokenInfo {\n    token: string\n}\n\nexport interface DecodedToken {\n    type: DecodeType\n    payload?: Payload\n    expirationStatus?: ExpirationStatus\n}\n\nexport class TokenFactory {\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenInfo.html":{"url":"interfaces/TokenInfo.html","title":"interface - TokenInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expires\n                                        \n                                \n                                \n                                        \n                                            issued\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expires:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issued\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issued:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\nexport enum ExpirationStatus {\n    Expired = \"expired\",\n    Active = \"active\"\n}\n\nexport enum DecodeType {\n    Valid = 1,\n    InvalidToken,\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\ninterface TokenInfo {\n    issued: number\n    expires: number\n}\n\nexport interface Payload extends TokenInfo {\n    payload: T\n}\n\nexport interface CreatedToken extends TokenInfo {\n    token: string\n}\n\nexport interface DecodedToken {\n    type: DecodeType\n    payload?: Payload\n    expirationStatus?: ExpirationStatus\n}\n\nexport class TokenFactory {\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAdminDto.html":{"url":"classes/UpdateAdminDto.html","title":"class - UpdateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user.name@example.com', required: false})@ValidateIf(o => o.email)@IsEmail({}, {message: 'email is not valid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-admin.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty', required: false})@ValidateIf(o => o.name)@IsString({message: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-admin.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsEmail, IsString, ValidateIf } from \"class-validator\"\n\nexport class UpdateAdminDto {\n    @ApiProperty({example: \"user.name@example.com\", required: false})\n    @ValidateIf( o => o.email)\n    @IsEmail({},{message: \"email is not valid\"})\n    email?: string\n\n    @ApiProperty({example: \"qwerty\", required: false})\n    @ValidateIf(o => o.name)\n    @IsString({message: \"\"})\n    password?: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@ValidateIf(o => o.name)@IsString({message: 'should be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: '+7 (936) 134 14 24'})@ValidateIf(o => o.phoneNumber)@IsPhoneNumber('RU', {})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsPhoneNumber, IsString, ValidateIf } from \"class-validator\";\n\nexport class UpdateUserDto {\n    @ApiProperty({required: false, example: \"+7 (936) 134 14 24\"})\n    @ValidateIf(o => o.phoneNumber)\n    @IsPhoneNumber(\"RU\", {})\n    phoneNumber?: string\n\n    @ApiProperty({required: false})\n    @ValidateIf(o => o.name)\n    @IsString({message: \"should be a string\"})\n    name?: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                baseUser\n                            \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        baseUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, type => type, {primary: true, onDelete: 'CASCADE', eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 18, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToOne } from \"typeorm\";\nimport { BaseUser } from \"./baseuser.entity\";\nimport { UserSmsCode } from \"./user_sms_code.entity\";\n\n@Entity({name: \"User\"})\nexport class User {\n    @OneToOne(() => BaseUser, type => type, {primary: true, onDelete: \"CASCADE\", eager: true})\n    @JoinColumn()\n    baseUser: BaseUser;\n\n    get id(): number {\n        return this.baseUser.id\n    }\n\n    @Column({length: 18, unique: true})\n    phoneNumber: string;\n\n    @Column()\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreateResp.html":{"url":"classes/UserCreateResp.html","title":"class - UserCreateResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreateResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/create-user.dto.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Some name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '81375461323'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsPhoneNumber, IsString, Length } from \"class-validator\"\n\nexport class CreateUserDto {\n    @ApiProperty({\n            example: \"+7 (936) 134 14 24\",\n    })\n    @IsPhoneNumber(\"RU\")\n    phoneNumber: string\n\n    @ApiProperty()\n    @IsString({message: \"should be a string\"})\n    name: string\n}\n\n\nexport class UserCreateResp {\n    constructor(user: {id: number, phoneNumber: string, name: string}) {\n        this.id = user.id\n        this.phoneNumber = user.phoneNumber\n        this.name = user.name\n    }\n\n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    @ApiProperty({\n        example: \"81375461323\",\n    })\n    phoneNumber: string;\n\n    @ApiProperty({\n        example: \"Some name\"\n    })\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserSmsCode.html":{"url":"entities/UserSmsCode.html","title":"entity - UserSmsCode","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserSmsCode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/user_sms_code.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                smsCode\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user_sms_code.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        smsCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'smsCode'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user_sms_code.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user, {eager: true})@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user_sms_code.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToMany, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { User } from \"./user.entity\";\n\n@Entity({name: \"UserSMSCodes\"})\nexport class UserSmsCode {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @OneToOne(() => User, user => user, {eager: true,})\n    @JoinColumn({name: \"userId\"})\n    user: User\n\n    @Column({name:\"smsCode\"})\n    smsCode: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                pkg/tesing/index.ts\n            \n            variable\n            Testing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            AllAuthServiceExceptionsFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            AuthControllerEdrrorInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                11 %\n                (3/26)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            CreatedTokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            Payload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            AuthServiceExceptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/check-token.dto.ts\n            \n            class\n            CheckTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminResp\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/create-token.dto.ts\n            \n            class\n            CreateTokenResp\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            UserCreateResp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/get-admin.dto.ts\n            \n            class\n            GetAdminResp\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/get-user.dto.ts\n            \n            class\n            GetUsersResp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login-admin.dto.ts\n            \n            class\n            LoginAdminDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/update-admin.dto.ts\n            \n            class\n            UpdateAdminDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entity/admin.entity.ts\n            \n            entity\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entity/baseuser.entity.ts\n            \n            entity\n            BaseUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entity/user_sms_code.entity.ts\n            \n            entity\n            UserSmsCode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            class\n            TokenFactory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            CreatedToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            DecodedToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            Payload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            TokenInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            jwt-simple : ^0.5.6\n        \n            mysql : ^2.14.1\n        \n            passport : ^0.5.2\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typedoc : ^0.22.15\n        \n            typeorm : 0.2.43\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DecodeType   (src/.../token.ts)\n                        \n                        \n                            ExpirationStatus   (src/.../token.ts)\n                        \n                        \n                            Role   (src/.../roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/token.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeType\n                    \n                \n                        \n                            \n                                 Valid\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 InvalidToken\n                            \n                        \n                        \n                            \n                                 IntegtiryError\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ExpirationStatus\n                    \n                \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n            \n        \n\n    src/auth/roles.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSettings\nThis project require env file in the root with next params\nIDENTY_DATABASE_URI=\"postgresql://root:root@localhost:5432/identy\"\nIDENTY_SECRET=\"super_secret\"\nIDENTY_REFRESH_SECRET=\"refresh_super_secret\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CreateExpiresFunc   (src/.../token.ts)\n                        \n                        \n                            CreateTokenFunc   (src/.../token.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/token.ts\n    \n    \n        \n            \n                \n                    \n                    CreateExpiresFunc\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateTokenFunc\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthServiceExceptions   (src/.../auth.service.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            Testing   (pkg/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthServiceExceptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    UserExist: Error(\"user exist with this phone number\"),\n    UserNotFound: Error(\"user not found\"),\n    AdminExist: Error(\"admin exist\"),\n    AdminNotFoud: Error(\"admin not found\"),\n    AdminFailedAuth: Error(\"admin failed auth\"),\n    UserFailedAuth: Error(\"User failed auth\"),\n    InvalidToken: Error(\"Invalid token\"),\n    TokenExpired: Error(\"Token expired\"),\n    TokenNotFound: Error(\"Token not found\")\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    pkg/tesing/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Testing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    testDatabase(): DynamicModule {\n        return TypeOrmModule.forRoot({\n            type: \"postgres\",\n            host: \"localhost\",\n            port: 5432,\n            username: \"root\",\n            password: \"root\",\n            database: \"identy\",\n            autoLoadEntities: true,\n            synchronize: true\n          })\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
