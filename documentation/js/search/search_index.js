var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Admin.html",[0,1.058,1,1.127]],["body/entities/Admin.html",[0,1.791,1,2.249,2,2.572,3,0.35,4,0.35,5,0.275,6,3.558,7,0.35,8,4,9,0.275,10,0.833,11,3.257,12,2.519,13,3.335,14,0.437,15,0.025,16,1.481,17,3.137,18,4.537,19,2.753,20,4,21,4.537,22,4.995,23,5.351,24,4.197,25,1.061,26,4.197,27,4,28,3.279,29,1.105,30,0.873,31,5.351,32,4.197,33,4.995,34,4.404,35,4.197,36,0.446,37,4,38,4,39,2.184,40,3.558,41,0.446,42,0.221,43,2.823,44,0.697,45,1.627,46,3.558,47,1.359,48,1.033,49,1.359,50,3.558,51,0.019,52,0.019]],["title/classes/AllAuthServiceExceptionsFilter.html",[42,0.144,53,2.132]],["body/classes/AllAuthServiceExceptionsFilter.html",[0,0.489,1,2.011,3,0.134,4,0.134,5,0.105,7,0.552,9,0.105,12,0.632,14,0.386,15,0.025,19,0.675,25,0.605,29,1.302,30,0.447,36,0.526,41,0.324,42,0.201,44,0.697,45,1.941,47,0.855,48,1.176,49,2.194,51,0.009,52,0.009,53,3.122,54,0.43,55,1.081,56,4.159,57,1.973,58,2.826,59,2.189,60,2.889,61,2.907,62,1.486,63,3.646,64,1.581,65,2.639,66,0.753,67,1.607,68,3.808,69,1.607,70,0.844,71,0.844,72,1.411,73,1.684,74,0.959,75,1.973,76,2.907,77,3.211,78,1.607,79,3.211,80,1.511,81,1.748,82,1.486,83,1.607,84,1.973,85,1.607,86,1.973,87,1.623,88,1.037,89,1.511,90,3.451,91,1.201,92,1.7,93,2.511,94,2.632,95,2.259,96,1.201,97,2.511,98,1.201,99,1.595,100,1.201,101,1.201,102,1.201,103,1.201,104,1.201,105,1.201,106,1.201,107,0.632,108,0.985,109,4.059,110,1.201,111,1.201,112,1.201,113,1.201,114,1.201,115,1.201,116,0.43,117,1.201,118,1.973,119,2.259,120,0.985,121,1.688,122,0.776,123,0.905,124,2.077,125,1.373,126,0.985,127,2.189,128,1.201,129,2.511,130,1.75,131,1.373,132,1.617,133,2.383,134,2.189,135,1.891,136,1.973,137,2.189,138,2.058,139,2.189,140,1.973,141,2.189,142,2.189,143,1.201,144,1.878,145,1.617,146,1.878,147,0.776,148,1.188,149,1.081,150,0.836,151,1.081,152,1.973,153,0.632,154,2.058,155,1.201,156,0.985,157,1.775,158,3.465,159,1.201,160,1.201,161,1.201,162,1.973,163,1.201,164,1.201,165,3.394,166,1.617,167,2.233,168,3.652,169,1.973,170,2.746,171,1.617,172,2.511,173,3.133,174,1.617,175,1.973,176,1.617,177,2.907,178,1.617,179,1.486,180,1.973,181,1.182,182,1.486,183,2.907,184,0.972,185,1.775,186,1.081,187,2.002,188,1.201,189,1.201,190,1.201,191,1.201,192,2.907,193,1.081,194,2.907,195,1.201,196,1.201,197,1.201,198,1.201,199,1.201,200,1.201,201,1.201,202,1.201,203,1.201,204,1.081,205,0.675,206,1.201,207,3.465,208,1.201,209,1.201,210,1.201,211,1.201,212,1.182,213,1.201,214,3.944,215,4.848,216,3.451,217,1.973,218,3.211,219,1.109,220,3.808,221,3.307,222,1.201,223,1.201,224,1.201,225,1.201,226,3.646,227,3.646,228,2.907,229,3.808,230,1.973,231,2.907,232,1.201,233,1.973,234,3.122,235,1.201,236,1.973,237,1.973,238,1.486,239,1.201,240,1.201,241,1.201,242,1.973,243,1.201,244,1.973,245,1.081,246,0.985,247,1.201,248,1.201,249,1.201,250,1.201,251,2.024,252,2.912,253,1.201,254,1.201,255,1.634,256,1.201,257,1.201,258,1.201,259,1.201,260,1.201,261,1.201,262,1.201,263,1.201,264,1.201,265,1.201,266,1.081,267,1.201,268,1.201,269,1.201,270,1.201,271,1.201,272,1.201,273,1.201,274,1.617,275,1.201,276,1.201,277,1.201,278,1.201,279,1.201,280,1.081,281,0.836,282,1.201,283,1.201,284,1.973,285,1.201,286,1.201,287,1.373,288,1.201,289,1.037,290,1.201,291,2.383,292,1.201,293,0.985,294,1.201,295,1.201,296,1.201,297,1.201,298,0.592,299,1.201,300,1.973,301,1.973,302,1.201,303,1.201,304,1.201,305,0.632,306,1.201,307,1.201,308,1.201]],["title/modules/AppModule.html",[309,2.34,310,2.34]],["body/modules/AppModule.html",[3,0.401,4,0.401,5,0.315,14,0.315,15,0.025,19,2.631,36,0.543,41,0.401,42,0.198,51,0.02,52,0.02,107,1.889,309,3.916,310,4.558,311,2.945,312,3.568,313,4.075,314,4.075,315,4.153,316,4.352,317,3.593,318,3.593,319,4.806,320,5.31,321,4.936,322,3.99,323,2.706,324,4.075,325,2.945,326,4.806,327,4.806,328,4.806,329,4.806,330,4.806,331,4.806,332,4.806,333,4.806,334,4.806,335,4.806,336,4.806,337,3.593,338,4.075]],["title/controllers/AuthController.html",[59,1.959,207,1.959]],["body/controllers/AuthController.html",[0,0.391,1,2.074,3,0.107,4,0.107,5,0.084,7,0.572,9,0.084,12,0.861,14,0.424,15,0.025,16,1.386,19,0.541,25,0.993,29,1.338,30,0.45,36,0.503,41,0.282,42,0.191,44,0.664,45,2.002,47,0.71,48,1.246,49,2.149,51,0.008,52,0.008,53,2.528,55,0.865,56,3.083,57,0.962,58,2.754,59,1.903,60,2.273,61,2.139,62,1.234,63,2.526,64,1.054,66,0.367,68,2.833,70,0.551,71,0.551,72,2.224,73,2.061,74,1.511,75,0.962,76,1.638,77,2.139,79,2.526,80,1.288,81,1.489,82,3.106,84,0.962,86,0.962,87,1.059,88,0.506,89,0.986,90,2.526,91,0.962,92,1.621,93,2.139,94,2.964,95,1.925,96,0.962,97,2.139,98,0.962,99,1.527,100,0.962,101,0.962,102,0.962,103,0.962,104,0.962,105,0.962,106,0.962,107,0.506,108,0.788,109,3.744,110,0.962,111,0.962,112,0.962,113,0.962,114,0.962,115,0.962,116,0.345,117,0.962,118,1.638,119,1.925,120,0.788,121,1.49,122,0.622,123,0.724,124,2.176,125,1.14,126,0.788,127,2.323,128,0.962,129,2.139,130,1.856,131,1.14,132,1.343,133,2.071,134,2.134,135,1.611,136,1.638,137,1.903,138,1.754,139,2.479,140,1.638,141,2.323,142,2.323,143,0.962,144,2.127,145,1.343,146,2.127,147,0.622,148,0.986,149,0.865,150,0.67,151,0.865,152,1.638,153,0.506,154,1.754,155,0.962,156,0.788,157,1.474,158,3.648,159,0.962,160,0.962,161,0.962,162,1.638,163,0.962,164,0.962,165,3.207,166,1.343,167,2.08,168,3.516,169,1.638,170,2.479,171,1.343,172,2.139,173,2.905,174,1.343,175,1.638,176,1.343,177,2.526,178,1.343,179,1.234,180,1.638,181,1.254,182,1.234,183,2.526,184,0.807,185,1.474,186,0.865,187,1.822,188,0.962,189,0.962,190,0.962,191,0.962,192,2.526,193,0.865,194,2.526,195,0.962,196,0.962,197,0.962,198,0.962,199,0.962,200,0.962,201,0.962,202,0.962,203,0.962,204,0.865,205,0.921,206,1.638,207,3.327,208,0.962,209,0.962,210,0.962,211,0.962,212,1.41,213,0.962,214,3.615,215,4.668,216,3.956,217,2.526,218,3.615,219,1.42,220,3.466,221,3.735,222,0.962,223,0.962,224,0.962,225,0.962,226,3.291,227,3.291,228,3.466,229,4.194,230,1.638,231,2.526,232,0.962,233,1.638,234,2.841,235,0.962,236,1.638,237,2.526,238,1.611,239,0.962,240,2.526,241,0.962,242,1.638,243,0.962,244,1.638,245,1.474,246,1.754,247,0.962,248,0.962,249,0.962,250,0.962,251,2.413,252,2.998,253,0.962,254,1.638,255,1.85,256,0.962,257,0.962,258,0.962,259,0.962,260,0.962,261,0.962,262,0.962,263,0.962,264,1.638,265,1.638,266,0.865,267,0.962,268,0.962,269,0.962,270,0.962,271,0.962,272,0.962,273,0.962,274,1.754,275,0.962,276,2.526,277,0.962,278,0.962,279,1.638,280,1.474,281,1.14,282,0.962,283,0.962,284,1.638,285,0.962,286,0.962,287,1.759,288,0.962,289,1.328,290,0.962,291,2.071,292,0.962,293,0.788,294,0.962,295,0.962,296,0.962,297,0.962,298,0.807,299,0.962,300,2.526,301,2.139,302,0.962,303,0.962,304,0.962,305,0.861,306,0.962,307,0.962,308,0.962,337,0.962,339,1.287,340,2.191,341,2.191,342,2.191,343,2.191,344,2.191,345,2.191,346,2.191,347,2.191,348,1.343,349,2.191,350,2.191,351,1.287,352,1.287,353,1.287,354,1.287,355,1.287,356,1.287,357,0.962,358,1.287,359,3.379,360,2.191,361,1.287,362,1.287,363,1.287,364,1.287,365,1.287,366,1.287,367,1.287,368,2.426,369,1.287,370,1.287,371,2.862,372,1.287,373,1.287,374,1.287,375,0.962,376,1.287,377,3.379,378,2.191,379,2.191,380,1.287,381,0.962,382,1.287,383,1.287,384,1.287,385,1.287,386,2.191,387,1.287,388,0.962,389,1.287,390,1.287,391,1.287,392,1.287,393,1.287,394,1.287,395,1.287,396,1.287,397,1.287,398,1.287,399,1.287,400,1.287,401,1.287,402,1.287,403,1.287,404,2.191,405,1.287,406,1.287,407,1.287,408,1.287,409,1.287,410,0.962,411,1.287,412,1.287,413,1.287,414,2.191,415,1.287,416,1.287,417,1.287,418,1.287,419,1.287,420,1.287,421,1.287,422,1.287,423,1.287,424,1.287]],["title/classes/AuthControllerEdrrorInterceptor.html",[42,0.144,154,2.132]],["body/classes/AuthControllerEdrrorInterceptor.html",[0,0.498,1,2.019,3,0.137,4,0.137,5,0.107,7,0.553,9,0.107,12,0.644,14,0.375,15,0.025,19,0.688,25,0.295,29,1.307,30,0.453,36,0.528,41,0.328,42,0.203,44,0.7,45,1.948,47,0.868,48,1.181,49,2.194,51,0.009,52,0.009,53,2.855,54,0.439,55,1.101,56,3.676,57,1.224,58,2.844,59,1.916,60,2.918,61,2.544,62,1.509,63,3.243,64,1.253,66,0.467,68,3.243,70,0.674,71,0.674,72,0.688,73,1.498,74,0.467,75,1.224,76,2.004,77,2.544,79,2.544,80,1.206,81,1.395,82,0.922,84,1.224,86,1.224,87,1.644,88,0.644,89,1.206,90,2.94,91,1.224,92,1.715,93,3.243,94,2.659,95,2.918,96,1.224,97,2.94,98,1.224,99,1.6,100,1.224,101,1.224,102,1.224,103,1.224,104,1.224,105,1.224,106,1.224,107,0.644,108,1.003,109,4.085,110,1.224,111,1.224,112,1.224,113,1.224,114,1.224,115,1.224,116,0.439,117,1.224,118,2.004,119,2.918,120,1.003,121,1.705,122,0.791,123,0.922,124,2.096,125,1.395,126,1.003,127,2.214,128,1.224,129,2.544,130,1.77,131,1.395,132,1.643,133,2.41,134,2.214,135,1.916,136,2.004,137,2.214,138,2.085,139,2.214,140,2.004,141,2.214,142,2.214,143,1.224,144,1.9,145,1.643,146,1.9,147,0.791,148,1.206,149,1.101,150,0.852,151,1.101,152,2.94,153,1.053,154,2.41,155,2.004,156,1.643,157,2.645,158,3.536,159,2.004,160,1.224,161,1.224,162,2.004,163,1.224,164,1.224,165,3.409,166,1.643,167,2.245,168,3.662,169,2.004,170,2.769,171,1.643,172,2.544,173,3.151,174,1.643,175,2.004,176,1.643,177,2.94,178,1.643,179,1.509,180,2.004,181,1.196,182,1.509,183,2.94,184,0.987,185,1.803,186,1.101,187,2.017,188,1.224,189,1.224,190,1.224,191,1.224,192,2.94,193,1.101,194,2.94,195,1.224,196,1.224,197,1.224,198,1.224,199,1.224,200,1.224,201,1.224,202,1.224,203,1.224,204,1.101,205,0.688,206,1.224,207,3.479,208,1.224,209,1.224,210,1.224,211,1.224,212,1.196,213,1.224,214,3.971,215,4.862,216,3.482,217,2.004,218,3.243,219,1.126,220,3.836,221,3.324,222,1.224,223,1.224,224,1.224,225,1.224,226,3.676,227,3.676,228,2.94,229,3.836,230,2.004,231,2.94,232,1.224,233,2.004,234,3.145,235,1.224,236,2.004,237,2.004,238,1.509,239,1.224,240,1.224,241,1.224,242,2.004,243,1.224,244,2.004,245,1.101,246,1.003,247,1.224,248,1.224,249,1.224,250,1.224,251,2.047,252,2.925,253,1.224,254,1.224,255,1.652,256,1.224,257,1.224,258,1.224,259,1.224,260,1.224,261,1.224,262,1.224,263,1.224,264,1.224,265,1.224,266,1.101,267,1.224,268,1.224,269,1.224,270,1.224,271,1.224,272,1.224,273,1.224,274,1.643,275,1.224,276,1.224,277,1.224,278,1.224,279,1.224,280,1.101,281,0.852,282,1.224,283,1.224,284,2.004,285,1.224,286,1.224,287,1.395,288,1.224,289,1.053,290,1.224,291,2.41,292,1.224,293,1.003,294,1.224,295,1.224,296,1.224,297,1.224,298,0.603,299,1.224,300,2.004,301,2.004,302,1.224,303,1.224,304,1.224,305,0.644,306,1.224,307,1.224,308,1.224,425,2.68,426,1.637]],["title/modules/AuthModule.html",[309,2.34,315,2.132]],["body/modules/AuthModule.html",[0,1.402,1,1.839,3,0.385,4,0.385,5,0.303,7,0.385,11,2.228,15,0.025,29,1.173,36,0.581,41,0.474,42,0.234,51,0.02,52,0.02,58,2.954,107,1.812,121,2.637,123,2.596,150,2.954,151,3.102,207,3.463,309,4.317,311,2.826,312,3.479,315,4.167,316,4.244,317,3.447,318,3.447,320,3.91,321,4.813,322,2.826,323,2.596,324,3.91,325,2.826,337,4.244,338,4.813,427,3.91,428,3.91,429,4.612,430,4.612,431,2.954,432,3.447,433,4.612,434,3.102,435,4.612,436,3.91,437,4.612]],["title/entities/BaseUser.html",[0,1.058,11,1.681]],["body/entities/BaseUser.html",[0,1.933,2,3.048,3,0.415,4,0.415,5,0.326,7,0.415,9,0.326,10,0.925,11,3.252,14,0.39,15,0.025,16,1.25,25,0.896,28,3.642,29,1.36,36,0.415,39,2.589,41,0.496,42,0.245,43,3.346,44,0.559,45,2.047,48,1.227,51,0.021,52,0.021,438,4.217,439,5.944,440,5.389,441,4.974]],["title/classes/CheckTokenDto.html",[42,0.144,127,1.959]],["body/classes/CheckTokenDto.html",[3,0.406,4,0.406,5,0.32,7,0.406,9,0.32,10,0.914,14,0.385,15,0.025,16,1.225,25,0.877,30,0.839,36,0.49,41,0.49,42,0.26,44,0.547,51,0.02,52,0.02,54,1.305,92,2.161,116,1.305,127,3.682,181,2.091,298,2.161,442,4.977,443,3.277,444,1.794,445,4.13,446,4.13,447,2.027,448,2.027,449,4.977,450,1.915,451,2.535,452,4.13]],["title/classes/CreateAdminDto.html",[42,0.144,130,1.566]],["body/classes/CreateAdminDto.html",[1,2.109,3,0.342,4,0.342,5,0.269,7,0.342,9,0.269,10,0.82,12,2.704,13,3.31,14,0.427,15,0.025,16,1.324,25,0.948,30,0.91,36,0.439,41,0.513,42,0.262,44,0.714,45,1.869,48,1.187,51,0.018,52,0.018,54,1.097,70,1.029,71,1.029,92,1.939,99,1.029,116,1.097,130,2.862,131,3.388,205,1.72,212,1.771,252,2.545,444,2.397,448,1.413,450,1.609,453,3.279,454,2.305,455,4.094,456,3.471,457,2.37,458,3.471,459,4.094,460,3.06,461,2.754,462,1.978,463,3.937,464,3.06,465,3.06,466,2.305,467,3.06,468,2.305,469,3.06,470,3.06,471,2.509,472,1.097]],["title/classes/CreateAdminResp.html",[42,0.144,131,1.811]],["body/classes/CreateAdminResp.html",[1,2.187,3,0.334,4,0.334,5,0.263,7,0.334,9,0.263,10,0.809,12,2.676,13,2.703,14,0.443,15,0.025,16,1.306,25,1.038,30,0.899,36,0.433,41,0.509,42,0.261,44,0.709,45,2.004,48,1.22,51,0.018,52,0.018,54,1.074,66,1.144,70,1.306,71,1.306,72,1.684,73,1.384,74,1.144,92,1.475,99,1.007,116,1.074,130,2.744,131,3.476,205,2.183,212,1.753,252,1.936,444,2.383,448,1.384,450,1.575,453,3.434,454,2.256,457,1.803,461,2.696,462,1.936,463,4.309,464,2.996,465,2.996,466,2.256,467,3.883,468,2.256,469,2.996,470,2.996,471,2.456,472,1.392,473,3.494,474,4.008,475,4.008,476,4.008]],["title/classes/CreateTokenResp.html",[42,0.144,134,1.959]],["body/classes/CreateTokenResp.html",[3,0.386,4,0.386,5,0.304,7,0.386,9,0.304,10,0.886,14,0.422,15,0.025,16,1.43,25,1.024,30,0.895,36,0.386,41,0.475,42,0.235,44,0.639,51,0.02,52,0.02,54,1.239,116,1.239,134,3.714,181,2.105,205,2.39,212,1.73,348,3.775,443,3.112,444,2.366,447,2.218,448,1.597,453,3.468,477,6.426,478,6.426,479,6.426,480,4.627,481,5.688,482,4.627,483,2.559]],["title/classes/CreateUserDto.html",[42,0.144,124,1.566]],["body/classes/CreateUserDto.html",[3,0.326,4,0.326,5,0.256,7,0.326,9,0.256,10,0.795,14,0.43,15,0.025,16,1.283,25,0.919,29,1.387,30,0.932,36,0.426,41,0.504,42,0.259,44,0.722,45,1.836,48,1.165,51,0.018,52,0.018,54,1.046,70,0.981,71,0.981,73,2.34,92,1.88,99,0.981,116,1.046,124,2.819,125,3.408,205,1.64,212,1.731,255,1.64,444,1.437,448,2.219,450,1.534,451,3.142,453,3.204,462,1.886,466,2.198,468,2.198,472,1.046,484,2.198,485,3.209,486,3.903,487,2.918,488,3.435,489,3.435,490,3.435,491,3.435,492,3.309,493,3.903,494,2.625,495,3.309,496,2.198,497,2.625,498,2.918,499,2.392,500,2.918,501,2.392,502,2.918,503,2.392,504,3.309,505,2.918]],["title/interfaces/CreatedToken.html",[506,1.127,507,1.811]],["body/interfaces/CreatedToken.html",[3,0.294,4,0.193,5,0.152,7,0.193,9,0.152,10,0.548,14,0.441,15,0.026,30,0.886,36,0.193,41,0.532,42,0.176,44,0.723,47,1.381,48,1.168,49,2.144,51,0.012,52,0.012,64,2.185,66,0.659,70,0.581,71,0.581,74,0.659,80,2.144,87,1.7,88,2.016,89,1.583,99,1.568,153,0.908,167,0.908,181,2.076,184,1.755,187,2.209,212,1.449,219,1.478,289,0.908,298,0.85,305,2.016,447,1.471,457,1.583,472,0.619,483,1.918,506,1.876,507,2.669,508,1.202,509,1.116,510,2.669,511,3.287,512,2.156,513,1.415,514,2.612,515,1.3,516,3.043,517,1.981,518,2.715,519,2.4,520,1.3,521,2.4,522,2.059,523,1.415,524,1.039,525,1.3,526,3.408,527,1.831,528,2.059,529,2.48,530,2.156,531,3.312,532,2.627,533,1.415,534,3.55,535,3.978,536,1.7,537,2.769,538,2.156,539,1.675,540,1.202,541,2.769,542,2.156,543,2.156,544,2.612,545,2.156,546,1.415,547,2.156,548,2.156,549,1.415,550,2.156,551,3.043,552,1.415,553,2.921,554,2.156,555,1.415,556,1.415,557,1.415,558,2.156,559,1.415,560,2.218,561,1.3,562,1.415,563,1.415,564,1.415,565,2.921,566,1.415,567,1.415,568,1.415,569,1.415,570,1.831,571,1.415,572,1.415,573,1.415,574,1.202,575,1.415,576,1.415,577,1.415,578,1.415,579,1.415,580,1.415,581,1.202,582,1.415,583,1.415,584,1.202,585,2.156,586,1.415,587,1.415,588,1.415,589,1.415,590,1.202]],["title/interfaces/CreatedTokens.html",[506,1.127,591,2.34]],["body/interfaces/CreatedTokens.html",[0,0.481,1,1.699,3,0.132,4,0.132,5,0.104,7,0.132,9,0.104,10,0.406,11,1.604,12,1.904,13,1.728,14,0.363,15,0.026,19,1.395,28,1.596,29,1.278,30,0.869,36,0.488,39,0.823,41,0.422,42,0.107,44,0.736,45,1.826,47,1.484,48,1.194,49,2.211,51,0.009,52,0.009,58,1.728,64,2.314,66,0.451,70,0.397,71,0.397,81,2.004,88,1.024,94,2.36,99,1.659,107,0.621,121,2.576,122,1.258,124,1.494,126,0.969,130,1.494,132,0.969,133,1.596,138,0.969,144,1.604,145,1.596,146,1.604,147,2.34,148,0.711,153,0.621,158,3.704,165,1.466,166,1.596,167,2.176,168,2.168,170,2.168,171,1.596,173,1.87,174,1.596,176,0.969,178,0.969,179,0.89,181,1.936,182,0.89,184,0.582,187,2.47,212,1.295,219,1.789,221,3.419,234,3.721,238,1.466,246,0.969,251,1.355,252,2.445,255,1.618,274,1.596,281,0.823,287,1.355,289,1.024,291,1.596,293,0.969,298,1.223,305,1.673,322,2.609,323,0.89,325,0.969,348,2.807,357,1.182,375,1.182,381,1.182,388,1.182,410,1.182,431,1.728,432,1.182,447,1.47,471,0.969,472,0.424,483,1.172,485,2.34,496,0.89,499,0.969,501,0.969,503,0.969,506,1.484,508,0.823,518,0.764,522,0.764,524,0.711,527,0.823,528,1.604,529,1.728,532,2.123,536,2.213,537,2.179,539,1.305,540,0.823,541,1.916,560,0.823,570,0.823,574,0.823,581,0.823,584,0.823,590,0.823,591,3.258,592,1.063,593,1.258,594,1.34,595,1.34,596,1.34,597,1.34,598,1.34,599,4.446,600,1.34,601,1.34,602,1.34,603,3.61,604,1.34,605,1.182,606,2.482,607,1.182,608,1.182,609,2.482,610,1.182,611,1.182,612,1.182,613,1.182,614,1.182,615,1.947,616,1.182,617,1.182,618,1.34,619,1.34,620,1.34,621,2.208,622,2.208,623,2.208,624,2.208,625,1.34,626,1.34,627,1.34,628,1.34,629,1.34,630,1.182,631,1.34,632,1.34,633,1.34,634,1.34,635,1.34,636,2.208,637,3.783,638,1.34,639,1.34,640,1.34,641,2.208,642,1.34,643,2.208,644,1.34,645,2.208,646,1.34,647,1.34,648,1.34,649,1.34,650,1.34,651,2.208,652,2.208,653,2.208,654,1.34,655,1.34,656,1.34,657,2.208,658,2.208,659,1.34,660,1.34,661,1.34,662,1.34,663,1.34,664,1.34,665,1.34,666,1.34,667,1.34,668,1.34,669,1.34,670,1.34,671,1.34,672,1.34,673,3.264,674,1.34,675,1.34,676,1.34,677,1.34,678,1.34,679,1.34,680,1.34,681,1.34,682,1.34,683,1.34,684,1.34,685,2.208,686,1.34,687,2.208,688,1.34,689,1.34,690,1.34,691,1.34,692,2.208,693,1.34,694,1.34,695,1.34,696,1.34,697,1.34,698,1.34,699,1.34,700,1.34,701,1.34,702,1.34,703,1.34,704,1.34,705,1.34,706,1.34,707,1.34,708,1.34,709,1.34,710,1.34,711,1.34,712,1.34,713,1.34,714,1.34,715,1.34,716,1.34,717,2.208,718,1.34,719,2.208,720,1.34,721,1.34,722,1.34,723,2.208,724,1.34,725,1.34,726,1.34,727,1.34,728,1.34,729,1.34,730,1.34,731,1.34]],["title/interfaces/DecodedToken.html",[506,1.127,537,1.566]],["body/interfaces/DecodedToken.html",[3,0.29,4,0.19,5,0.149,7,0.19,9,0.149,10,0.542,14,0.449,15,0.026,30,0.869,36,0.19,41,0.531,42,0.174,44,0.721,47,1.368,48,1.164,49,2.139,51,0.012,52,0.012,64,2.176,66,0.65,70,0.572,71,0.572,74,1.534,80,2.293,87,1.681,88,2.003,89,1.566,99,1.563,153,0.895,167,0.895,181,2.045,184,1.742,187,2.197,212,1.438,219,0.956,289,0.895,298,0.838,305,2.003,447,1.201,457,1.566,472,0.61,483,1.901,506,1.868,507,2.462,508,1.185,509,1.1,510,2.462,511,3.237,512,1.395,513,1.395,514,2.589,515,1.282,516,3.026,517,2.378,518,3.005,519,2.378,520,1.282,521,2.378,522,2.462,523,1.395,524,1.024,525,1.282,526,3.395,527,1.811,528,2.041,529,2.462,530,2.133,531,3.293,532,2.679,533,1.395,534,3.534,535,3.968,536,2.285,537,2.799,538,2.133,539,1.66,540,1.185,541,2.759,542,2.133,543,2.133,544,2.589,545,2.133,546,1.395,547,2.133,548,2.133,549,1.395,550,2.133,551,3.026,552,1.395,553,2.899,554,2.133,555,1.395,556,1.395,557,1.395,558,2.133,559,1.395,560,2.198,561,1.282,562,1.395,563,1.395,564,1.395,565,2.899,566,1.395,567,1.395,568,1.395,569,1.395,570,1.811,571,1.395,572,1.395,573,1.395,574,1.185,575,1.395,576,1.395,577,1.395,578,1.395,579,1.395,580,1.395,581,1.185,582,1.395,583,1.395,584,1.185,585,2.133,586,1.395,587,1.395,588,1.395,589,1.395,590,1.185]],["title/classes/GetAdminResp.html",[42,0.144,135,1.959]],["body/classes/GetAdminResp.html",[1,2.144,3,0.364,4,0.364,5,0.286,7,0.364,9,0.286,10,0.854,12,2.641,14,0.441,15,0.025,16,1.379,25,1.08,29,1.133,30,0.864,36,0.364,41,0.458,42,0.226,44,0.674,45,2.043,48,1.252,51,0.019,52,0.019,54,1.169,66,1.246,70,1.379,71,1.379,72,1.833,73,1.507,74,1.246,99,1.097,116,1.169,135,3.826,205,2.305,444,2.02,448,2.071,451,2.855,454,2.457,460,3.262,467,4.1,468,2.457,469,3.262,470,3.262,471,2.674,472,1.47,473,3.69,732,4.705,733,4.364,734,4.65,735,4.364]],["title/classes/GetUsersResp.html",[42,0.144,137,1.959]],["body/classes/GetUsersResp.html",[3,0.344,4,0.344,5,0.27,7,0.344,9,0.27,10,0.823,14,0.445,15,0.025,16,1.468,25,1.109,29,1.413,30,0.911,36,0.344,41,0.441,42,0.218,44,0.692,45,2.016,48,1.23,51,0.018,52,0.018,54,1.103,66,1.175,70,1.329,71,1.329,72,1.73,73,2.361,74,1.175,99,1.035,116,1.103,137,3.82,205,2.221,444,2.15,448,2.127,451,3.039,468,2.318,472,1.416,473,3.556,484,2.318,485,3.078,487,3.078,498,3.952,499,2.523,500,3.078,501,2.523,502,3.078,503,2.523,505,3.952,732,4.763,736,4.118,737,4.118,738,4.118,739,5.287]],["title/injectables/JwtGuard.html",[593,1.681,740,2.601]],["body/injectables/JwtGuard.html",[3,0.433,4,0.433,5,0.341,7,0.433,15,0.025,36,0.509,41,0.509,42,0.252,51,0.021,52,0.021,107,2.041,434,3.492,447,2.105,510,3.173,593,2.945,740,4.838,741,3.881,742,4.402,743,4.101,744,5.192,745,6.097]],["title/injectables/JwtStrategy.html",[593,1.681,746,2.601]],["body/injectables/JwtStrategy.html",[3,0.363,4,0.363,5,0.286,7,0.363,9,0.286,14,0.359,15,0.025,25,0.986,36,0.541,41,0.457,42,0.226,44,0.615,47,1.409,49,1.774,51,0.019,52,0.019,62,3.083,64,1.602,66,1.563,70,1.376,71,1.376,72,2.3,73,1.89,74,1.563,82,2.45,99,1.376,107,1.71,121,1.71,123,2.45,221,3.373,322,4.162,323,2.45,368,3.688,434,2.926,447,2.068,510,2.849,532,2.152,539,1.71,593,2.645,630,3.252,741,3.252,746,5.019,747,3.688,748,5.991,749,5.33,750,4.351,751,4.351,752,5.475,753,4.351,754,5.475,755,4.351,756,4.351,757,3.688,758,5.475,759,4.351,760,4.351,761,4.351,762,4.351,763,4.351,764,4.351]],["title/classes/LoginAdminDto.html",[42,0.144,139,1.959]],["body/classes/LoginAdminDto.html",[1,2.179,3,0.389,4,0.389,5,0.306,7,0.389,9,0.306,10,0.889,12,2.597,13,3.439,14,0.423,15,0.025,16,1.435,25,1.028,30,0.896,36,0.476,41,0.476,42,0.255,44,0.641,51,0.02,52,0.02,54,1.248,92,2.103,116,1.248,139,3.721,287,2.972,444,2.274,448,1.608,450,1.83,454,2.622,458,3.948,460,3.481,461,3.841,462,2.759,734,3.948,765,4.618,766,4.657,767,4.657,768,4.657]],["title/classes/LoginUserDto.html",[42,0.144,141,1.959]],["body/classes/LoginUserDto.html",[3,0.384,4,0.384,5,0.302,7,0.384,9,0.302,10,0.883,14,0.421,15,0.025,16,1.425,25,1.021,29,1.171,30,0.894,36,0.473,41,0.473,42,0.254,44,0.637,51,0.02,52,0.02,54,1.233,81,3.428,92,2.088,116,1.233,141,3.709,281,2.951,287,2.951,444,2.362,448,1.589,450,1.809,462,2.74,484,2.592,485,3.182,488,3.815,489,3.815,490,3.815,491,3.815,492,3.903,494,3.097,496,2.592,497,3.097,765,4.594,769,4.604,770,4.604,771,4.604,772,4.604]],["title/interfaces/Payload.html",[506,1.127,532,1.367]],["body/interfaces/Payload.html",[0,0.481,1,1.7,3,0.132,4,0.132,5,0.104,7,0.132,9,0.104,10,0.406,11,1.605,12,1.904,13,1.729,14,0.363,15,0.026,19,1.396,28,1.597,29,1.298,30,0.853,36,0.488,39,0.824,41,0.422,42,0.108,44,0.736,45,1.847,47,1.485,48,1.213,49,2.211,51,0.009,52,0.009,58,1.729,64,2.314,66,0.452,70,0.398,71,0.398,81,2.005,88,1.024,94,2.361,99,1.659,107,0.622,121,2.576,122,1.259,124,1.495,126,0.97,130,1.495,132,0.97,133,1.597,138,0.97,144,1.605,145,1.597,146,1.605,147,2.782,148,0.712,153,0.622,158,3.704,165,1.468,166,1.597,167,2.176,168,2.169,170,2.169,171,1.597,173,1.871,174,1.597,176,0.97,178,0.97,179,0.891,181,1.865,182,0.891,184,0.583,187,2.47,212,1.295,219,1.619,221,3.42,234,3.722,238,1.468,246,0.97,251,1.356,252,2.446,255,1.619,274,1.597,281,0.824,287,1.356,289,1.024,291,1.597,293,0.97,298,1.224,305,1.514,322,2.611,323,0.891,325,0.97,348,2.037,357,1.183,375,1.183,381,1.183,388,1.183,410,1.183,431,1.729,432,1.183,447,1.33,471,0.97,472,0.424,483,0.712,485,2.341,496,0.891,499,0.97,501,0.97,503,0.97,506,1.38,508,0.824,518,0.765,522,0.765,524,0.712,527,0.824,528,1.605,529,1.729,532,2.223,536,2.214,537,2.18,539,1.306,540,0.824,541,1.917,560,0.824,570,0.824,574,0.824,581,0.824,584,0.824,590,0.824,591,3.083,592,1.065,593,1.259,594,1.342,595,1.342,596,1.342,597,1.342,598,1.342,599,4.448,600,1.342,601,1.342,602,1.342,603,3.612,604,1.342,605,1.183,606,2.484,607,1.183,608,1.183,609,2.484,610,1.183,611,1.183,612,1.183,613,1.183,614,1.183,615,1.948,616,1.183,617,2.88,618,1.342,619,1.342,620,1.342,621,2.21,622,2.21,623,2.21,624,2.21,625,1.342,626,1.342,627,1.342,628,1.342,629,1.342,630,1.183,631,1.342,632,1.342,633,1.342,634,1.342,635,1.342,636,2.21,637,3.785,638,1.342,639,1.342,640,1.342,641,2.21,642,1.342,643,2.21,644,1.342,645,2.21,646,1.342,647,1.342,648,1.342,649,1.342,650,1.342,651,2.21,652,2.21,653,2.21,654,1.342,655,1.342,656,1.342,657,2.21,658,2.21,659,1.342,660,1.342,661,1.342,662,1.342,663,1.342,664,1.342,665,1.342,666,1.342,667,1.342,668,1.342,669,1.342,670,1.342,671,1.342,672,1.342,673,3.266,674,1.342,675,1.342,676,1.342,677,1.342,678,1.342,679,1.342,680,1.342,681,1.342,682,1.342,683,1.342,684,1.342,685,2.21,686,1.342,687,2.21,688,1.342,689,1.342,690,1.342,691,1.342,692,2.21,693,1.342,694,1.342,695,1.342,696,1.342,697,1.342,698,1.342,699,1.342,700,1.342,701,1.342,702,1.342,703,1.342,704,1.342,705,1.342,706,1.342,707,1.342,708,1.342,709,1.342,710,1.342,711,1.342,712,1.342,713,1.342,714,1.342,715,1.342,716,1.342,717,2.21,718,1.342,719,2.21,720,1.342,721,1.342,722,1.342,723,2.21,724,1.342,725,1.342,726,1.342,727,1.342,728,1.342,729,1.342,730,1.342,731,1.342]],["title/interfaces/Payload-1.html",[472,0.781,506,0.944,532,1.146]],["body/interfaces/Payload-1.html",[3,0.294,4,0.193,5,0.152,7,0.193,9,0.152,10,0.549,14,0.441,15,0.026,30,0.871,36,0.193,41,0.533,42,0.176,44,0.723,47,1.383,48,1.169,49,2.145,51,0.012,52,0.012,64,2.186,66,0.661,70,0.582,71,0.582,74,0.661,80,2.147,87,1.703,88,2.018,89,1.586,99,1.569,153,0.91,167,0.91,181,2.042,184,1.757,187,2.21,212,1.451,219,0.973,289,0.91,298,0.852,305,2.018,447,1.217,457,1.586,472,0.62,483,1.921,506,1.878,507,2.483,508,1.205,509,1.119,510,2.672,511,3.288,512,1.419,513,1.419,514,2.616,515,1.304,516,3.046,517,1.985,518,2.717,519,2.403,520,1.304,521,2.403,522,2.062,523,1.419,524,1.042,525,1.304,526,3.41,527,1.835,528,2.062,529,2.483,530,2.16,531,3.315,532,2.684,533,2.16,534,3.552,535,4.034,536,1.703,537,2.771,538,2.16,539,1.678,540,1.205,541,2.771,542,2.16,543,2.16,544,2.616,545,2.16,546,1.419,547,2.16,548,2.16,549,1.419,550,2.16,551,3.046,552,1.419,553,2.924,554,2.16,555,1.419,556,1.419,557,1.419,558,2.16,559,1.419,560,2.221,561,1.304,562,1.419,563,1.419,564,1.419,565,2.924,566,1.419,567,1.419,568,1.419,569,1.419,570,1.835,571,1.419,572,1.419,573,1.419,574,1.205,575,1.419,576,1.419,577,1.419,578,1.419,579,1.419,580,1.419,581,1.205,582,1.419,583,1.419,584,1.205,585,2.16,586,1.419,587,1.419,588,1.419,589,1.419,590,1.205]],["title/classes/RefreshTokenDto.html",[42,0.144,142,1.959]],["body/classes/RefreshTokenDto.html",[3,0.405,4,0.405,5,0.319,7,0.405,9,0.319,10,0.912,14,0.384,15,0.025,16,1.22,25,0.874,30,0.838,36,0.489,41,0.489,42,0.26,44,0.545,51,0.02,52,0.02,54,1.301,92,2.157,116,1.301,142,3.678,181,1.986,305,2.567,348,3.855,443,3.266,444,1.788,445,4.116,446,4.116,447,2.022,448,2.022,449,4.966,450,1.908,451,2.527,452,4.116,773,4.966]],["title/guards/RolesGuard.html",[150,1.811,743,2.34]],["body/guards/RolesGuard.html",[3,0.314,4,0.314,5,0.247,7,0.314,9,0.247,14,0.328,15,0.025,19,1.583,25,0.898,29,1.031,36,0.542,41,0.416,42,0.246,44,0.56,47,1.221,49,1.929,51,0.017,52,0.017,60,3.356,62,2.81,64,1.837,66,1.424,70,1.254,71,1.254,72,2.096,73,1.723,74,1.424,82,2.122,89,1.696,95,4.167,99,1.406,107,1.481,108,2.31,119,4.167,120,2.31,121,2.622,122,1.821,123,2.122,147,2.993,148,1.696,149,2.535,150,3.379,156,3.058,158,3.353,165,2.122,167,1.961,179,2.122,181,1.146,182,2.122,185,3.356,187,2.435,204,2.535,252,1.821,266,2.535,280,4.005,298,1.837,472,1.01,483,2.245,536,1.821,539,1.481,561,2.122,593,2.411,637,2.817,749,4.231,774,3.769,775,3.195,776,6.195,777,3.769,778,6.592,779,3.769,780,4.99,781,3.769,782,4.99,783,4.231,784,5.955,785,3.195,786,3.73,787,3.769,788,3.769,789,3.769,790,3.769,791,3.769,792,3.769,793,3.769,794,3.769,795,3.769,796,3.769,797,3.769,798,3.769,799,3.769,800,3.769]],["title/classes/TokenFactory.html",[42,0.144,541,1.566]],["body/classes/TokenFactory.html",[3,0.262,4,0.166,5,0.131,7,0.166,9,0.131,14,0.449,15,0.025,25,0.993,30,0.904,36,0.166,41,0.516,42,0.182,44,0.702,47,1.257,48,1.163,49,2.093,51,0.011,52,0.011,54,0.533,62,1.766,64,2.302,66,0.895,70,0.788,71,0.788,72,2.599,73,1.904,74,1.62,80,2.155,82,2.997,87,1.515,88,2.168,89,1.411,99,1.514,153,0.783,167,0.783,181,2.079,184,1.621,187,2.092,212,1.677,219,0.837,289,0.783,298,1.155,305,2.283,447,1.083,457,1.411,472,0.533,483,2.289,506,1.787,507,2.291,509,0.962,510,2.291,511,3.135,512,1.22,513,1.22,514,2.935,515,1.121,516,2.864,517,1.766,518,2.742,519,2.185,520,1.121,521,2.185,522,1.875,523,1.22,524,0.896,525,1.121,526,3.555,527,1.632,528,1.875,529,2.291,530,1.922,531,3.262,532,2.628,533,1.22,534,3.38,535,4.125,536,1.515,537,2.865,538,1.922,539,1.525,540,1.632,541,2.749,542,2.378,543,2.698,544,2.935,545,2.698,546,1.922,547,1.922,548,1.922,549,1.922,550,1.922,551,3.271,552,1.922,553,2.698,554,1.922,555,1.22,556,1.22,557,1.22,558,1.922,559,1.922,560,2.019,561,1.121,562,1.22,563,1.22,564,1.22,565,2.698,566,1.22,567,1.22,568,1.22,569,1.22,570,1.632,571,1.22,572,1.22,573,1.22,574,1.036,575,1.22,576,1.22,577,1.22,578,1.22,579,1.22,580,1.22,581,1.036,582,1.22,583,1.22,584,1.632,585,1.922,586,1.922,587,1.922,588,1.922,589,1.22,590,1.036,801,3.137,802,3.137,803,3.137,804,3.137,805,3.137,806,3.137,807,3.137,808,1.991,809,1.991,810,1.991,811,1.991,812,1.991,813,1.991,814,1.991,815,1.991,816,1.991]],["title/interfaces/TokenInfo.html",[506,1.127,511,1.811]],["body/interfaces/TokenInfo.html",[3,0.354,4,0.191,5,0.15,7,0.191,9,0.15,10,0.545,14,0.442,15,0.026,30,0.87,36,0.191,41,0.532,42,0.175,44,0.722,47,1.375,48,1.23,49,2.141,51,0.012,52,0.012,64,2.18,66,0.655,70,0.576,71,0.576,74,0.655,80,2.136,87,1.69,88,2.009,89,1.574,99,1.566,153,0.901,167,0.901,181,2.062,184,1.882,187,2.203,212,1.444,219,0.963,289,0.901,298,0.844,305,2.009,447,1.208,457,1.574,472,0.614,483,1.909,506,1.872,507,2.471,508,1.193,509,1.108,510,2.471,511,3.282,512,1.405,513,1.405,514,2.6,515,1.291,516,3.034,517,1.97,518,2.708,519,2.389,520,1.291,521,2.879,522,2.05,523,1.405,524,1.032,525,1.291,526,3.402,527,1.821,528,2.05,529,3.007,530,2.91,531,3.629,532,2.624,533,1.405,534,3.542,535,3.973,536,1.69,537,2.764,538,2.144,539,1.668,540,1.193,541,2.764,542,2.144,543,2.144,544,2.6,545,2.144,546,1.405,547,2.144,548,2.144,549,1.405,550,2.144,551,3.034,552,1.405,553,2.91,554,2.144,555,1.405,556,1.405,557,1.405,558,2.144,559,1.405,560,2.208,561,1.291,562,1.405,563,1.405,564,1.405,565,2.91,566,1.405,567,1.405,568,1.405,569,1.405,570,1.821,571,1.405,572,1.405,573,1.405,574,1.193,575,1.405,576,1.405,577,1.405,578,1.405,579,1.405,580,1.405,581,1.193,582,1.405,583,1.405,584,1.193,585,2.144,586,1.405,587,1.405,588,1.405,589,1.405,590,1.193]],["title/classes/UpdateAdminDto.html",[42,0.144,144,1.681]],["body/classes/UpdateAdminDto.html",[3,0.369,4,0.369,5,0.29,7,0.369,9,0.29,10,0.862,12,2.649,13,3.389,14,0.415,15,0.025,16,1.391,25,0.996,29,1.372,30,0.885,36,0.462,41,0.462,42,0.249,44,0.621,51,0.019,52,0.019,54,1.185,74,1.806,92,2.037,116,1.185,144,3.146,245,4.255,251,2.88,444,2.329,448,1.528,450,1.739,454,2.491,456,3.751,457,2.49,461,2.976,462,2.138,463,4.136,464,3.308,465,4.136,466,2.491,539,2.175,817,4.513,818,4.691,819,4.425,820,4.425,821,3.751,822,4.425,823,4.691,824,4.425,825,4.425,826,3.751,827,3.751]],["title/classes/UpdateUserDto.html",[42,0.144,146,1.681]],["body/classes/UpdateUserDto.html",[3,0.37,4,0.37,5,0.291,7,0.37,9,0.291,10,0.863,14,0.416,15,0.025,16,1.393,25,0.998,29,1.308,30,0.908,36,0.463,41,0.463,42,0.249,44,0.623,48,1.07,51,0.019,52,0.019,54,1.189,73,2.25,74,1.808,116,1.189,146,3.149,251,2.885,255,2.329,448,1.532,450,1.745,451,2.885,462,2.144,466,2.499,484,2.499,485,2.921,487,3.318,488,3.729,489,3.729,490,3.729,491,3.729,494,2.986,496,2.499,497,2.986,539,2.376,817,4.52,818,3.763,821,3.763,823,3.763,826,4.7,827,3.763,828,6.333,829,4.439,830,4.439,831,4.439,832,4.439]],["title/entities/User.html",[0,1.058,29,0.719]],["body/entities/User.html",[0,1.778,2,2.531,3,0.345,4,0.345,5,0.271,7,0.345,8,3.959,9,0.271,10,0.825,11,3.247,14,0.452,15,0.025,16,1.47,17,3.087,18,4.49,19,2.679,20,3.959,21,4.49,22,4.49,25,1.053,27,3.959,28,3.246,29,1.444,30,0.869,33,5.229,34,4.371,36,0.488,37,3.959,38,3.959,39,2.149,40,3.501,41,0.442,42,0.219,43,2.778,44,0.693,45,1.611,46,3.501,47,1.338,48,1.19,49,1.338,50,3.501,51,0.018,52,0.018,73,2.202,255,2.225,431,2.149,485,2.825,833,3.501,834,4.13,835,4.13,836,4.13,837,5.297,838,5.297,839,4.13,840,4.13]],["title/classes/UserCreateResp.html",[42,0.144,125,1.811]],["body/classes/UserCreateResp.html",[3,0.313,4,0.313,5,0.246,7,0.313,9,0.246,10,0.774,14,0.445,15,0.025,16,1.402,25,1.07,29,1.411,30,0.924,36,0.415,41,0.496,42,0.255,44,0.714,45,1.972,48,1.194,51,0.017,52,0.017,54,1.004,66,1.07,70,1.25,71,1.25,72,1.575,73,2.358,74,1.07,92,1.38,99,0.942,116,1.004,124,2.674,125,3.468,205,2.089,212,1.697,255,2.089,444,2.054,448,2.194,450,1.473,451,3.092,453,3.482,462,1.811,466,2.111,468,2.111,472,1.332,473,3.345,484,2.111,485,3.133,488,2.522,489,2.522,490,2.522,491,2.522,494,2.522,495,3.178,496,2.111,497,2.522,498,3.717,499,2.297,500,2.802,501,2.297,502,2.802,503,2.297,504,4.216,505,3.717,841,3.749,842,3.749,843,3.749,844,3.749]],["title/entities/UserSmsCode.html",[0,1.058,431,1.811]],["body/entities/UserSmsCode.html",[0,1.969,2,2.662,3,0.362,4,0.362,5,0.285,7,0.362,8,4.089,9,0.285,10,0.852,14,0.434,15,0.025,16,1.505,17,3.247,19,1.825,20,4.089,25,1.078,27,4.089,29,1.461,30,0.797,34,3.247,36,0.456,37,3.247,38,4.089,39,2.261,41,0.456,42,0.226,43,2.922,44,0.672,45,1.82,48,1.155,51,0.019,52,0.019,81,3.27,281,3.27,431,3.441,440,5.075,617,4.089,845,3.683,846,6.284,847,4.344,848,4.637,849,4.344,850,4.344,851,4.344,852,4.344,853,4.344,854,4.344,855,4.344,856,4.344,857,4.344]],["title/coverage.html",[858,4.01]],["body/coverage.html",[0,1.826,1,1.247,5,0.253,6,3.264,11,1.86,14,0.253,15,0.025,29,0.795,42,0.288,51,0.018,52,0.018,53,2.36,55,3.803,59,2.168,121,1.513,122,1.86,124,1.732,125,2.004,127,2.168,130,1.732,131,2.004,134,2.168,135,2.168,137,2.168,139,2.168,141,2.168,142,2.168,144,1.86,146,1.86,148,1.732,150,2.004,154,2.36,168,2.168,207,2.168,431,2.004,438,3.264,442,3.264,443,3.803,453,3.512,454,3.512,484,3.512,506,2.074,507,2.004,509,3.014,511,2.004,532,1.989,537,1.732,541,1.732,591,2.59,592,4.039,593,2.731,732,3.783,740,2.878,742,3.264,743,2.59,746,2.878,747,3.264,765,3.783,773,3.264,775,3.264,786,2.878,817,3.783,833,3.264,845,3.264,848,3.264,858,3.264,859,3.85,860,3.85,861,7.194,862,3.85,863,6.005,864,6.238,865,3.85,866,6.858,867,5.654,868,6.7,869,5.061,870,4.291,871,3.85,872,3.264,873,3.264,874,3.264,875,3.85,876,3.85]],["title/dependencies.html",[312,2.561,877,2.471]],["body/dependencies.html",[15,0.025,39,2.557,42,0.243,51,0.021,52,0.021,107,1.931,108,3.011,116,1.316,120,3.011,312,3.011,323,2.767,325,3.011,434,3.305,436,4.166,447,1.697,450,1.931,515,2.767,757,5.002,785,5.002,878,6.559,879,4.914,880,4.914,881,4.914,882,4.914,883,4.914,884,4.914,885,4.914,886,4.914,887,4.914,888,4.914,889,4.914,890,4.914,891,4.914,892,4.914,893,4.914,894,4.914,895,4.914,896,4.914,897,4.914,898,4.914,899,4.914,900,4.914,901,4.166,902,4.914,903,4.914,904,4.914,905,4.914,906,4.914]],["title/miscellaneous/enumerations.html",[907,1.408,908,3.543]],["body/miscellaneous/enumerations.html",[1,1.96,9,0.336,14,0.336,15,0.024,29,1.25,51,0.021,52,0.021,80,2.723,88,2.015,147,2.923,148,2.307,184,2.228,238,2.886,457,2.307,472,1.373,509,2.477,516,3.625,517,2.886,518,2.923,519,3.407,520,2.886,521,2.886,522,2.923,524,2.307,525,2.886,907,2.477,908,4.346,909,5.13,910,5.127,911,5.752,912,5.127]],["title/miscellaneous/functions.html",[907,1.408,913,3.543]],["body/miscellaneous/functions.html",[9,0.361,15,0.022,51,0.022,52,0.022,872,4.666,874,5.619,907,2.659,913,4.666,914,5.503,915,5.503,916,5.503]],["title/index.html",[9,0.191,917,2.915,918,2.915]],["body/index.html",[5,0.342,15,0.021,51,0.021,52,0.021,157,3.505,783,4.418,901,5.18,919,5.211,920,6.11,921,5.211,922,5.211,923,5.211,924,5.211,925,5.211,926,5.211,927,5.211,928,6.815,929,5.211,930,5.211,931,6.11,932,5.211,933,5.211,934,5.211,935,5.211,936,5.211,937,5.211,938,5.211,939,5.211,940,5.211,941,5.211,942,5.211,943,5.211,944,5.211,945,5.211,946,5.211]],["title/modules.html",[311,2.899]],["body/modules.html",[15,0.022,51,0.022,52,0.022,310,3.694,311,3.366,315,3.366,947,6.299,948,6.299,949,6.299,950,6.299]],["title/overview.html",[951,4.01]],["body/overview.html",[2,3.193,15,0.023,51,0.021,52,0.021,54,1.396,59,2.934,121,2.548,310,4.497,311,3.193,312,3.744,313,4.418,314,4.418,315,4.176,316,4.567,317,3.895,318,3.895,427,4.418,428,4.418,472,1.637,508,2.712,741,3.895,743,3.505,951,4.418,952,5.211,953,5.211,954,5.211,955,5.211,956,5.211]],["title/properties.html",[10,0.651,877,2.471]],["body/properties.html",[7,0.458,10,0.855,15,0.024,51,0.022,52,0.022,957,5.493,958,5.493,959,5.493,960,5.493,961,5.493]],["title/miscellaneous/typealiases.html",[907,1.408,962,4.18]],["body/miscellaneous/typealiases.html",[9,0.359,14,0.359,15,0.022,51,0.022,52,0.022,509,2.643,526,3.539,528,3.036,873,5.328,907,2.643,909,5.328,963,5.471]],["title/miscellaneous/variables.html",[907,1.408,964,3.543]],["body/miscellaneous/variables.html",[9,0.321,14,0.386,15,0.024,30,0.651,48,0.944,51,0.021,52,0.021,58,3.061,121,1.921,122,2.842,147,2.362,148,3.096,153,1.921,156,2.996,170,3.312,173,3.553,181,1.487,184,1.8,186,4.244,193,3.288,255,2.054,289,2.312,524,2.2,551,2.753,592,3.288,605,3.654,606,4.717,607,3.654,608,3.654,609,4.717,610,3.654,611,3.654,612,3.654,613,3.654,614,3.654,615,4.397,616,3.654,786,4.397,870,4.145,907,2.362,911,5.349,964,4.145,965,4.889,966,5.882,967,4.889,968,4.889]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":581,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["0.0.1",{"_index":958,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["0.2.43",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["0.22.15",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["0.5.6",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["0000",{"_index":772,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["0000'})@isstring",{"_index":769,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["1",{"_index":472,"title":{"interfaces/Payload-1.html":{}},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1.0.0",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["134",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["14",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["15/15",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":955,"title":{},"body":{"overview.html":{}}}],["18",{"_index":838,"title":{},"body":{"entities/User.html":{}}}],["2",{"_index":952,"title":{},"body":{"overview.html":{}}}],["2.14.1",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":229,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["200})@apiresponse({status",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":218,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["201})@apiresponse({status",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["24",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["24'})@isphonenumber('ru",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["24'})@validateif(o",{"_index":829,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["26/26",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":954,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":953,"title":{},"body":{"overview.html":{}}}],["4.3.0",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":216,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["401",{"_index":300,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["403",{"_index":217,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["404",{"_index":228,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["5.2.0",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":956,"title":{},"body":{"overview.html":{}}}],["60",{"_index":688,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["60000",{"_index":686,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["7",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["7.2.0",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["81375461323",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["9/9",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["936",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["_e",{"_index":564,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["_payload",{"_index":556,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["access",{"_index":483,"title":{},"body":{"classes/CreateTokenResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["active",{"_index":519,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["admin",{"_index":1,"title":{"entities/Admin.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{},"interfaces/Payload.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["admin'})@apibody({type",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin'})@apiparam({type",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin'})@apiresponse({status",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin.baseuser",{"_index":655,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["admin.dto",{"_index":133,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["admin.dto.ts",{"_index":454,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["admin.dto.ts:10",{"_index":733,"title":{},"body":{"classes/GetAdminResp.html":{}}}],["admin.dto.ts:19",{"_index":458,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginAdminDto.html":{}}}],["admin.dto.ts:20",{"_index":820,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["admin.dto.ts:29",{"_index":460,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{}}}],["admin.dto.ts:31",{"_index":822,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["admin.dto.ts:38",{"_index":474,"title":{},"body":{"classes/CreateAdminResp.html":{}}}],["admin.dto.ts:40",{"_index":735,"title":{},"body":{"classes/GetAdminResp.html":{}}}],["admin.dto.ts:55",{"_index":476,"title":{},"body":{"classes/CreateAdminResp.html":{}}}],["admin.dto.ts:64",{"_index":475,"title":{},"body":{"classes/CreateAdminResp.html":{}}}],["admin.email",{"_index":471,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"interfaces/Payload.html":{}}}],["admin.id",{"_index":469,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{}}}],["admin.password",{"_index":654,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["adminexist",{"_index":608,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["adminexistbyemail(email",{"_index":638,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["adminfailedauth",{"_index":611,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["adminnotfoud",{"_index":610,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["adminreposiotry",{"_index":623,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["admins",{"_index":274,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["admins'})@apiresponse({status",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{}}}],["algorithm",{"_index":544,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["aliases",{"_index":963,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allauthserviceexceptionsfilter",{"_index":53,"title":{"classes/AllAuthServiceExceptionsFilter.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{}}}],["apibearerauth",{"_index":109,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apibody",{"_index":110,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apibody({type",{"_index":220,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apioperation",{"_index":111,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apioperation({summary",{"_index":214,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiparam",{"_index":112,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiparam({name",{"_index":244,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiparam({type",{"_index":231,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiproduces",{"_index":113,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiproduces('text/plain",{"_index":283,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiproperty",{"_index":448,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["apiproperty()@isstring({message",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({example",{"_index":444,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UserCreateResp.html":{}}}],["apiproperty({example:\"qwerty",{"_index":768,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["apiproperty({required",{"_index":828,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":114,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiresponse({status",{"_index":215,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apiresponse({type",{"_index":284,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apitags",{"_index":115,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["apitags('auth",{"_index":209,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["appmodule",{"_index":310,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":77,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["assert",{"_index":596,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["async",{"_index":221,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{}}}],["auth",{"_index":58,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["auth'})@apibody({type",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":430,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":123,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["auth/auth.module",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":207,"title":{"controllers/AuthController.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcontrolleredrrorinterceptor",{"_index":154,"title":{"classes/AuthControllerEdrrorInterceptor.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{}}}],["authguard",{"_index":744,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":745,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authheader",{"_index":792,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authheader.split",{"_index":795,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authmodule",{"_index":315,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":961,"title":{},"body":{"properties.html":{}}}],["authorizated",{"_index":301,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["authorizated'})@httpcode(200",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["authservice",{"_index":121,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["authserviceexceptions",{"_index":122,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authserviceexceptions.adminexist",{"_index":174,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.adminfailedauth",{"_index":176,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.adminnotfoud",{"_index":676,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.invalidtoken",{"_index":179,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["authserviceexceptions.tokenexpired",{"_index":182,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["authserviceexceptions.tokennotfound",{"_index":185,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["authserviceexceptions.userexist",{"_index":166,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.userfailedauth",{"_index":178,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["authserviceexceptions.usernotfound",{"_index":171,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["autoloadentities",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":234,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["bad",{"_index":265,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception",{"_index":91,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception(\"admin",{"_index":175,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception(\"failed",{"_index":177,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["badrequestexception(\"user",{"_index":169,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["base",{"_index":28,"title":{},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{}}}],["baseuser",{"_index":11,"title":{"entities/BaseUser.html":{}},"body":{"entities/Admin.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"coverage.html":{}}}],["baseuser.entity",{"_index":40,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["baseuserreposiotry",{"_index":622,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["body",{"_index":92,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UserCreateResp.html":{}}}],["body'})@apiresponse({status",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":784,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":874,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":950,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":947,"title":{},"body":{"modules.html":{}}}],["callhandler",{"_index":93,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["canactivate",{"_index":776,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":780,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cascade",{"_index":22,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["cascade'})@joincolumn",{"_index":24,"title":{},"body":{"entities/Admin.html":{}}}],["case",{"_index":165,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":63,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["catch(_e",{"_index":563,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["catch(e",{"_index":800,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch(exception",{"_index":75,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["catcherror",{"_index":118,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["check",{"_index":298,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["checkexpirationstatus",{"_index":801,"title":{},"body":{"classes/TokenFactory.html":{}}}],["checkexpirationstatus(expires",{"_index":588,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["checktoken",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["checktoken(@body",{"_index":303,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["checktoken(decoded",{"_index":726,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["checktoken(req",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["checktokendto",{"_index":127,"title":{"classes/CheckTokenDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"coverage.html":{}}}],["checktokendto})@apiresponse({status",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["class",{"_index":42,"title":{"classes/AllAuthServiceExceptionsFilter.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":54,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":428,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["code",{"_index":81,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"entities/UserSmsCode.html":{}}}],["column",{"_index":34,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["column({length",{"_index":837,"title":{},"body":{"entities/User.html":{}}}],["column({name",{"_index":849,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["column({name:\"smscode",{"_index":857,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["column({unique",{"_index":31,"title":{},"body":{"entities/Admin.html":{}}}],["command",{"_index":939,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":934,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{}}}],["configservice.get(\"identy_database_uri",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"identy_refresh_secret",{"_index":631,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["configservice.get(\"identy_secret",{"_index":630,"title":{},"body":{"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{}}}],["console.log(\"interceptor",{"_index":163,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["const",{"_index":187,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["constant",{"_index":604,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["constructor",{"_index":66,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{}}}],["constructor(admin",{"_index":467,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{}}}],["constructor(configservice",{"_index":750,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(httpadapterhost",{"_index":67,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["constructor(private",{"_index":211,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["constructor(reflector",{"_index":777,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(secretkey",{"_index":808,"title":{},"body":{"classes/TokenFactory.html":{}}}],["constructor(user",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["context",{"_index":156,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":790,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":789,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":791,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":59,"title":{"controllers/AuthController.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["controller('auth",{"_index":210,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["controllers",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["coverage",{"_index":858,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crate",{"_index":682,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["create",{"_index":212,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{}}}],["createadmin",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["createadmin(@body",{"_index":260,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createadmin(req",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createadmindto",{"_index":130,"title":{"classes/CreateAdminDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["createadmindto})@apibearerauth",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["createadminresp",{"_index":131,"title":{"classes/CreateAdminResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"coverage.html":{}}}],["createadminresp(await",{"_index":261,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createadminresp})@apibody({type",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["createbaseuser",{"_index":633,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["created",{"_index":219,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["created.smscode",{"_index":719,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createdtoken",{"_index":507,"title":{"interfaces/CreatedToken.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["createdtokens",{"_index":591,"title":{"interfaces/CreatedTokens.html":{}},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["createexpiresfunc",{"_index":528,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/typealiases.html":{}}}],["createrefreshtoken",{"_index":802,"title":{},"body":{"classes/TokenFactory.html":{}}}],["createrefreshtoken(payload",{"_index":549,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["creates",{"_index":70,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{}}}],["createsms",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["createsms(@param(\"phone",{"_index":285,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createsms(phone",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["createsmscode(phonenumber",{"_index":708,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createsometoken",{"_index":803,"title":{},"body":{"classes/TokenFactory.html":{}}}],["createsometoken(payload",{"_index":552,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["createtoken",{"_index":804,"title":{},"body":{"classes/TokenFactory.html":{}}}],["createtoken(payload",{"_index":546,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["createtokenfunc",{"_index":526,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/typealiases.html":{}}}],["createtokenresp",{"_index":134,"title":{"classes/CreateTokenResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateTokenResp.html":{},"coverage.html":{}}}],["createtokenresp})@apiresponse({status",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokens(payload",{"_index":703,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createuser",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(@body",{"_index":222,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["createuser(createuserdto",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(req",{"_index":640,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["createuserdto",{"_index":124,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["createuserdto})@apibearerauth",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto",{"_index":598,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["ctx",{"_index":190,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["date",{"_index":530,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["date.now",{"_index":554,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decide",{"_index":782,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decode",{"_index":88,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["decode(token",{"_index":562,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decoded",{"_index":536,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decoded.payload.payload.role.includes(role",{"_index":799,"title":{},"body":{"guards/RolesGuard.html":{}}}],["decodedtoken",{"_index":537,"title":{"interfaces/DecodedToken.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["decoderefreshtoken",{"_index":805,"title":{},"body":{"classes/TokenFactory.html":{}}}],["decoderefreshtoken(refresh",{"_index":724,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["decoderefreshtoken(token",{"_index":586,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodesometoken",{"_index":806,"title":{},"body":{"classes/TokenFactory.html":{}}}],["decodesometoken(token",{"_index":559,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetoken",{"_index":807,"title":{},"body":{"classes/TokenFactory.html":{}}}],["decodetoken(token",{"_index":584,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetype",{"_index":522,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["decodetype.integtiryerror",{"_index":574,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetype.invalidtoken",{"_index":570,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decodetype.valid",{"_index":582,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["decorator",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"entities/Admin.html":{},"controllers/AuthController.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["dedoce",{"_index":520,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["default",{"_index":186,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":25,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["delete",{"_index":94,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["delete(\"/admin/:id",{"_index":270,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["delete('/admin/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('/user/:id",{"_index":225,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["delete('/user/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteadmin",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteadmin(@param('id",{"_index":271,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["deleteadmin(id",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["deletebaseuser(id",{"_index":648,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["deleted",{"_index":230,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["deleted'})@apiparam({type",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuser",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteuser(@param('id",{"_index":232,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["deleteuser(id",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["dependencies",{"_index":312,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"properties.html":{}}}],["dir",{"_index":942,"title":{},"body":{"index.html":{}}}],["docs",{"_index":928,"title":{},"body":{"index.html":{}}}],["documantation",{"_index":941,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":126,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["dto/check",{"_index":128,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/create",{"_index":132,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["dto/get",{"_index":136,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/login",{"_index":140,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/refresh",{"_index":143,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["dto/update",{"_index":145,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["e",{"_index":89,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["e.message",{"_index":565,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["e.message.indexof(\"unexpected",{"_index":580,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["eager",{"_index":20,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["edge",{"_index":27,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["email",{"_index":12,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{},"interfaces/Payload.html":{},"classes/UpdateAdminDto.html":{}}}],["encode",{"_index":513,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["encode(_payload",{"_index":557,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["enough",{"_index":567,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"overview.html":{}}}],["entity",{"_index":0,"title":{"entities/Admin.html":{},"entities/BaseUser.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"coverage.html":{}}}],["entity({name",{"_index":43,"title":{},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["entity/user_sms_code.entity",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["entitynotfounderror",{"_index":600,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["entrypoint",{"_index":915,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enum",{"_index":516,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":908,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":922,"title":{},"body":{"index.html":{}}}],["err",{"_index":162,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["error",{"_index":87,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["error(\"admin",{"_index":609,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["error(\"invalid",{"_index":613,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["error(\"token",{"_index":615,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["error(\"user",{"_index":606,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":153,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":451,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["exception",{"_index":56,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["exception.getresponse",{"_index":197,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["exception.getstatus",{"_index":198,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["exceptionfilter",{"_index":61,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["executioncontext",{"_index":95,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":170,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["exist'})@apibearerauth",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["exist'})@apiresponse({status",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["experation",{"_index":517,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["expiration",{"_index":587,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expirationstatus",{"_index":518,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["expirationstatus.active",{"_index":589,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expirationstatus.expired",{"_index":590,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expire",{"_index":683,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["expired",{"_index":184,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expires",{"_index":531,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expiresfunc",{"_index":527,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["expiresfunc(now",{"_index":555,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["export",{"_index":41,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["express",{"_index":785,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":510,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["extractjwt",{"_index":756,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyj0exaioijkv1qilcjhbgcioijiuzuxmij9.eyjwyxlsb2fkijp7injvbguioijhzg1pbiisinvzzxjjzci6mn0simlzc3vlzci6mty0nza3mzi5mtk4niwizxhwaxjlcyi6mty0nze1oty5mtk4nn0.v_9tx8twre8vkqtf3eaxn8bvnmbstfbwskyzuoixd00nbv7_kcylkojxxj4f0afuvrsoyv1codff2k_cg8ylxa",{"_index":452,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["eyj0exaioijkv1qilcjhbgcioijiuzuxmij9.eyjwyxlsb2fkijp7injvbguioijhzg1pbiisinvzzxjjzci6mn0simlzc3vlzci6mty0nza3mzi5mtk4niwizxhwaxjlcyi6mty0nze1oty5mtk4nn0.v_9tx8twre8vkqtf3eaxn8bvnmbstfbwskyzuoixd00nbv7_kcylkojxxj4f0afuvrsoyv1codff2k_cg8ylxa'})@isjwt",{"_index":445,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzuxmiisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiywrtaw4ionrydwusimlhdci6mtuxnjizotaymn0.vfb0qj1lrg_4ujbzormxnvkugiukq5kxwqndbkq_g9vvz",{"_index":477,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["factory",{"_index":540,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["failed",{"_index":289,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":539,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["false})@validateif(o",{"_index":818,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"index.html":{}}}],["filter",{"_index":57,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["filtering",{"_index":657,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["findmanyoptions",{"_index":603,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["found",{"_index":173,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["found'})@apiresponse({status",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["fpg",{"_index":479,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["func",{"_index":681,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["function",{"_index":873,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":913,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":940,"title":{},"body":{"index.html":{}}}],["generic",{"_index":533,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["get(\"/admin",{"_index":275,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["get('/admin')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/user",{"_index":239,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["get('/user')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/user/:id",{"_index":243,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["get('/user/:id')@apioperation({summary",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["getadmin",{"_index":673,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin(id",{"_index":664,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin.email",{"_index":678,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin.id",{"_index":693,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadmin.password",{"_index":691,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getadminresp",{"_index":135,"title":{"classes/GetAdminResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/GetAdminResp.html":{},"coverage.html":{}}}],["getadminresp(admin",{"_index":278,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getadminresp(await",{"_index":268,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getadminresp})@apiresponse({status",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["getadmins",{"_index":276,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getadmins(opts",{"_index":661,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getter",{"_index":46,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["getting",{"_index":917,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":246,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuser(id",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuser.phonenumber",{"_index":670,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getusers",{"_index":240,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getusers(opts",{"_index":659,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getusersresp",{"_index":137,"title":{"classes/GetUsersResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/GetUsersResp.html":{},"coverage.html":{}}}],["getusersresp(await",{"_index":257,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getusersresp(user",{"_index":242,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["getusersresp})@apiparam({name",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["getusersresp})@apiresponse({status",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserwithcode",{"_index":696,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuserwithcode.smscode",{"_index":700,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["getuserwithcode.user.id",{"_index":701,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["given",{"_index":545,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["guard",{"_index":743,"title":{"guards/RolesGuard.html":{}},"body":{"injectables/JwtGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":774,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":575,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["host",{"_index":76,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["host.switchtohttp",{"_index":191,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["hourinms",{"_index":687,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["hs512",{"_index":632,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["http",{"_index":79,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["http://localhost:3000/swagger",{"_index":946,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":943,"title":{},"body":{"index.html":{}}}],["httpadapter",{"_index":188,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":203,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpadapterhost",{"_index":68,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpcode",{"_index":96,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpcode(200",{"_index":302,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpexception",{"_index":90,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["httpstatus",{"_index":106,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["id",{"_index":45,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["id'})@apibearerauth",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":848,"title":{},"body":{"entities/UserSmsCode.html":{},"coverage.html":{}}}],["identy_database_uri=\"postgresql://root:root@localhost:5432/identy",{"_index":925,"title":{},"body":{"index.html":{}}}],["identy_refresh_secret=\"refresh_super_secret\"docs",{"_index":927,"title":{},"body":{"index.html":{}}}],["identy_secret=\"super_secret",{"_index":926,"title":{},"body":{"index.html":{}}}],["if(!isdeleted",{"_index":236,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["if(!requiredroles",{"_index":797,"title":{},"body":{"guards/RolesGuard.html":{}}}],["if(!user",{"_index":249,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["if(authheader",{"_index":794,"title":{},"body":{"guards/RolesGuard.html":{}}}],["if(exception",{"_index":195,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["if(getadmin",{"_index":675,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(getuser",{"_index":668,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(getuserwithcode",{"_index":699,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(req.email",{"_index":677,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(req.phonenumber",{"_index":669,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(user",{"_index":709,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["if(userwithsms",{"_index":714,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["ignoreexpiration",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implementetion",{"_index":619,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["implements",{"_index":60,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":36,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["imports",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["inject",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":593,"title":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{}},"body":{"interfaces/CreatedTokens.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":741,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["injectrepository",{"_index":594,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(admin",{"_index":627,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(baseuser",{"_index":626,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(user",{"_index":625,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["injectrepository(usersmscode",{"_index":628,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["instance",{"_index":71,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{}}}],["instanceof",{"_index":196,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["integtiryerror",{"_index":525,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["intercept",{"_index":425,"title":{},"body":{"classes/AuthControllerEdrrorInterceptor.html":{}}}],["intercept(context",{"_index":159,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["interceptor",{"_index":152,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["interface",{"_index":506,"title":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"interfaces/TokenInfo.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["interfaces",{"_index":508,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"interfaces/TokenInfo.html":{},"overview.html":{}}}],["invalid",{"_index":523,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["invalidtoken",{"_index":524,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["isdeleted",{"_index":233,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["isemail",{"_index":461,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/LoginAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["isemail({},{message",{"_index":464,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/UpdateAdminDto.html":{}}}],["isglobal",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":449,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isphonenumber",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["isphonenumber(\"ru",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["isstring",{"_index":462,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["isstring({message",{"_index":466,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["issued",{"_index":529,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["joincolumn",{"_index":37,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["joincolumn({name",{"_index":856,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["json",{"_index":576,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["jwt",{"_index":447,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateTokenResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":760,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":740,"title":{"injectables/JwtGuard.html":{}},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtstrategy",{"_index":746,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["key",{"_index":551,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/variables.html":{}}}],["lauch",{"_index":929,"title":{},"body":{"index.html":{}}}],["launch",{"_index":783,"title":{},"body":{"guards/RolesGuard.html":{},"index.html":{}}}],["length",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["license",{"_index":959,"title":{},"body":{"properties.html":{}}}],["list",{"_index":237,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["literal",{"_index":473,"title":{},"body":{"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["local",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":287,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{}}}],["loginadmin",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmin(@body",{"_index":290,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["loginadmin(email",{"_index":689,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["loginadmin(req",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginadmindto",{"_index":139,"title":{"classes/LoginAdminDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/LoginAdminDto.html":{},"coverage.html":{}}}],["loginuser",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@body",{"_index":295,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["loginuser(phonenumber",{"_index":695,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["loginuser(req",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":141,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto})@apiresponse({status",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["many",{"_index":568,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["matching",{"_index":52,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random()*9",{"_index":711,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["memberof",{"_index":44,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["message",{"_index":456,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{}}}],["metadata",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":280,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["methods",{"_index":62,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{}}}],["minuteinms",{"_index":685,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["miscellaneous",{"_index":907,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":309,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules",{"_index":311,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["mongorepository",{"_index":601,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["mysql",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":73,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{}}}],["nestinterceptor",{"_index":97,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["nestjs/common",{"_index":107,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":108,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":116,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"dependencies.html":{}}}],["new",{"_index":168,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["newexpection",{"_index":199,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["newexpection.getresponse",{"_index":201,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["newexpection.getstatus",{"_index":202,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["next",{"_index":157,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"index.html":{}}}],["next.handle",{"_index":160,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["nonsense",{"_index":579,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["notfoundexception",{"_index":98,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["notfoundexception(\"admin",{"_index":273,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["notfoundexception(\"user",{"_index":172,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["notfoundexception('user",{"_index":250,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["now",{"_index":553,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["npx",{"_index":933,"title":{},"body":{"index.html":{}}}],["nubmer",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["number",{"_index":48,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"miscellaneous/variables.html":{}}}],["o",{"_index":824,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["o.email",{"_index":825,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["o.email)@isemail",{"_index":819,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["o.name",{"_index":827,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["o.name)@isstring({message",{"_index":821,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["o.phonenumber",{"_index":832,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["o.phonenumber)@isphonenumber('ru",{"_index":830,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["object",{"_index":193,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":119,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["ondelete",{"_index":21,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["onetomany",{"_index":853,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["onetoone",{"_index":38,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["onetoone(undefined",{"_index":17,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["onupdate",{"_index":23,"title":{},"body":{"entities/Admin.html":{}}}],["optional",{"_index":74,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{}}}],["opts",{"_index":658,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["out",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["overview",{"_index":951,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":935,"title":{},"body":{"index.html":{}}}],["package",{"_index":877,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":99,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UserCreateResp.html":{}}}],["param('id",{"_index":247,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["parameters",{"_index":72,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"classes/UserCreateResp.html":{}}}],["params",{"_index":924,"title":{},"body":{"index.html":{}}}],["parse",{"_index":577,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["passport",{"_index":757,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":433,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":755,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":758,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":13,"title":{},"body":{"entities/Admin.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"classes/LoginAdminDto.html":{},"interfaces/Payload.html":{},"classes/UpdateAdminDto.html":{}}}],["payload",{"_index":532,"title":{"interfaces/Payload.html":{},"interfaces/Payload-1.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["payload.role",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":255,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"miscellaneous/variables.html":{}}}],["phonenubmer",{"_index":739,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["phonenumber",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{}}}],["pipe",{"_index":161,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post",{"_index":100,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/admin",{"_index":259,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/admin/login",{"_index":288,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/checktoken",{"_index":299,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/refreshtoken",{"_index":306,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/testsms/:phone",{"_index":282,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post(\"/user/login",{"_index":294,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post('/admin')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/admin/login')@apiresponse({type",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/checktoken')@apibody({type",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/refreshtoken')@apibody({type",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/testsms/:phone')@apiparam({name",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user",{"_index":213,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["post('/user')@apioperation({summary",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user/login')@apibody({type",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["primary",{"_index":18,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn",{"_index":440,"title":{},"body":{"entities/BaseUser.html":{},"entities/UserSmsCode.html":{}}}],["private",{"_index":64,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["programm",{"_index":916,"title":{},"body":{"miscellaneous/functions.html":{}}}],["project",{"_index":920,"title":{},"body":{"index.html":{}}}],["projects",{"_index":930,"title":{},"body":{"index.html":{}}}],["promise",{"_index":158,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"properties.html":{}}}],["providers",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["put",{"_index":101,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["put(\"/admin/:id",{"_index":263,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["put(\"/user/:id",{"_index":253,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["put('/admin/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('/user/:id')@roles(role.admin)@useguards(rolesguard)@apioperation({summary",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["pyalaod",{"_index":754,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["queryfailederror",{"_index":602,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["qwerty",{"_index":465,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/UpdateAdminDto.html":{}}}],["qwerty'})@isstring",{"_index":767,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["qwerty'})@isstring({message",{"_index":459,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["randomnubmer",{"_index":710,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["randomnubmer()}${randomnubmer()}${randomnubmer()}${randomnubmer",{"_index":717,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["randomuuid",{"_index":597,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["readonly",{"_index":47,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"entities/User.html":{}}}],["redresh",{"_index":481,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["reflect",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":778,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh",{"_index":305,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["refreshsecretkey",{"_index":543,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["refreshtoken",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTokenResp.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":307,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["refreshtoken(req",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(token",{"_index":729,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["refreshtoken.token",{"_index":707,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["refreshtokendto",{"_index":142,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokendto})@apiresponse({status",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["relations",{"_index":698,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["repository",{"_index":599,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["represantation",{"_index":8,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["representaion",{"_index":439,"title":{},"body":{"entities/BaseUser.html":{}}}],["represention",{"_index":512,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["req",{"_index":252,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["req.code",{"_index":297,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["req.email",{"_index":653,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["req.headers.authorization",{"_index":793,"title":{},"body":{"guards/RolesGuard.html":{}}}],["req.name",{"_index":642,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["req.password",{"_index":293,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["req.phonenumber",{"_index":643,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["request",{"_index":266,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["request'})@apibearerauth",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["require",{"_index":921,"title":{},"body":{"index.html":{}}}],["require('express",{"_index":117,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["required",{"_index":245,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/UpdateAdminDto.html":{}}}],["requiredroles",{"_index":787,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":798,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requires",{"_index":538,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["reset",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["resfresh",{"_index":620,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["resp",{"_index":192,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["responce",{"_index":205,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["result",{"_index":560,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["result.affected",{"_index":650,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["results",{"_index":51,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":49,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"entities/User.html":{}}}],["returns",{"_index":82,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{}}}],["rimraf",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":147,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":694,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["role.user",{"_index":702,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["roles",{"_index":148,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":226,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["roles.decorator",{"_index":149,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["roles.guard",{"_index":151,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{}}}],["roles_key",{"_index":786,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":150,"title":{"guards/RolesGuard.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["root",{"_index":923,"title":{},"body":{"index.html":{}}}],["run",{"_index":931,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":120,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["s",{"_index":937,"title":{},"body":{"index.html":{}}}],["s1zza9lpxthwka64zdl2ofkt8f6jbt_k4riu",{"_index":478,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["secretkey",{"_index":542,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["secretorkey",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["segments",{"_index":569,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["server",{"_index":944,"title":{},"body":{"index.html":{}}}],["service",{"_index":618,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["setmetadata(roles_key",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":919,"title":{},"body":{"index.html":{}}}],["show",{"_index":521,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["signature",{"_index":571,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["simple",{"_index":515,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"dependencies.html":{}}}],["sms",{"_index":281,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"entities/UserSmsCode.html":{}}}],["smscode",{"_index":846,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["smsrepository",{"_index":624,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{}}}],["src/.../auth.service.ts",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":914,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.ts",{"_index":910,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../token.ts",{"_index":909,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":55,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:103",{"_index":78,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["src/auth/auth.controller.ts:130",{"_index":85,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["src/auth/auth.controller.ts:190",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:208",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:227",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:247",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:275",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:295",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:317",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:335",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:354",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:373",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":426,"title":{},"body":{"classes/AuthControllerEdrrorInterceptor.html":{}}}],["src/auth/auth.controller.ts:388",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:405",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:422",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:437",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":69,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["src/auth/auth.module.ts",{"_index":429,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":592,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/check",{"_index":442,"title":{},"body":{"classes/CheckTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":453,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["src/auth/dto/get",{"_index":732,"title":{},"body":{"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":765,"title":{},"body":{"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/refresh",{"_index":773,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":817,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/entity/admin.entity.ts",{"_index":6,"title":{},"body":{"entities/Admin.html":{},"coverage.html":{}}}],["src/auth/entity/admin.entity.ts:20",{"_index":26,"title":{},"body":{"entities/Admin.html":{}}}],["src/auth/entity/admin.entity.ts:40",{"_index":32,"title":{},"body":{"entities/Admin.html":{}}}],["src/auth/entity/admin.entity.ts:49",{"_index":35,"title":{},"body":{"entities/Admin.html":{}}}],["src/auth/entity/baseuser.entity.ts",{"_index":438,"title":{},"body":{"entities/BaseUser.html":{},"coverage.html":{}}}],["src/auth/entity/baseuser.entity.ts:18",{"_index":441,"title":{},"body":{"entities/BaseUser.html":{}}}],["src/auth/entity/user.entity.ts",{"_index":833,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/auth/entity/user.entity.ts:21",{"_index":835,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entity/user.entity.ts:41",{"_index":839,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entity/user.entity.ts:50",{"_index":836,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entity/user_sms_code.entity.ts",{"_index":845,"title":{},"body":{"entities/UserSmsCode.html":{},"coverage.html":{}}}],["src/auth/entity/user_sms_code.entity.ts:19",{"_index":847,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["src/auth/entity/user_sms_code.entity.ts:29",{"_index":852,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["src/auth/entity/user_sms_code.entity.ts:38",{"_index":850,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["src/auth/jwt.guard.ts",{"_index":742,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":747,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":751,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:38",{"_index":753,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/roles.decorator.ts",{"_index":870,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/roles.guard.ts",{"_index":775,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/roles.guard.ts:17",{"_index":779,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles.guard.ts:33",{"_index":781,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles.ts",{"_index":912,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/token.ts",{"_index":509,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/token.ts:144",{"_index":809,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:166",{"_index":813,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:178",{"_index":811,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:192",{"_index":812,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:224",{"_index":815,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:268",{"_index":816,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:280",{"_index":814,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/auth/token.ts:292",{"_index":810,"title":{},"body":{"classes/TokenFactory.html":{}}}],["src/main.ts",{"_index":872,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":918,"title":{"index.html":{}},"body":{}}],["starts",{"_index":945,"title":{},"body":{"index.html":{}}}],["statements",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":80,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":194,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["strategy",{"_index":748,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":30,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"miscellaneous/variables.html":{}}}],["string})@apiproduces('text/plain')@apiresponse({type",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":759,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["supplied",{"_index":566,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["support",{"_index":948,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":573,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["svg",{"_index":949,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":901,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":86,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["switch(decoded.expirationstatus",{"_index":728,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["switch(decoded.type",{"_index":727,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["switch(e",{"_index":204,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"guards/RolesGuard.html":{}}}],["switch(err",{"_index":164,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["switcherror",{"_index":65,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["switcherror(e",{"_index":84,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["synchronize",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":535,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["table",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["talgorithm",{"_index":514,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["template",{"_index":534,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["terminal",{"_index":932,"title":{},"body":{"index.html":{}}}],["test",{"_index":279,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["that's",{"_index":938,"title":{},"body":{"index.html":{}}}],["this.adminexistbyemail(req.email",{"_index":652,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.find(opts",{"_index":662,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.findone",{"_index":690,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.findone(id",{"_index":665,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.findone({where",{"_index":639,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.merge",{"_index":680,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.save",{"_index":679,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.adminreposiotry.save(admin",{"_index":656,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.algorithm",{"_index":558,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.authservice.createadmin(req",{"_index":262,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.createsmscode(phone",{"_index":286,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.createuser(createuserdto",{"_index":224,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.decodetoken(req.token",{"_index":304,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.decodetoken(token",{"_index":796,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.authservice.deleteadmin(id",{"_index":272,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.deleteuser(id",{"_index":235,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.getadmins()).map",{"_index":277,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.getuser(id",{"_index":248,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.getusers()).map",{"_index":241,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.loginadmin(req.email",{"_index":292,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.loginuser(req.phonenumber",{"_index":296,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.refreshtoken(req.refreshtoken",{"_index":308,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.updateadmin(id",{"_index":269,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.authservice.updateuser(id",{"_index":258,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.baseuser.id",{"_index":50,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["this.baseuserreposiotry.delete({id",{"_index":649,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.baseuserreposiotry.save(new",{"_index":634,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.checkexpirationstatus(result.expires",{"_index":583,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.checktoken(decoded",{"_index":723,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.createbaseuser",{"_index":645,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.createsometoken(payload",{"_index":547,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.createtokens(decoded.payload.payload",{"_index":731,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.createtokens({userid",{"_index":692,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.decoderefreshtoken(token",{"_index":730,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.decodesometoken(token",{"_index":585,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.deletebaseuser(id",{"_index":651,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.email",{"_index":470,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/GetAdminResp.html":{}}}],["this.getadmin(id",{"_index":674,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.getuser(id",{"_index":667,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.httpadapterhost",{"_index":189,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.id",{"_index":468,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["this.name",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["this.phonenumber",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UserCreateResp.html":{}}}],["this.reflector.getallandoverride",{"_index":788,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.refreshsecretkey",{"_index":550,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.secretkey",{"_index":548,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["this.smsrepository.findone",{"_index":697,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.smsrepository.findone({where",{"_index":713,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.smsrepository.save(usersmscode",{"_index":718,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.smsrepository.save(userwithsms",{"_index":721,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.switcherror(exception",{"_index":200,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["this.tokenfactory",{"_index":629,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.createrefreshtoken(payload)(this.expiresfunc",{"_index":705,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.createtoken(payload)(this.expiresfunc",{"_index":704,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.decoderefreshtoken(refresh",{"_index":725,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.tokenfactory.decodetoken(token",{"_index":722,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userexistbyphonenumber(req.phonenumber",{"_index":641,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.find(opts",{"_index":660,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.findone(id",{"_index":663,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.findone({where",{"_index":636,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.merge(getuser",{"_index":672,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.save",{"_index":671,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["this.userreposiotry.save(user",{"_index":646,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["throw",{"_index":167,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["thrown",{"_index":578,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["throws",{"_index":595,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["time",{"_index":684,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["token",{"_index":181,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CheckTokenDto.html":{},"classes/CreateTokenResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"miscellaneous/variables.html":{}}}],["token.dto",{"_index":129,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["token.dto.ts",{"_index":443,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateTokenResp.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:17",{"_index":482,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["token.dto.ts:23",{"_index":446,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:26",{"_index":480,"title":{},"body":{"classes/CreateTokenResp.html":{}}}],["token.token",{"_index":706,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["tokenexpired",{"_index":614,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["tokenfactory",{"_index":541,"title":{"classes/TokenFactory.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["tokeninfo",{"_index":511,"title":{"interfaces/TokenInfo.html":{}},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"coverage.html":{}}}],["tokennotfound",{"_index":616,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":291,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["transformer",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["transorm",{"_index":155,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["true",{"_index":19,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{}}}],["true})@apibearerauth",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["true})@joincolumn",{"_index":834,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":851,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["try",{"_index":561,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["tsconfig.json",{"_index":936,"title":{},"body":{"index.html":{}}}],["type",{"_index":14,"title":{},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"entities/BaseUser.html":{},"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateTokenResp.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedToken.html":{},"interfaces/CreatedTokens.html":{},"interfaces/DecodedToken.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"injectables/JwtStrategy.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"interfaces/Payload-1.html":{},"classes/RefreshTokenDto.html":{},"guards/RolesGuard.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":962,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedoc",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["typeorm",{"_index":39,"title":{},"body":{"entities/Admin.html":{},"entities/BaseUser.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([baseuser",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":104,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["unauthorizedexception(\"invalid",{"_index":180,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["unauthorizedexception(\"token",{"_index":183,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["undefined",{"_index":637,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{}}}],["undefined})@apibearerauth",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["unique",{"_index":33,"title":{},"body":{"entities/Admin.html":{},"entities/User.html":{}}}],["unknown",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":960,"title":{},"body":{"properties.html":{}}}],["update",{"_index":251,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["updateadmin",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateadmin(@param(\"id",{"_index":267,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updateadmin(id",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["updateadmindto",{"_index":144,"title":{"classes/UpdateAdminDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["updated",{"_index":264,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updatet",{"_index":254,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updateuser",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuser(@param(\"id",{"_index":256,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["updateuser(id",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuser(id:number",{"_index":666,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["updateuserdto",{"_index":146,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["url",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":647,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["usefactory",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":102,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useguards",{"_index":105,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useguards(rolesguard",{"_index":227,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useinterceptors",{"_index":103,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["useinterceptors(authcontrolleredrrorinterceptor",{"_index":208,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["user",{"_index":29,"title":{"entities/User.html":{}},"body":{"entities/Admin.html":{},"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"modules/AuthModule.html":{},"entities/BaseUser.html":{},"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetAdminResp.html":{},"classes/GetUsersResp.html":{},"classes/LoginUserDto.html":{},"interfaces/Payload.html":{},"guards/RolesGuard.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserCreateResp.html":{},"entities/UserSmsCode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apibody({type",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@apiparam({type",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["user'})@apiresponse({status",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.baseuser",{"_index":644,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["user.dto",{"_index":138,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["user.dto.ts",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":736,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["user.dto.ts:19",{"_index":771,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:20",{"_index":831,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:21",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":770,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:31",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersResp.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:41",{"_index":841,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.dto.ts:42",{"_index":738,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["user.dto.ts:53",{"_index":737,"title":{},"body":{"classes/GetUsersResp.html":{}}}],["user.dto.ts:62",{"_index":842,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.dto.ts:73",{"_index":844,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.dto.ts:84",{"_index":843,"title":{},"body":{"classes/UserCreateResp.html":{}}}],["user.entity",{"_index":854,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["user.id",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{}}}],["user.name",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{}}}],["user.name@example.com",{"_index":463,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/UpdateAdminDto.html":{}}}],["user.name@example.com'})@isemail",{"_index":455,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["user.phonenumber",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CreatedTokens.html":{},"classes/GetUsersResp.html":{},"interfaces/Payload.html":{},"classes/UserCreateResp.html":{}}}],["user@example.com",{"_index":734,"title":{},"body":{"classes/GetAdminResp.html":{},"classes/LoginAdminDto.html":{}}}],["user@example.com'})@isemail",{"_index":766,"title":{},"body":{"classes/LoginAdminDto.html":{}}}],["user_sms_code.entity",{"_index":840,"title":{},"body":{"entities/User.html":{}}}],["usercreateresp",{"_index":125,"title":{"classes/UserCreateResp.html":{}},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"classes/CreateUserDto.html":{},"classes/UserCreateResp.html":{},"coverage.html":{}}}],["usercreateresp(await",{"_index":223,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["usercreateresp})@apibody({type",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["userexist",{"_index":605,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["userexistbyphonenumber(phone",{"_index":635,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["userfailedauth",{"_index":612,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":617,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/UserSmsCode.html":{}}}],["usernotfound",{"_index":607,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/variables.html":{}}}],["userreposiotry",{"_index":621,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["users",{"_index":238,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"miscellaneous/enumerations.html":{}}}],["users'})@apiresponse({status",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersmscode",{"_index":431,"title":{"entities/UserSmsCode.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{},"entities/User.html":{},"entities/UserSmsCode.html":{},"coverage.html":{}}}],["usersmscode.smscode",{"_index":716,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["usersmscode.user",{"_index":715,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["usersmscodes",{"_index":855,"title":{},"body":{"entities/UserSmsCode.html":{}}}],["userwithsms",{"_index":712,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["userwithsms.smscode",{"_index":720,"title":{},"body":{"interfaces/CreatedTokens.html":{},"interfaces/Payload.html":{}}}],["valid",{"_index":457,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{},"classes/UpdateAdminDto.html":{},"miscellaneous/enumerations.html":{}}}],["validate",{"_index":749,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["validate(payload",{"_index":752,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":823,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["validateif(o",{"_index":826,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{}}}],["validator",{"_index":450,"title":{},"body":{"classes/CheckTokenDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAdminResp.html":{},"classes/CreateUserDto.html":{},"classes/LoginAdminDto.html":{},"classes/LoginUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserCreateResp.html":{},"dependencies.html":{}}}],["value",{"_index":911,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":964,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":572,"title":{},"body":{"interfaces/CreatedToken.html":{},"interfaces/DecodedToken.html":{},"interfaces/Payload-1.html":{},"classes/TokenFactory.html":{},"interfaces/TokenInfo.html":{}}}],["version",{"_index":957,"title":{},"body":{"properties.html":{}}}],["void",{"_index":83,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{}}}],["working",{"_index":206,"title":{},"body":{"classes/AllAuthServiceExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/AuthControllerEdrrorInterceptor.html":{}}}],["zoom",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Admin.html":{"url":"entities/Admin.html","title":"entity - Admin","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/admin.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Admin entity represantation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                baseUser\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        baseUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {primary: true, eager: true, onDelete: 'CASCADE', onUpdate: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/admin.entity.ts:20\n                        \n                    \n\n            \n                \n                    edge to base user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/admin.entity.ts:40\n                        \n                    \n\n            \n                \n                    unique email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/admin.entity.ts:49\n                        \n                    \n\n            \n                \n                    admin password\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToOne, Unique } from \"typeorm\";\nimport { BaseUser } from \"./baseuser.entity\";\n\n/**\n * Admin entity represantation\n *\n * @export\n * @class Admin\n */\n@Entity({name: \"Admin\"})\nexport class Admin {\n    /**\n     * edge to base user\n     *\n     * @type {BaseUser}\n     * @memberof Admin\n     */\n    @OneToOne(() => BaseUser, {primary: true, eager: true, onDelete: \"CASCADE\", onUpdate: \"CASCADE\", })\n    @JoinColumn()\n    baseUser: BaseUser;\n\n    /**\n     * id getter\n     *\n     * @readonly\n     * @type {number}\n     * @memberof Admin\n     */\n    get id(): number {\n        return this.baseUser.id\n    }\n\n    /**\n     * unique email\n     *\n     * @type {string}\n     * @memberof Admin\n     */\n    @Column({unique: true})\n    email: string;\n\n    /**\n     * admin password\n     *\n     * @type {string}\n     * @memberof Admin\n     */\n    @Column()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllAuthServiceExceptionsFilter.html":{"url":"classes/AllAuthServiceExceptionsFilter.html","title":"class - AllAuthServiceExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllAuthServiceExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                exception filter for auth controller\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                switchError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.controller.ts:86\n                            \n                        \n\n                \n                    \n                            Creates an instance of AllAuthServiceExceptionsFilter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.controller.ts:103\n                \n            \n\n\n            \n                \n                    catch exception and return http exception status code\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        switchError\n                        \n                    \n                \n            \n            \n                \n                    \n                    switchError(e: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.controller.ts:130\n                \n            \n\n\n            \n                \n                    switch error to decode it to http exception\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpException\n\n                    \n                    \n                        {HttpException}\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, BadRequestException, Body, CallHandler, Catch, Controller, Delete, ExceptionFilter, ExecutionContext, Get, HttpCode, NestInterceptor, NotFoundException, Param, Post, Put, UseFilters, UseInterceptors,  UnauthorizedException, UseGuards, HttpException, HttpStatus} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiProduces, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport e = require('express');\nimport { catchError, Observable } from 'rxjs';\nimport { AuthService, AuthServiceExceptions } from './auth.service';\nimport { CreateUserDto, UserCreateResp } from './dto';\nimport { CheckTokenDto } from './dto/check-token.dto';\nimport { CreateAdminDto, CreateAdminResp } from './dto/create-admin.dto';\nimport { CreateTokenResp } from './dto/create-token.dto';\nimport { GetAdminResp } from './dto/get-admin.dto';\nimport { GetUsersResp } from './dto/get-user.dto';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entity';\nimport { Role } from './roles';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\n/**\n * Interceptor to catch auth errors\n *\n * @class AuthControllerEdrrorInterceptor\n * @implements {NestInterceptor}\n */\nclass AuthControllerEdrrorInterceptor implements NestInterceptor {\n    /**\n     * interceptor to transorm error to exception\n     *\n     * @param {ExecutionContext} context\n     * @param {CallHandler} next\n     * @return {*}  {(Observable | Promise>)}\n     * @memberof AuthControllerEdrrorInterceptor\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable | Promise> {\n        return next.handle()\n            .pipe(\n                catchError(\n                    (err: any) => {\n                        console.log(\"Interceptor\")\n                        switch(err) {\n                            case AuthServiceExceptions.UserExist:\n                                throw new BadRequestException(\"User Exist\")\n\n                            case AuthServiceExceptions.UserNotFound:\n                                throw new NotFoundException(\"User not found\")\n\n                            case AuthServiceExceptions.AdminExist:\n                                throw new BadRequestException(\"Admin Exist\")\n\n                            case AuthServiceExceptions.AdminFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.UserFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.InvalidToken:\n                                throw new UnauthorizedException(\"Invalid token\")\n\n                            case AuthServiceExceptions.TokenExpired:\n                                throw new UnauthorizedException(\"Token expired\")\n                            \n                            case AuthServiceExceptions.TokenNotFound:\n                                throw new UnauthorizedException(\"Token not found\")\n\n                            default:\n                                throw err\n                        }\n                    }\n                )\n            )\n    }\n}\n\n/**\n * exception filter for auth controller\n *\n * @export\n * @class AllAuthServiceExceptionsFilter\n * @implements {ExceptionFilter}\n */\n@Catch()\nexport class AllAuthServiceExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllAuthServiceExceptionsFilter.\n     * @param {HttpAdapterHost} httpAdapterHost\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    constructor(\n        private readonly httpAdapterHost: HttpAdapterHost,\n    ) {}\n\n    /**\n     * catch exception and return http exception status code\n     *\n     * @param {*} exception\n     * @param {ArgumentsHost} host\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    catch(exception: any, host: ArgumentsHost) {\n        const {httpAdapter} = this.httpAdapterHost\n        const ctx = host.switchToHttp()\n\n        let resp: string | object\n        let statusCode: number\n\n        if(exception instanceof HttpException) {\n            resp = exception.getResponse()\n            statusCode = exception.getStatus()\n        } else {\n            const newExpection = this.switchError(exception)\n            resp = newExpection.getResponse()\n            statusCode = newExpection.getStatus()\n        }\n\n        httpAdapter.reply(ctx.getResponse(), resp, statusCode)\n    }\n\n    /**\n     * switch error to decode it to http exception\n     *\n     * @private\n     * @param {*} e\n     * @return {*}  {HttpException}\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    private switchError(e: any): HttpException {\n        switch(e) {\n            case AuthServiceExceptions.UserExist:\n                return new BadRequestException(\"User Exist\")\n\n            case AuthServiceExceptions.UserNotFound:\n                return new NotFoundException(\"User not found\")\n\n            case AuthServiceExceptions.AdminExist:\n                return new BadRequestException(\"Admin Exist\")\n\n            case AuthServiceExceptions.AdminFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.UserFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.InvalidToken:\n                return new UnauthorizedException(\"Invalid token\")\n\n            case AuthServiceExceptions.TokenExpired:\n                return new UnauthorizedException(\"Token expired\")\n            \n            case AuthServiceExceptions.TokenNotFound:\n                return new UnauthorizedException(\"Token not found\")\n        }\n    }\n}\n\n/**\n *\n * class responce for http controller of working with auth\n * @export\n * @class AuthController\n */\n@UseInterceptors(AuthControllerEdrrorInterceptor)\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    /**\n     * Creates an instance of AuthController.\n     * @param {AuthService} authService\n     * @memberof AuthController\n     */\n    constructor(private readonly authService: AuthService) {}\n\n    /**\n     * create user\n     *\n     * @param {CreateUserDto} createUserDto\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post('/user')\n    @ApiOperation({summary: \"Create user\",})\n    @ApiResponse({status: 400, description: \"User exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"User created\", type: UserCreateResp})\n    @ApiBody({type: CreateUserDto})\n    @ApiBearerAuth()\n    async createUser(@Body() createUserDto: CreateUserDto): Promise {\n        return new UserCreateResp(await this.authService.createUser(createUserDto))\n    }\n\n    /**\n     * delete user\n     *\n     * @param {number} id\n     * @memberof AuthController\n     */\n    @Delete('/user/:id')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Delete user\"})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 200, description: \"User deleted\"})\n    @ApiParam({type: Number, description: \"id of user\", name: \"id\"})\n    @ApiBearerAuth()\n    async deleteUser(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteUser(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"User not found\")\n        }\n    }\n\n    /**\n     * return list of users\n     *\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Get('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"get users\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetUsersResp]})\n    @ApiBearerAuth()\n    async getUsers(): Promise {\n        return (await this.authService.getUsers()).map(\n            (user) => {\n                return new GetUsersResp(user)\n            }\n        )\n    }\n\n    /**\n     * return user by id\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Get('/user/:id')\n    @ApiOperation({summary: \"get user\"})\n    @ApiResponse({status: 200, description: \"\", type: GetUsersResp})\n    @ApiParam({name: 'id', type: () => Number, required: true})\n    @ApiBearerAuth()\n    async getUser(\n        @Param('id') id: number\n    ) {\n        const user = await this.authService.getUser(id)\n        if(!user) {\n            throw new NotFoundException('User not found')\n        }\n        return new GetUsersResp(user)\n    }\n\n    /**\n     * update user by id\n     *\n     * @param {number} id\n     * @param {UpdateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Put(\"/user/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update user\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of user\"})\n    @ApiBody({type: UpdateUserDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"user updatet\", type: GetUsersResp})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 400, description: \"User with this phone number exist\"})\n    @ApiBearerAuth()\n    async updateUser(@Param(\"id\") id: number, @Body() req: UpdateUserDto): Promise {\n        return new GetUsersResp(await this.authService.updateUser(id, req))\n    }\n\n    /**\n     * create admin\n     *\n     * @param {CreateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"create admin\"})\n    @ApiResponse({status: 400, description: \"admin exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"Admin created\", type: CreateAdminResp})\n    @ApiBody({type: CreateAdminDto})\n    @ApiBearerAuth()\n    async createAdmin(@Body() req: CreateAdminDto): Promise {\n        return new CreateAdminResp(await this.authService.createAdmin(req))\n    }\n\n    /**\n     * update admin by id\n     *\n     * @param {number} id\n     * @param {UpdateAdminDto} req\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Put(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update admin\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of admin\"})\n    @ApiBody({type: UpdateAdminDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"admin updated\", type: GetAdminResp})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 400, description: \"Admin with this email bad request\"})\n    @ApiBearerAuth()\n    async updateAdmin(@Param(\"id\") id: number, @Body() req: UpdateAdminDto) {\n        return new GetAdminResp(await this.authService.updateAdmin(id, req))\n    }\n\n    /**\n     * delete admin by id\n     *\n     * @param {number} id\n     * @memberof AuthController\n     */\n    @Delete(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"delete admin\"})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 200, description: \"Admin deleted\"})\n    @ApiParam({type: Number, description: \"id of admin\", name: 'id'})\n    @ApiBearerAuth()\n    async deleteAdmin(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteAdmin(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"Admin not found\")\n        }\n    }\n\n    /**\n     *\n     * return list of admins\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Get(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Get admins\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetAdminResp]})\n    @ApiBearerAuth()\n    async getAdmins(): Promise {\n        return (await this.authService.getAdmins()).map(\n            (admin) => {\n                return new GetAdminResp(admin)\n            }\n        )\n    }\n\n    /**\n     * test method to get sms code\n     *\n     * @param {*} phone\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Post(\"/testSms/:phone\")\n    @ApiParam({name: \"phone\", type: String})\n    @ApiProduces('text/plain')\n    @ApiResponse({type: String})\n    async createSms(@Param(\"phone\") phone) {\n        return await this.authService.createSmsCode(phone)\n    }\n\n    /**\n     * login admin\n     *\n     * @param {LoginAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/admin/login\")\n    @ApiResponse({type: CreateTokenResp, status: 201})\n    @ApiResponse({status: 400, description: \"failed auth\"})\n    @ApiBody({type: LoginAdminDto, description: \"body\"})\n    async loginAdmin(@Body() req: LoginAdminDto): Promise {\n        const tokens = await this.authService.loginAdmin(req.email, req.password)\n\n        return tokens\n    }\n    \n    /**\n     * login user\n     *\n     * @param {LoginUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/user/login\")\n    @ApiBody({type: LoginUserDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 400, description: \"failed to auth\"})\n    async loginUser(@Body() req: LoginUserDto): Promise {\n        const tokens = await this.authService.loginUser(req.phoneNumber, req.code)\n\n        return tokens\n    }\n\n    /**\n     * check token \n     *\n     * @param {CheckTokenDto} req\n     * @memberof AuthController\n     */\n    @Post(\"/checkToken\")\n    @ApiBody({type: CheckTokenDto})\n    @ApiResponse({status: 200})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    @HttpCode(200)\n    async checkToken(@Body() req: CheckTokenDto) {\n        this.authService.decodeToken(req.token)\n    }\n\n    /**\n     * refresh token\n     *\n     * @param {RefreshTokenDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/refreshToken\")\n    @ApiBody({type: RefreshTokenDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    async refreshToken(@Body() req: RefreshTokenDto): Promise {\n        return this.authService.refreshToken(req.refreshToken)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n      ConfigModule.forRoot(\n          {\n              isGlobal: true,\n          }\n      ),\n      TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            useFactory: (configService: ConfigService) => ({\n                type: \"postgres\",\n                autoLoadEntities: true,\n                synchronize: true,\n                url: configService.get(\"IDENTY_DATABASE_URI\")\n            }),\n            inject: [ConfigService]\n      }),\n      AuthModule,\n      \n    ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                class responce for http controller of working with auth\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkToken\n                            \n                            \n                                    Async\n                                createAdmin\n                            \n                            \n                                    Async\n                                createSms\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteAdmin\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAdmins\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                loginAdmin\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                updateAdmin\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: CheckTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkToken')@ApiBody({type: CheckTokenDto})@ApiResponse({status: 200})@ApiResponse({status: 401, description: 'Not Authorizated'})@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:422\n                \n            \n\n\n            \n                \n                    check token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CheckTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAdmin(req: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/admin')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'create admin'})@ApiResponse({status: 400, description: 'admin exist'})@ApiResponse({status: 403, description: 'You are not admin'})@ApiResponse({status: 201, description: 'Admin created', type: CreateAdminResp})@ApiBody({type: CreateAdminDto})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:295\n                \n            \n\n\n            \n                \n                    create admin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CreateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createSms\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSms(phone)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/testSms/:phone')@ApiParam({name: 'phone', type: String})@ApiProduces('text/plain')@ApiResponse({type: String})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:373\n                \n            \n\n\n            \n                \n                    test method to get sms code\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/user')@ApiOperation({summary: 'Create user'})@ApiResponse({status: 400, description: 'User exist'})@ApiResponse({status: 403, description: 'You are not admin'})@ApiResponse({status: 201, description: 'User created', type: UserCreateResp})@ApiBody({type: CreateUserDto})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:190\n                \n            \n\n\n            \n                \n                    create user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAdmin(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/admin/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'delete admin'})@ApiResponse({status: 404, description: 'Admin not found'})@ApiResponse({status: 200, description: 'Admin deleted'})@ApiParam({type: Number, description: 'id of admin', name: 'id'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:335\n                \n            \n\n\n            \n                \n                    delete admin by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/user/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'Delete user'})@ApiResponse({status: 404, description: 'User not found'})@ApiResponse({status: 200, description: 'User deleted'})@ApiParam({type: Number, description: 'id of user', name: 'id'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:208\n                \n            \n\n\n            \n                \n                    delete user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAdmins\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdmins()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/admin')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'Get admins'})@ApiResponse({status: 200, description: '', type: undefined})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:354\n                \n            \n\n\n            \n                \n                    return list of admins\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id')@ApiOperation({summary: 'get user'})@ApiResponse({status: 200, description: '', type: GetUsersResp})@ApiParam({name: 'id', type: () => Number, required: true})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:247\n                \n            \n\n\n            \n                \n                    return user by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'get users'})@ApiResponse({status: 200, description: '', type: undefined})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:227\n                \n            \n\n\n            \n                \n                    return list of users\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginAdmin(req: LoginAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/admin/login')@ApiResponse({type: CreateTokenResp, status: 201})@ApiResponse({status: 400, description: 'failed auth'})@ApiBody({type: LoginAdminDto, description: 'body'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:388\n                \n            \n\n\n            \n                \n                    login admin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                LoginAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(req: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/user/login')@ApiBody({type: LoginUserDto})@ApiResponse({status: 201, type: CreateTokenResp})@ApiResponse({status: 400, description: 'failed to auth'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:405\n                \n            \n\n\n            \n                \n                    login user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(req: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refreshToken')@ApiBody({type: RefreshTokenDto})@ApiResponse({status: 201, type: CreateTokenResp})@ApiResponse({status: 401, description: 'Not Authorizated'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:437\n                \n            \n\n\n            \n                \n                    refresh token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAdmin(id: number, req: UpdateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/admin/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'update admin'})@ApiParam({type: Number, name: 'id', description: 'id of admin'})@ApiBody({type: UpdateAdminDto, description: 'body'})@ApiResponse({status: 200, description: 'admin updated', type: GetAdminResp})@ApiResponse({status: 404, description: 'Admin not found'})@ApiResponse({status: 400, description: 'Admin with this email bad request'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:317\n                \n            \n\n\n            \n                \n                    update admin by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                UpdateAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, req: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/user/:id')@Roles(Role.Admin)@UseGuards(RolesGuard)@ApiOperation({summary: 'update user'})@ApiParam({type: Number, name: 'id', description: 'id of user'})@ApiBody({type: UpdateUserDto, description: 'body'})@ApiResponse({status: 200, description: 'user updatet', type: GetUsersResp})@ApiResponse({status: 404, description: 'User not found'})@ApiResponse({status: 400, description: 'User with this phone number exist'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:275\n                \n            \n\n\n            \n                \n                    update user by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ArgumentsHost, BadRequestException, Body, CallHandler, Catch, Controller, Delete, ExceptionFilter, ExecutionContext, Get, HttpCode, NestInterceptor, NotFoundException, Param, Post, Put, UseFilters, UseInterceptors,  UnauthorizedException, UseGuards, HttpException, HttpStatus} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiProduces, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport e = require('express');\nimport { catchError, Observable } from 'rxjs';\nimport { AuthService, AuthServiceExceptions } from './auth.service';\nimport { CreateUserDto, UserCreateResp } from './dto';\nimport { CheckTokenDto } from './dto/check-token.dto';\nimport { CreateAdminDto, CreateAdminResp } from './dto/create-admin.dto';\nimport { CreateTokenResp } from './dto/create-token.dto';\nimport { GetAdminResp } from './dto/get-admin.dto';\nimport { GetUsersResp } from './dto/get-user.dto';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entity';\nimport { Role } from './roles';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\n/**\n * Interceptor to catch auth errors\n *\n * @class AuthControllerEdrrorInterceptor\n * @implements {NestInterceptor}\n */\nclass AuthControllerEdrrorInterceptor implements NestInterceptor {\n    /**\n     * interceptor to transorm error to exception\n     *\n     * @param {ExecutionContext} context\n     * @param {CallHandler} next\n     * @return {*}  {(Observable | Promise>)}\n     * @memberof AuthControllerEdrrorInterceptor\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable | Promise> {\n        return next.handle()\n            .pipe(\n                catchError(\n                    (err: any) => {\n                        console.log(\"Interceptor\")\n                        switch(err) {\n                            case AuthServiceExceptions.UserExist:\n                                throw new BadRequestException(\"User Exist\")\n\n                            case AuthServiceExceptions.UserNotFound:\n                                throw new NotFoundException(\"User not found\")\n\n                            case AuthServiceExceptions.AdminExist:\n                                throw new BadRequestException(\"Admin Exist\")\n\n                            case AuthServiceExceptions.AdminFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.UserFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.InvalidToken:\n                                throw new UnauthorizedException(\"Invalid token\")\n\n                            case AuthServiceExceptions.TokenExpired:\n                                throw new UnauthorizedException(\"Token expired\")\n                            \n                            case AuthServiceExceptions.TokenNotFound:\n                                throw new UnauthorizedException(\"Token not found\")\n\n                            default:\n                                throw err\n                        }\n                    }\n                )\n            )\n    }\n}\n\n/**\n * exception filter for auth controller\n *\n * @export\n * @class AllAuthServiceExceptionsFilter\n * @implements {ExceptionFilter}\n */\n@Catch()\nexport class AllAuthServiceExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllAuthServiceExceptionsFilter.\n     * @param {HttpAdapterHost} httpAdapterHost\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    constructor(\n        private readonly httpAdapterHost: HttpAdapterHost,\n    ) {}\n\n    /**\n     * catch exception and return http exception status code\n     *\n     * @param {*} exception\n     * @param {ArgumentsHost} host\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    catch(exception: any, host: ArgumentsHost) {\n        const {httpAdapter} = this.httpAdapterHost\n        const ctx = host.switchToHttp()\n\n        let resp: string | object\n        let statusCode: number\n\n        if(exception instanceof HttpException) {\n            resp = exception.getResponse()\n            statusCode = exception.getStatus()\n        } else {\n            const newExpection = this.switchError(exception)\n            resp = newExpection.getResponse()\n            statusCode = newExpection.getStatus()\n        }\n\n        httpAdapter.reply(ctx.getResponse(), resp, statusCode)\n    }\n\n    /**\n     * switch error to decode it to http exception\n     *\n     * @private\n     * @param {*} e\n     * @return {*}  {HttpException}\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    private switchError(e: any): HttpException {\n        switch(e) {\n            case AuthServiceExceptions.UserExist:\n                return new BadRequestException(\"User Exist\")\n\n            case AuthServiceExceptions.UserNotFound:\n                return new NotFoundException(\"User not found\")\n\n            case AuthServiceExceptions.AdminExist:\n                return new BadRequestException(\"Admin Exist\")\n\n            case AuthServiceExceptions.AdminFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.UserFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.InvalidToken:\n                return new UnauthorizedException(\"Invalid token\")\n\n            case AuthServiceExceptions.TokenExpired:\n                return new UnauthorizedException(\"Token expired\")\n            \n            case AuthServiceExceptions.TokenNotFound:\n                return new UnauthorizedException(\"Token not found\")\n        }\n    }\n}\n\n/**\n *\n * class responce for http controller of working with auth\n * @export\n * @class AuthController\n */\n@UseInterceptors(AuthControllerEdrrorInterceptor)\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    /**\n     * Creates an instance of AuthController.\n     * @param {AuthService} authService\n     * @memberof AuthController\n     */\n    constructor(private readonly authService: AuthService) {}\n\n    /**\n     * create user\n     *\n     * @param {CreateUserDto} createUserDto\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post('/user')\n    @ApiOperation({summary: \"Create user\",})\n    @ApiResponse({status: 400, description: \"User exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"User created\", type: UserCreateResp})\n    @ApiBody({type: CreateUserDto})\n    @ApiBearerAuth()\n    async createUser(@Body() createUserDto: CreateUserDto): Promise {\n        return new UserCreateResp(await this.authService.createUser(createUserDto))\n    }\n\n    /**\n     * delete user\n     *\n     * @param {number} id\n     * @memberof AuthController\n     */\n    @Delete('/user/:id')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Delete user\"})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 200, description: \"User deleted\"})\n    @ApiParam({type: Number, description: \"id of user\", name: \"id\"})\n    @ApiBearerAuth()\n    async deleteUser(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteUser(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"User not found\")\n        }\n    }\n\n    /**\n     * return list of users\n     *\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Get('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"get users\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetUsersResp]})\n    @ApiBearerAuth()\n    async getUsers(): Promise {\n        return (await this.authService.getUsers()).map(\n            (user) => {\n                return new GetUsersResp(user)\n            }\n        )\n    }\n\n    /**\n     * return user by id\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Get('/user/:id')\n    @ApiOperation({summary: \"get user\"})\n    @ApiResponse({status: 200, description: \"\", type: GetUsersResp})\n    @ApiParam({name: 'id', type: () => Number, required: true})\n    @ApiBearerAuth()\n    async getUser(\n        @Param('id') id: number\n    ) {\n        const user = await this.authService.getUser(id)\n        if(!user) {\n            throw new NotFoundException('User not found')\n        }\n        return new GetUsersResp(user)\n    }\n\n    /**\n     * update user by id\n     *\n     * @param {number} id\n     * @param {UpdateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Put(\"/user/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update user\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of user\"})\n    @ApiBody({type: UpdateUserDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"user updatet\", type: GetUsersResp})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 400, description: \"User with this phone number exist\"})\n    @ApiBearerAuth()\n    async updateUser(@Param(\"id\") id: number, @Body() req: UpdateUserDto): Promise {\n        return new GetUsersResp(await this.authService.updateUser(id, req))\n    }\n\n    /**\n     * create admin\n     *\n     * @param {CreateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"create admin\"})\n    @ApiResponse({status: 400, description: \"admin exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"Admin created\", type: CreateAdminResp})\n    @ApiBody({type: CreateAdminDto})\n    @ApiBearerAuth()\n    async createAdmin(@Body() req: CreateAdminDto): Promise {\n        return new CreateAdminResp(await this.authService.createAdmin(req))\n    }\n\n    /**\n     * update admin by id\n     *\n     * @param {number} id\n     * @param {UpdateAdminDto} req\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Put(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update admin\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of admin\"})\n    @ApiBody({type: UpdateAdminDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"admin updated\", type: GetAdminResp})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 400, description: \"Admin with this email bad request\"})\n    @ApiBearerAuth()\n    async updateAdmin(@Param(\"id\") id: number, @Body() req: UpdateAdminDto) {\n        return new GetAdminResp(await this.authService.updateAdmin(id, req))\n    }\n\n    /**\n     * delete admin by id\n     *\n     * @param {number} id\n     * @memberof AuthController\n     */\n    @Delete(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"delete admin\"})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 200, description: \"Admin deleted\"})\n    @ApiParam({type: Number, description: \"id of admin\", name: 'id'})\n    @ApiBearerAuth()\n    async deleteAdmin(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteAdmin(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"Admin not found\")\n        }\n    }\n\n    /**\n     *\n     * return list of admins\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Get(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Get admins\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetAdminResp]})\n    @ApiBearerAuth()\n    async getAdmins(): Promise {\n        return (await this.authService.getAdmins()).map(\n            (admin) => {\n                return new GetAdminResp(admin)\n            }\n        )\n    }\n\n    /**\n     * test method to get sms code\n     *\n     * @param {*} phone\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Post(\"/testSms/:phone\")\n    @ApiParam({name: \"phone\", type: String})\n    @ApiProduces('text/plain')\n    @ApiResponse({type: String})\n    async createSms(@Param(\"phone\") phone) {\n        return await this.authService.createSmsCode(phone)\n    }\n\n    /**\n     * login admin\n     *\n     * @param {LoginAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/admin/login\")\n    @ApiResponse({type: CreateTokenResp, status: 201})\n    @ApiResponse({status: 400, description: \"failed auth\"})\n    @ApiBody({type: LoginAdminDto, description: \"body\"})\n    async loginAdmin(@Body() req: LoginAdminDto): Promise {\n        const tokens = await this.authService.loginAdmin(req.email, req.password)\n\n        return tokens\n    }\n    \n    /**\n     * login user\n     *\n     * @param {LoginUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/user/login\")\n    @ApiBody({type: LoginUserDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 400, description: \"failed to auth\"})\n    async loginUser(@Body() req: LoginUserDto): Promise {\n        const tokens = await this.authService.loginUser(req.phoneNumber, req.code)\n\n        return tokens\n    }\n\n    /**\n     * check token \n     *\n     * @param {CheckTokenDto} req\n     * @memberof AuthController\n     */\n    @Post(\"/checkToken\")\n    @ApiBody({type: CheckTokenDto})\n    @ApiResponse({status: 200})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    @HttpCode(200)\n    async checkToken(@Body() req: CheckTokenDto) {\n        this.authService.decodeToken(req.token)\n    }\n\n    /**\n     * refresh token\n     *\n     * @param {RefreshTokenDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/refreshToken\")\n    @ApiBody({type: RefreshTokenDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    async refreshToken(@Body() req: RefreshTokenDto): Promise {\n        return this.authService.refreshToken(req.refreshToken)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthControllerEdrrorInterceptor.html":{"url":"classes/AuthControllerEdrrorInterceptor.html","title":"class - AuthControllerEdrrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthControllerEdrrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to catch auth errors\n\n            \n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n                    interceptor to transorm error to exception\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        {(Observable | Promise>)}\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, BadRequestException, Body, CallHandler, Catch, Controller, Delete, ExceptionFilter, ExecutionContext, Get, HttpCode, NestInterceptor, NotFoundException, Param, Post, Put, UseFilters, UseInterceptors,  UnauthorizedException, UseGuards, HttpException, HttpStatus} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiParam, ApiProduces, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport e = require('express');\nimport { catchError, Observable } from 'rxjs';\nimport { AuthService, AuthServiceExceptions } from './auth.service';\nimport { CreateUserDto, UserCreateResp } from './dto';\nimport { CheckTokenDto } from './dto/check-token.dto';\nimport { CreateAdminDto, CreateAdminResp } from './dto/create-admin.dto';\nimport { CreateTokenResp } from './dto/create-token.dto';\nimport { GetAdminResp } from './dto/get-admin.dto';\nimport { GetUsersResp } from './dto/get-user.dto';\nimport { LoginAdminDto } from './dto/login-admin.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { RefreshTokenDto } from './dto/refresh-token.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entity';\nimport { Role } from './roles';\nimport { Roles } from './roles.decorator';\nimport { RolesGuard } from './roles.guard';\n\n/**\n * Interceptor to catch auth errors\n *\n * @class AuthControllerEdrrorInterceptor\n * @implements {NestInterceptor}\n */\nclass AuthControllerEdrrorInterceptor implements NestInterceptor {\n    /**\n     * interceptor to transorm error to exception\n     *\n     * @param {ExecutionContext} context\n     * @param {CallHandler} next\n     * @return {*}  {(Observable | Promise>)}\n     * @memberof AuthControllerEdrrorInterceptor\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable | Promise> {\n        return next.handle()\n            .pipe(\n                catchError(\n                    (err: any) => {\n                        console.log(\"Interceptor\")\n                        switch(err) {\n                            case AuthServiceExceptions.UserExist:\n                                throw new BadRequestException(\"User Exist\")\n\n                            case AuthServiceExceptions.UserNotFound:\n                                throw new NotFoundException(\"User not found\")\n\n                            case AuthServiceExceptions.AdminExist:\n                                throw new BadRequestException(\"Admin Exist\")\n\n                            case AuthServiceExceptions.AdminFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.UserFailedAuth:\n                                throw new BadRequestException(\"Failed to auth\")\n\n                            case AuthServiceExceptions.InvalidToken:\n                                throw new UnauthorizedException(\"Invalid token\")\n\n                            case AuthServiceExceptions.TokenExpired:\n                                throw new UnauthorizedException(\"Token expired\")\n                            \n                            case AuthServiceExceptions.TokenNotFound:\n                                throw new UnauthorizedException(\"Token not found\")\n\n                            default:\n                                throw err\n                        }\n                    }\n                )\n            )\n    }\n}\n\n/**\n * exception filter for auth controller\n *\n * @export\n * @class AllAuthServiceExceptionsFilter\n * @implements {ExceptionFilter}\n */\n@Catch()\nexport class AllAuthServiceExceptionsFilter implements ExceptionFilter {\n    /**\n     * Creates an instance of AllAuthServiceExceptionsFilter.\n     * @param {HttpAdapterHost} httpAdapterHost\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    constructor(\n        private readonly httpAdapterHost: HttpAdapterHost,\n    ) {}\n\n    /**\n     * catch exception and return http exception status code\n     *\n     * @param {*} exception\n     * @param {ArgumentsHost} host\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    catch(exception: any, host: ArgumentsHost) {\n        const {httpAdapter} = this.httpAdapterHost\n        const ctx = host.switchToHttp()\n\n        let resp: string | object\n        let statusCode: number\n\n        if(exception instanceof HttpException) {\n            resp = exception.getResponse()\n            statusCode = exception.getStatus()\n        } else {\n            const newExpection = this.switchError(exception)\n            resp = newExpection.getResponse()\n            statusCode = newExpection.getStatus()\n        }\n\n        httpAdapter.reply(ctx.getResponse(), resp, statusCode)\n    }\n\n    /**\n     * switch error to decode it to http exception\n     *\n     * @private\n     * @param {*} e\n     * @return {*}  {HttpException}\n     * @memberof AllAuthServiceExceptionsFilter\n     */\n    private switchError(e: any): HttpException {\n        switch(e) {\n            case AuthServiceExceptions.UserExist:\n                return new BadRequestException(\"User Exist\")\n\n            case AuthServiceExceptions.UserNotFound:\n                return new NotFoundException(\"User not found\")\n\n            case AuthServiceExceptions.AdminExist:\n                return new BadRequestException(\"Admin Exist\")\n\n            case AuthServiceExceptions.AdminFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.UserFailedAuth:\n                return new BadRequestException(\"Failed to auth\")\n\n            case AuthServiceExceptions.InvalidToken:\n                return new UnauthorizedException(\"Invalid token\")\n\n            case AuthServiceExceptions.TokenExpired:\n                return new UnauthorizedException(\"Token expired\")\n            \n            case AuthServiceExceptions.TokenNotFound:\n                return new UnauthorizedException(\"Token not found\")\n        }\n    }\n}\n\n/**\n *\n * class responce for http controller of working with auth\n * @export\n * @class AuthController\n */\n@UseInterceptors(AuthControllerEdrrorInterceptor)\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    /**\n     * Creates an instance of AuthController.\n     * @param {AuthService} authService\n     * @memberof AuthController\n     */\n    constructor(private readonly authService: AuthService) {}\n\n    /**\n     * create user\n     *\n     * @param {CreateUserDto} createUserDto\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post('/user')\n    @ApiOperation({summary: \"Create user\",})\n    @ApiResponse({status: 400, description: \"User exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"User created\", type: UserCreateResp})\n    @ApiBody({type: CreateUserDto})\n    @ApiBearerAuth()\n    async createUser(@Body() createUserDto: CreateUserDto): Promise {\n        return new UserCreateResp(await this.authService.createUser(createUserDto))\n    }\n\n    /**\n     * delete user\n     *\n     * @param {number} id\n     * @memberof AuthController\n     */\n    @Delete('/user/:id')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Delete user\"})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 200, description: \"User deleted\"})\n    @ApiParam({type: Number, description: \"id of user\", name: \"id\"})\n    @ApiBearerAuth()\n    async deleteUser(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteUser(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"User not found\")\n        }\n    }\n\n    /**\n     * return list of users\n     *\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Get('/user')\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"get users\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetUsersResp]})\n    @ApiBearerAuth()\n    async getUsers(): Promise {\n        return (await this.authService.getUsers()).map(\n            (user) => {\n                return new GetUsersResp(user)\n            }\n        )\n    }\n\n    /**\n     * return user by id\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Get('/user/:id')\n    @ApiOperation({summary: \"get user\"})\n    @ApiResponse({status: 200, description: \"\", type: GetUsersResp})\n    @ApiParam({name: 'id', type: () => Number, required: true})\n    @ApiBearerAuth()\n    async getUser(\n        @Param('id') id: number\n    ) {\n        const user = await this.authService.getUser(id)\n        if(!user) {\n            throw new NotFoundException('User not found')\n        }\n        return new GetUsersResp(user)\n    }\n\n    /**\n     * update user by id\n     *\n     * @param {number} id\n     * @param {UpdateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Put(\"/user/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update user\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of user\"})\n    @ApiBody({type: UpdateUserDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"user updatet\", type: GetUsersResp})\n    @ApiResponse({status: 404, description: \"User not found\"})\n    @ApiResponse({status: 400, description: \"User with this phone number exist\"})\n    @ApiBearerAuth()\n    async updateUser(@Param(\"id\") id: number, @Body() req: UpdateUserDto): Promise {\n        return new GetUsersResp(await this.authService.updateUser(id, req))\n    }\n\n    /**\n     * create admin\n     *\n     * @param {CreateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"create admin\"})\n    @ApiResponse({status: 400, description: \"admin exist\"})\n    @ApiResponse({status: 403, description: \"You are not admin\"})\n    @ApiResponse({status: 201, description: \"Admin created\", type: CreateAdminResp})\n    @ApiBody({type: CreateAdminDto})\n    @ApiBearerAuth()\n    async createAdmin(@Body() req: CreateAdminDto): Promise {\n        return new CreateAdminResp(await this.authService.createAdmin(req))\n    }\n\n    /**\n     * update admin by id\n     *\n     * @param {number} id\n     * @param {UpdateAdminDto} req\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Put(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"update admin\"})\n    @ApiParam({type: Number, name: \"id\", description: \"id of admin\"})\n    @ApiBody({type: UpdateAdminDto, description: \"body\"})\n    @ApiResponse({status: 200, description: \"admin updated\", type: GetAdminResp})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 400, description: \"Admin with this email bad request\"})\n    @ApiBearerAuth()\n    async updateAdmin(@Param(\"id\") id: number, @Body() req: UpdateAdminDto) {\n        return new GetAdminResp(await this.authService.updateAdmin(id, req))\n    }\n\n    /**\n     * delete admin by id\n     *\n     * @param {number} id\n     * @memberof AuthController\n     */\n    @Delete(\"/admin/:id\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"delete admin\"})\n    @ApiResponse({status: 404, description: \"Admin not found\"})\n    @ApiResponse({status: 200, description: \"Admin deleted\"})\n    @ApiParam({type: Number, description: \"id of admin\", name: 'id'})\n    @ApiBearerAuth()\n    async deleteAdmin(@Param('id') id: number) {\n        const isDeleted = await this.authService.deleteAdmin(id)\n        if(!isDeleted) {\n            throw new NotFoundException(\"Admin not found\")\n        }\n    }\n\n    /**\n     *\n     * return list of admins\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Get(\"/admin\")\n    @Roles(Role.Admin)\n    @UseGuards(RolesGuard)\n    @ApiOperation({summary: \"Get admins\"})\n    @ApiResponse({status: 200, description: \"\", type: [GetAdminResp]})\n    @ApiBearerAuth()\n    async getAdmins(): Promise {\n        return (await this.authService.getAdmins()).map(\n            (admin) => {\n                return new GetAdminResp(admin)\n            }\n        )\n    }\n\n    /**\n     * test method to get sms code\n     *\n     * @param {*} phone\n     * @return {*} \n     * @memberof AuthController\n     */\n    @Post(\"/testSms/:phone\")\n    @ApiParam({name: \"phone\", type: String})\n    @ApiProduces('text/plain')\n    @ApiResponse({type: String})\n    async createSms(@Param(\"phone\") phone) {\n        return await this.authService.createSmsCode(phone)\n    }\n\n    /**\n     * login admin\n     *\n     * @param {LoginAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/admin/login\")\n    @ApiResponse({type: CreateTokenResp, status: 201})\n    @ApiResponse({status: 400, description: \"failed auth\"})\n    @ApiBody({type: LoginAdminDto, description: \"body\"})\n    async loginAdmin(@Body() req: LoginAdminDto): Promise {\n        const tokens = await this.authService.loginAdmin(req.email, req.password)\n\n        return tokens\n    }\n    \n    /**\n     * login user\n     *\n     * @param {LoginUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/user/login\")\n    @ApiBody({type: LoginUserDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 400, description: \"failed to auth\"})\n    async loginUser(@Body() req: LoginUserDto): Promise {\n        const tokens = await this.authService.loginUser(req.phoneNumber, req.code)\n\n        return tokens\n    }\n\n    /**\n     * check token \n     *\n     * @param {CheckTokenDto} req\n     * @memberof AuthController\n     */\n    @Post(\"/checkToken\")\n    @ApiBody({type: CheckTokenDto})\n    @ApiResponse({status: 200})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    @HttpCode(200)\n    async checkToken(@Body() req: CheckTokenDto) {\n        this.authService.decodeToken(req.token)\n    }\n\n    /**\n     * refresh token\n     *\n     * @param {RefreshTokenDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthController\n     */\n    @Post(\"/refreshToken\")\n    @ApiBody({type: RefreshTokenDto})\n    @ApiResponse({status: 201, type: CreateTokenResp})\n    @ApiResponse({status: 401, description: \"Not Authorizated\"})\n    async refreshToken(@Body() req: RefreshTokenDto): Promise {\n        return this.authService.refreshToken(req.refreshToken)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Auth module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport {Admin, BaseUser, User} from './entity'\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UserSmsCode } from './entity/user_sms_code.entity';\nimport { RolesGuard } from './roles.guard';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\n\n/**\n * Auth module\n *\n * @export\n * @class AuthModule\n */\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([BaseUser, User, Admin, UserSmsCode]),\n        ConfigModule,\n    ],\n    providers: [AuthService, RolesGuard],\n    controllers: [AuthController]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BaseUser.html":{"url":"entities/BaseUser.html","title":"entity - BaseUser","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BaseUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/baseuser.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                base user entity representaion\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/baseuser.entity.ts:18\n                        \n                    \n\n            \n                \n                    id of user\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {Entity, PrimaryGeneratedColumn} from 'typeorm';\n\n/**\n * base user entity representaion\n *\n * @export\n * @class BaseUser\n */\n@Entity({name: \"BaseUser\"})\nexport class BaseUser {\n    /**\n     * id of user\n     *\n     * @type {number}\n     * @memberof BaseUser\n     */\n    @PrimaryGeneratedColumn()\n    id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckTokenDto.html":{"url":"classes/CheckTokenDto.html","title":"class - CheckTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/check-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                check token body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA'})@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/check-token.dto.ts:23\n                        \n                    \n\n            \n                \n                    jwt token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsJWT } from \"class-validator\";\n\n/**\n * check token body\n *\n * @export\n * @class CheckTokenDto\n */\nexport class CheckTokenDto {\n    /**\n     * jwt token\n     *\n     * @type {string}\n     * @memberof CheckTokenDto\n     */\n    @ApiProperty(\n        {\n            example: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA\"\n        }\n    )\n    @IsJWT()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-admin.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                create admin req body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user.name@example.com'})@IsEmail({}, {message: 'email is not valid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:19\n                        \n                    \n\n            \n                \n                    email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty'})@IsString({message: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:29\n                        \n                    \n\n            \n                \n                    password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString } from \"class-validator\";\n\n/**\n * create admin req body\n *\n * @export\n * @class CreateAdminDto\n */\nexport class CreateAdminDto {\n    /**\n     * email\n     *\n     * @type {string}\n     * @memberof CreateAdminDto\n     */\n    @ApiProperty({example: \"user.name@example.com\"})\n    @IsEmail({},{message: \"email is not valid\"})\n    email: string\n\n    /**\n     * password\n     *\n     * @type {string}\n     * @memberof CreateAdminDto\n     */\n    @ApiProperty({example: \"qwerty\"})\n    @IsString({message: \"\"})\n    password: string\n}\n\n/**\n * create admin responce\n *\n * @export\n * @class CreateAdminResp\n */\nexport class CreateAdminResp {\n    /**\n     * Creates an instance of CreateAdminResp.\n     * @param {{id: number, email: string}} admin\n     * @memberof CreateAdminResp\n     */\n    constructor(admin: {id: number, email: string}) {\n        this.id = admin.id\n        this.email = admin.email\n    }   \n    /**\n     * admin id\n     *\n     * @type {number}\n     * @memberof CreateAdminResp\n     */\n    @ApiProperty({example: 1})\n    id: number\n\n    /**\n     * admin email\n     *\n     * @type {string}\n     * @memberof CreateAdminResp\n     */\n    @ApiProperty({example: \"user.name@example.com\"})\n    email: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminResp.html":{"url":"classes/CreateAdminResp.html","title":"class - CreateAdminResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-admin.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                create admin responce\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(admin: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/create-admin.dto.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of CreateAdminResp.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        admin\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user.name@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:64\n                        \n                    \n\n            \n                \n                    admin email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-admin.dto.ts:55\n                        \n                    \n\n            \n                \n                    admin id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString } from \"class-validator\";\n\n/**\n * create admin req body\n *\n * @export\n * @class CreateAdminDto\n */\nexport class CreateAdminDto {\n    /**\n     * email\n     *\n     * @type {string}\n     * @memberof CreateAdminDto\n     */\n    @ApiProperty({example: \"user.name@example.com\"})\n    @IsEmail({},{message: \"email is not valid\"})\n    email: string\n\n    /**\n     * password\n     *\n     * @type {string}\n     * @memberof CreateAdminDto\n     */\n    @ApiProperty({example: \"qwerty\"})\n    @IsString({message: \"\"})\n    password: string\n}\n\n/**\n * create admin responce\n *\n * @export\n * @class CreateAdminResp\n */\nexport class CreateAdminResp {\n    /**\n     * Creates an instance of CreateAdminResp.\n     * @param {{id: number, email: string}} admin\n     * @memberof CreateAdminResp\n     */\n    constructor(admin: {id: number, email: string}) {\n        this.id = admin.id\n        this.email = admin.email\n    }   \n    /**\n     * admin id\n     *\n     * @type {number}\n     * @memberof CreateAdminResp\n     */\n    @ApiProperty({example: 1})\n    id: number\n\n    /**\n     * admin email\n     *\n     * @type {string}\n     * @memberof CreateAdminResp\n     */\n    @ApiProperty({example: \"user.name@example.com\"})\n    email: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTokenResp.html":{"url":"classes/CreateTokenResp.html","title":"class - CreateTokenResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTokenResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                create token responce\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-token.dto.ts:26\n                        \n                    \n\n            \n                \n                    jwt redresh token\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-token.dto.ts:17\n                        \n                    \n\n            \n                \n                    jwt access token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * create token responce\n *\n * @export\n * @class CreateTokenResp\n */\nexport class CreateTokenResp {\n    /**\n     * jwt access token\n     *\n     * @type {string}\n     * @memberof CreateTokenResp\n     */\n    @ApiProperty({example: \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg\"})\n    token: string\n\n    /**\n     * jwt redresh token\n     *\n     * @type {string}\n     * @memberof CreateTokenResp\n     */\n    @ApiProperty({example: \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg\"})\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Create user body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString({message: 'should be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    name of user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+7 (936) 134 14 24'})@IsPhoneNumber('RU')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    phoneNumber\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsPhoneNumber, IsString, Length } from \"class-validator\"\n\n/**\n * Create user body\n *\n * @export\n * @class CreateUserDto\n */\nexport class CreateUserDto {\n    /**\n     * phoneNumber\n     *\n     * @type {string}\n     * @memberof CreateUserDto\n     */\n    @ApiProperty({\n            example: \"+7 (936) 134 14 24\",\n    })\n    @IsPhoneNumber(\"RU\")\n    phoneNumber: string\n\n    /**\n     * name of user\n     *\n     * @type {string}\n     * @memberof CreateUserDto\n     */\n    @ApiProperty()\n    @IsString({message: \"should be a string\"})\n    name: string\n}\n\n\n/**\n * create user responce\n *\n * @export\n * @class UserCreateResp\n */\nexport class UserCreateResp {\n    /**\n     * Creates an instance of UserCreateResp.\n     * @param {{id: number, phoneNumber: string, name: string}} user\n     * @memberof UserCreateResp\n     */\n    constructor(user: {id: number, phoneNumber: string, name: string}) {\n        this.id = user.id\n        this.phoneNumber = user.phoneNumber\n        this.name = user.name\n    }\n\n    /**\n     * user id\n     *\n     * @type {number}\n     * @memberof UserCreateResp\n     */\n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    /**\n     * user phone nubmer\n     *\n     * @type {string}\n     * @memberof UserCreateResp\n     */\n    @ApiProperty({\n        example: \"81375461323\",\n    })\n    phoneNumber: string;\n\n    /**\n     * user name\n     *\n     * @type {string}\n     * @memberof UserCreateResp\n     */\n    @ApiProperty({\n        example: \"Some name\"\n    })\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatedToken.html":{"url":"interfaces/CreatedToken.html","title":"interface - CreatedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n            \n                Description\n            \n            \n                Created token type\n\n            \n\n            \n                Extends\n            \n            \n                        TokenInfo\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    jwt token in string represention\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\n/**\n * enum of experation status\n *\n * @export\n * @enum {number}\n */\nexport enum ExpirationStatus {\n    /**\n     * expired\n     */\n    Expired = \"expired\",\n    /**\n     * active\n     */\n    Active = \"active\"\n}\n\n/**\n * dedoce type enum show status of decode\n *\n * @export\n * @enum {number}\n */\nexport enum DecodeType {\n    /**\n     * valid\n     */\n    Valid = 1,\n    /**\n     * invalid\n     */\n    InvalidToken,\n    /**\n     * some error\n     */\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\n/**\n * token info type\n *\n * @interface TokenInfo\n */\ninterface TokenInfo {\n    /**\n     * show in what date token issued\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    issued: number\n    /**\n     * show in what date token expired\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    expires: number\n}\n\n/**\n * payload generic type\n *\n * @export\n * @interface Payload\n * @extends {TokenInfo}\n * @template T\n */\nexport interface Payload extends TokenInfo {\n    /**\n     * Payload \n     *\n     * @type {T}\n     * @memberof Payload\n     */\n    payload: T\n}\n\n/**\n * Created token type\n *\n * @export\n * @interface CreatedToken\n * @extends {TokenInfo}\n */\nexport interface CreatedToken extends TokenInfo {\n    /**\n     * jwt token in string represention\n     *\n     * @type {string}\n     * @memberof CreatedToken\n     */\n    token: string\n}\n\n/**\n * decoded token type\n *\n * @export\n * @interface DecodedToken\n * @template T\n */\nexport interface DecodedToken {\n    /**\n     * decoded type\n     *\n     * @type {DecodeType}\n     * @memberof DecodedToken\n     */\n    type: DecodeType\n    /**\n     * payload can be optional\n     *\n     * @type {Payload}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    payload?: Payload\n    /**\n     * experation status\n     *\n     * @type {ExpirationStatus}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    expirationStatus?: ExpirationStatus\n}\n\n/**\n * token factory class\n * can create token refresh them\n *\n * @export\n * @class TokenFactory\n */\nexport class TokenFactory {\n    /**\n     * Creates an instance of TokenFactory.\n     * @param {string} secretKey\n     * @param {string} refreshSecretKey\n     * @param {TAlgorithm} algorithm\n     * @memberof TokenFactory\n     */\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    /**\n     * create token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    /**\n     * create refresh token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    /**\n     * create refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {T} payload\n     * @param {string} key\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    /**\n     * decode refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {string} token\n     * @param {string} key\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    /**\n     * decode access token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    /**\n     * decode refresh token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    /**\n     * check expiration status of token\n     *\n     * @private\n     * @param {number} expires\n     * @return {*}  {ExpirationStatus}\n     * @memberof TokenFactory\n     */\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreatedTokens.html":{"url":"interfaces/CreatedTokens.html","title":"interface - CreatedTokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreatedTokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                interface to created token type\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    jwt token to refresh\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    jwt token to access\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { throws } from 'assert';\nimport { randomUUID } from 'crypto';\nimport { Repository, EntityNotFoundError, MongoRepository, QueryFailedError, FindManyOptions } from 'typeorm';\nimport { CreateUserDto } from './dto';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {User, BaseUser, Admin} from './entity'\nimport { UserSmsCode } from './entity/user_sms_code.entity';\nimport { Role } from './roles';\nimport { CreateExpiresFunc, DecodedToken, DecodeType, ExpirationStatus, TokenFactory } from './token';\n\n/**\n * AuthService errors\n *\n * @export\n * @constant {AuthServiceExceptions}\n */\nexport const AuthServiceExceptions = {\n    UserExist: Error(\"user exist with this phone number\"),\n    UserNotFound: Error(\"user not found\"),\n    AdminExist: Error(\"admin exist\"),\n    AdminNotFoud: Error(\"admin not found\"),\n    AdminFailedAuth: Error(\"admin failed auth\"),\n    UserFailedAuth: Error(\"User failed auth\"),\n    InvalidToken: Error(\"Invalid token\"),\n    TokenExpired: Error(\"Token expired\"),\n    TokenNotFound: Error(\"Token not found\")\n}\n\n/**\n * interface to created token type\n *\n * @export\n * @interface CreatedTokens\n */\nexport interface CreatedTokens {\n    /**\n     * jwt token to access\n     *\n     * @type {string}\n     * @memberof CreatedTokens\n     */\n    token: string\n\n    /**\n     * jwt token to refresh\n     *\n     * @type {string}\n     * @memberof CreatedTokens\n     */\n    refreshToken: string\n}\n\n/**\n * payload of jwt token type\n *\n * @export\n * @interface Payload\n */\nexport interface Payload {\n    /**\n     * role of user\n     *\n     * @type {Role}\n     * @memberof Payload\n     */\n    role: Role, \n\n    /**\n     * id of user\n     *\n     * @type {number}\n     * @memberof Payload\n     */\n    userId: number\n}\n\n/**\n * auth service implementetion\n *\n * @export\n * @class AuthService\n */\n@Injectable()\nexport class AuthService {\n    /**\n     * token factory to created and resfresh tokens\n     *\n     * @private\n     * @type {TokenFactory}\n     * @memberof AuthService\n     */\n    private readonly tokenFactory: TokenFactory\n\n    /**\n     * Creates an instance of AuthService.\n     * @param {Repository} userReposiotry\n     * @param {Repository} baseUserReposiotry\n     * @param {Repository} adminReposiotry\n     * @param {ConfigService} configService\n     * @param {Repository} smsRepository\n     * @memberof AuthService\n     */\n    constructor(\n        @InjectRepository(User)\n        private readonly userReposiotry: Repository,\n\n        @InjectRepository(BaseUser)\n        private readonly baseUserReposiotry: Repository,\n\n        @InjectRepository(Admin)\n        private readonly adminReposiotry: Repository,\n\n        private readonly configService: ConfigService,\n\n        @InjectRepository(UserSmsCode)\n        private readonly smsRepository: Repository\n    ) {\n        this.tokenFactory = new TokenFactory(\n            configService.get(\"IDENTY_SECRET\"),\n            configService.get(\"IDENTY_REFRESH_SECRET\"),\n            \"HS512\"\n        )\n    }\n\n    /**\n     * create a base user\n     *\n     * @private\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private createBaseUser(): Promise {\n        return this.baseUserReposiotry.save(new BaseUser(), {})\n    }\n\n    /**\n     * check if user exist by phone number\n     *\n     * @private\n     * @param {string} phone\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async userExistByPhoneNumber(phone: string): Promise {\n        return await this.userReposiotry.findOne({where: [{phoneNumber: phone}]}) === undefined ? false : true\n    }\n\n    /**\n     *  check if admin exist by email\n     *\n     * @private\n     * @param {string} email\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async adminExistByEmail(email: string): Promise  {\n        return await this.adminReposiotry.findOne({where: [{email: email}]}) === undefined ? false : true\n    }\n\n    /**\n     * create user\n     *\n     * @param {CreateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createUser(req: CreateUserDto): Promise {\n        if (await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        const user = new User()\n        user.name = req.name\n        user.phoneNumber = req.phoneNumber\n        user.baseUser = await this.createBaseUser()\n        return this.userReposiotry.save(user)\n    }\n\n    /**\n     * delete base user use for delete admins and users\n     *\n     * @private\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    private async deleteBaseUser(id: number) {\n        const result = await this.baseUserReposiotry.delete({id: id})\n        if (result.affected == 0) {\n            return false\n        }\n        return true\n    }\n\n    /**\n     * delete user by id\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    async deleteUser(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    /**\n     * create admin\n     *\n     * @param {CreateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createAdmin(req: CreateAdminDto): Promise {\n        if (await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        const admin = new Admin()\n        admin.email = req.email\n        admin.password = req.password\n        admin.baseUser = await this.createBaseUser()\n        return this.adminReposiotry.save(admin)\n\n    }\n\n    /**\n     * get users with filtering\n     *\n     * @param {FindManyOptions} [opts]\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getUsers(opts?: FindManyOptions): Promise {\n        return this.userReposiotry.find(opts)\n    }\n\n    /**\n     * delete admin by id\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    async deleteAdmin(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    /**\n     * get admins by filtering`\n     *\n     * @param {FindManyOptions} [opts]\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getAdmins(opts?: FindManyOptions): Promise {\n        return this.adminReposiotry.find(opts)\n    }\n\n    /**\n     * get user by id\n     *\n     * @param {number} id\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getUser(id: number): Promise {\n        return this.userReposiotry.findOne(id)\n    }\n\n    /**\n     * get admin by id\n     *\n     * @param {number} id\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getAdmin(id: number): Promise {\n        return this.adminReposiotry.findOne(id)\n    }\n\n    /**\n     * update user by id\n     *\n     * @param {number} id\n     * @param {UpdateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async updateUser(id:number, req: UpdateUserDto): Promise {\n        const getUser = await this.getUser(id)\n        if(getUser === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n        \n        if(req.phoneNumber && getUser.phoneNumber != req.phoneNumber && await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        return this.userReposiotry.save(\n            this.userReposiotry.merge(getUser, req),\n        )\n    }\n\n    /**\n     * update admin by id\n     *\n     * @param {number} id\n     * @param {UpdateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async updateAdmin(id: number, req: UpdateAdminDto): Promise {\n        const getAdmin = await this.getAdmin(id)\n        if(getAdmin === undefined) {\n            throw AuthServiceExceptions.AdminNotFoud\n        }\n\n        if(req.email && getAdmin.email != req.email && await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        return this.adminReposiotry.save(\n            this.adminReposiotry.merge(\n                getAdmin, \n                req\n            )\n        )\n    }\n\n    /**\n     * func to crate expire time of token\n     *\n     * @private\n     * @param {number} issued\n     * @type {CreateExpiresFunc}\n     * @memberof AuthService\n     */\n    private expiresFunc: CreateExpiresFunc = (issued: number) => {\n        const minuteInMs = 60000\n        const hourInMs = minuteInMs * 60\n        return issued + 24 * hourInMs\n    }\n\n    /**\n     * login admin\n     *\n     * @param {string} email\n     * @param {string} password\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async loginAdmin(email: string, password: string): Promise {\n        const getAdmin = await this.adminReposiotry.findOne(\n            {\n                where: [\n                    {\n                        email: email\n                    }\n                ]\n            }\n        )\n        if (getAdmin === undefined || getAdmin.password != password) {\n            throw AuthServiceExceptions.AdminFailedAuth\n        }\n\n        return this.createTokens({userId: getAdmin.id, role: Role.Admin})\n    }\n\n    /**\n     * login user\n     *\n     * @param {string} phoneNumber\n     * @param {string} code\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async loginUser(phoneNumber: string, code: string): Promise {\n        const getUserWithCode = await this.smsRepository.findOne(\n            {\n                relations: [\"user\"],\n                where: [\n                    {\n                        user: {\n                            phoneNumber: phoneNumber\n                        }\n                    }\n                ],\n            }\n        )\n        if(getUserWithCode === undefined || getUserWithCode.smsCode !== code) {\n            throw AuthServiceExceptions.UserFailedAuth\n        }\n\n        return this.createTokens({userId: getUserWithCode.user.id, role: Role.User})\n    }\n\n    /**\n     * create tokens for user\n     *\n     * @private\n     * @param {Payload} payload\n     * @return {*}  {CreatedTokens}\n     * @memberof AuthService\n     */\n    private createTokens(payload: Payload): CreatedTokens {\n        const token = this.tokenFactory.createToken(payload)(this.expiresFunc)\n\n        const refreshToken = this.tokenFactory.createRefreshToken(payload)(this.expiresFunc)\n\n        return {\n            token: token.token,\n            refreshToken: refreshToken.token\n        }\n    }\n\n\n    /**\n     * create sms code\n     *\n     * @param {string} phoneNumber\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createSmsCode(phoneNumber: string): Promise {\n        const user = await this.userReposiotry.findOne({where: [{phoneNumber: phoneNumber}]})\n        if(user === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n\n\n        const randomNubmer = () => Math.floor(Math.random()*9 + 1);\n\n        const userWithSms = await this.smsRepository.findOne({where: {user: {baseUser: {id: user.id}}}})\n        if(userWithSms === undefined) {\n            const userSmsCode = new UserSmsCode()\n            userSmsCode.user = user\n            userSmsCode.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n\n            const created = await this.smsRepository.save(userSmsCode)\n\n            return created.smsCode\n        } else {\n            userWithSms.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n            const created = await this.smsRepository.save(userWithSms)\n\n            return created.smsCode\n        }\n    }\n\n    /**\n     * decode token to get payload\n     *\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof AuthService\n     */\n    decodeToken(token: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeToken(token)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    /**\n     * decode refresh token to get payload\n     *\n     * @param {string} refresh\n     * @return {*}  {DecodedToken}\n     * @memberof AuthService\n     */\n    decodeRefreshToken(refresh: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeRefreshToken(refresh)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    /**\n     * check token \n     *\n     * @private\n     * @param {DecodedToken} decoded\n     * @memberof AuthService\n     */\n    private checkToken(decoded: DecodedToken) {\n        switch(decoded.type) {\n            case DecodeType.InvalidToken, DecodeType.IntegtiryError:\n                throw AuthServiceExceptions.InvalidToken\n        }\n        switch(decoded.expirationStatus) {\n            case ExpirationStatus.Expired:\n                throw AuthServiceExceptions.TokenExpired\n        }\n    }\n\n    /**\n     * refresh token\n     *\n     * @param {string} token\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async refreshToken(token: string): Promise {\n        const decoded = this.decodeRefreshToken(token)\n\n        return this.createTokens(decoded.payload.payload)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DecodedToken.html":{"url":"interfaces/DecodedToken.html","title":"interface - DecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n            \n                Description\n            \n            \n                decoded token type\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            expirationStatus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expirationStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationStatus:         ExpirationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExpirationStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    experation status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     Payload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Payload\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    payload can be optional\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         DecodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DecodeType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    decoded type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\n/**\n * enum of experation status\n *\n * @export\n * @enum {number}\n */\nexport enum ExpirationStatus {\n    /**\n     * expired\n     */\n    Expired = \"expired\",\n    /**\n     * active\n     */\n    Active = \"active\"\n}\n\n/**\n * dedoce type enum show status of decode\n *\n * @export\n * @enum {number}\n */\nexport enum DecodeType {\n    /**\n     * valid\n     */\n    Valid = 1,\n    /**\n     * invalid\n     */\n    InvalidToken,\n    /**\n     * some error\n     */\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\n/**\n * token info type\n *\n * @interface TokenInfo\n */\ninterface TokenInfo {\n    /**\n     * show in what date token issued\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    issued: number\n    /**\n     * show in what date token expired\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    expires: number\n}\n\n/**\n * payload generic type\n *\n * @export\n * @interface Payload\n * @extends {TokenInfo}\n * @template T\n */\nexport interface Payload extends TokenInfo {\n    /**\n     * Payload \n     *\n     * @type {T}\n     * @memberof Payload\n     */\n    payload: T\n}\n\n/**\n * Created token type\n *\n * @export\n * @interface CreatedToken\n * @extends {TokenInfo}\n */\nexport interface CreatedToken extends TokenInfo {\n    /**\n     * jwt token in string represention\n     *\n     * @type {string}\n     * @memberof CreatedToken\n     */\n    token: string\n}\n\n/**\n * decoded token type\n *\n * @export\n * @interface DecodedToken\n * @template T\n */\nexport interface DecodedToken {\n    /**\n     * decoded type\n     *\n     * @type {DecodeType}\n     * @memberof DecodedToken\n     */\n    type: DecodeType\n    /**\n     * payload can be optional\n     *\n     * @type {Payload}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    payload?: Payload\n    /**\n     * experation status\n     *\n     * @type {ExpirationStatus}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    expirationStatus?: ExpirationStatus\n}\n\n/**\n * token factory class\n * can create token refresh them\n *\n * @export\n * @class TokenFactory\n */\nexport class TokenFactory {\n    /**\n     * Creates an instance of TokenFactory.\n     * @param {string} secretKey\n     * @param {string} refreshSecretKey\n     * @param {TAlgorithm} algorithm\n     * @memberof TokenFactory\n     */\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    /**\n     * create token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    /**\n     * create refresh token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    /**\n     * create refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {T} payload\n     * @param {string} key\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    /**\n     * decode refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {string} token\n     * @param {string} key\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    /**\n     * decode access token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    /**\n     * decode refresh token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    /**\n     * check expiration status of token\n     *\n     * @private\n     * @param {number} expires\n     * @return {*}  {ExpirationStatus}\n     * @memberof TokenFactory\n     */\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAdminResp.html":{"url":"classes/GetAdminResp.html","title":"class - GetAdminResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAdminResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/get-admin.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                admin responce\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(admin: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/get-admin.dto.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of GetAdminResp.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        admin\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-admin.dto.ts:40\n                        \n                    \n\n            \n                \n                    user email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-admin.dto.ts:29\n                        \n                    \n\n            \n                \n                    admin id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\n\n/**\n * admin responce\n *\n * @export\n * @class GetAdminResp\n */\nexport class GetAdminResp {\n    /**\n     * Creates an instance of GetAdminResp.\n     * @param {{id: number, email: string}} admin\n     * @memberof GetAdminResp\n     */\n    constructor(admin: {id: number, email: string}) {\n        this.id = admin.id\n        this.email = admin.email\n    }\n    /**\n     * admin id\n     *\n     * @type {number}\n     * @memberof GetAdminResp\n     */\n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    /**\n     * user email\n     *\n     * @type {string}\n     * @memberof GetAdminResp\n     */\n    @ApiProperty({\n        example: \"user@example.com\",\n    })\n    email: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersResp.html":{"url":"classes/GetUsersResp.html","title":"class - GetUsersResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/get-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                get user responce\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/get-user.dto.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of GetUsersResp.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    user id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Some name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    user name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '81375461323'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/get-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    user phoneNubmer\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\n\n\n/**\n * get user responce\n *\n * @export\n * @class GetUsersResp\n */\nexport class GetUsersResp {\n    /**\n     * Creates an instance of GetUsersResp.\n     * @param {{id: number, phoneNumber: string, name: string}} user\n     * @memberof GetUsersResp\n     */\n    constructor(user: {id: number, phoneNumber: string, name: string}) {\n        this.id = user.id\n        this.phoneNumber = user.phoneNumber\n        this.name = user.name\n    }\n    \n    /**\n     * user id\n     *\n     * @type {number}\n     * @memberof GetUsersResp\n     */\n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    /**\n     * user phoneNubmer\n     *\n     * @type {string}\n     * @memberof GetUsersResp\n     */\n    @ApiProperty({\n        example: \"81375461323\",\n    })\n    phoneNumber: string\n\n    /**\n     * user name\n     *\n     * @type {string}\n     * @memberof GetUsersResp\n     */\n    @ApiProperty({\n        example: \"Some name\"\n    })\n    name: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                jwt guard\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n\n/**\n * jwt guard\n *\n * @export\n * @class JwtGuard\n * @extends {AuthGuard('jwt')}\n */\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                jwt strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:38\n                \n            \n\n\n            \n                \n                    validate pyalaod\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * jwt strategy\n *\n * @export\n * @class JwtStrategy\n * @extends {PassportStrategy(Strategy)}\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    /**\n     * Creates an instance of JwtStrategy.\n     * @param {ConfigService} configService\n     * @memberof JwtStrategy\n     */\n    constructor(\n        private readonly configService: ConfigService\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: configService.get(\"IDENTY_SECRET\")\n        });\n    }\n\n    /**\n     * validate pyalaod\n     *\n     * @param {*} payload\n     * @return {*} \n     * @memberof JwtStrategy\n     */\n    async validate(payload: any) {\n        return { ...payload.role };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAdminDto.html":{"url":"classes/LoginAdminDto.html","title":"class - LoginAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-admin.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login admin body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-admin.dto.ts:19\n                        \n                    \n\n            \n                \n                    admin email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-admin.dto.ts:29\n                        \n                    \n\n            \n                \n                    admin password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsString } from \"class-validator\";\n\n/**\n * Login admin body\n *\n * @export\n * @class LoginAdminDto\n */\nexport class LoginAdminDto {\n    /**\n     * admin email\n     *\n     * @type {string}\n     * @memberof LoginAdminDto\n     */\n    @ApiProperty({example: \"user@example.com\"})\n    @IsEmail()\n    email: string\n\n    /**\n     * admin password\n     *\n     * @type {string}\n     * @memberof LoginAdminDto\n     */\n    @ApiProperty({example:\"qwerty\"})\n    @IsString()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login user body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '0000'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:29\n                        \n                    \n\n            \n                \n                    sms code\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+7 (936) 134 14 24'})@IsPhoneNumber('RU')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    phoneNumber\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPhoneNumber, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * Login user body\n *\n * @export\n * @class LoginUserDto\n */\nexport class LoginUserDto {\n    /**\n     * phoneNumber\n     *\n     * @type {string}\n     * @memberof LoginUserDto\n     */\n    @ApiProperty({example: \"+7 (936) 134 14 24\"})\n    @IsPhoneNumber(\"RU\")\n    phoneNumber: string\n\n    /**\n     * sms code\n     *\n     * @type {string}\n     * @memberof LoginUserDto\n     */\n    @ApiProperty({example: \"0000\"})\n    @IsString()\n    code: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                payload of jwt token type\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         Role\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    role of user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    id of user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { throws } from 'assert';\nimport { randomUUID } from 'crypto';\nimport { Repository, EntityNotFoundError, MongoRepository, QueryFailedError, FindManyOptions } from 'typeorm';\nimport { CreateUserDto } from './dto';\nimport { CreateAdminDto } from './dto/create-admin.dto';\nimport { UpdateAdminDto } from './dto/update-admin.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {User, BaseUser, Admin} from './entity'\nimport { UserSmsCode } from './entity/user_sms_code.entity';\nimport { Role } from './roles';\nimport { CreateExpiresFunc, DecodedToken, DecodeType, ExpirationStatus, TokenFactory } from './token';\n\n/**\n * AuthService errors\n *\n * @export\n * @constant {AuthServiceExceptions}\n */\nexport const AuthServiceExceptions = {\n    UserExist: Error(\"user exist with this phone number\"),\n    UserNotFound: Error(\"user not found\"),\n    AdminExist: Error(\"admin exist\"),\n    AdminNotFoud: Error(\"admin not found\"),\n    AdminFailedAuth: Error(\"admin failed auth\"),\n    UserFailedAuth: Error(\"User failed auth\"),\n    InvalidToken: Error(\"Invalid token\"),\n    TokenExpired: Error(\"Token expired\"),\n    TokenNotFound: Error(\"Token not found\")\n}\n\n/**\n * interface to created token type\n *\n * @export\n * @interface CreatedTokens\n */\nexport interface CreatedTokens {\n    /**\n     * jwt token to access\n     *\n     * @type {string}\n     * @memberof CreatedTokens\n     */\n    token: string\n\n    /**\n     * jwt token to refresh\n     *\n     * @type {string}\n     * @memberof CreatedTokens\n     */\n    refreshToken: string\n}\n\n/**\n * payload of jwt token type\n *\n * @export\n * @interface Payload\n */\nexport interface Payload {\n    /**\n     * role of user\n     *\n     * @type {Role}\n     * @memberof Payload\n     */\n    role: Role, \n\n    /**\n     * id of user\n     *\n     * @type {number}\n     * @memberof Payload\n     */\n    userId: number\n}\n\n/**\n * auth service implementetion\n *\n * @export\n * @class AuthService\n */\n@Injectable()\nexport class AuthService {\n    /**\n     * token factory to created and resfresh tokens\n     *\n     * @private\n     * @type {TokenFactory}\n     * @memberof AuthService\n     */\n    private readonly tokenFactory: TokenFactory\n\n    /**\n     * Creates an instance of AuthService.\n     * @param {Repository} userReposiotry\n     * @param {Repository} baseUserReposiotry\n     * @param {Repository} adminReposiotry\n     * @param {ConfigService} configService\n     * @param {Repository} smsRepository\n     * @memberof AuthService\n     */\n    constructor(\n        @InjectRepository(User)\n        private readonly userReposiotry: Repository,\n\n        @InjectRepository(BaseUser)\n        private readonly baseUserReposiotry: Repository,\n\n        @InjectRepository(Admin)\n        private readonly adminReposiotry: Repository,\n\n        private readonly configService: ConfigService,\n\n        @InjectRepository(UserSmsCode)\n        private readonly smsRepository: Repository\n    ) {\n        this.tokenFactory = new TokenFactory(\n            configService.get(\"IDENTY_SECRET\"),\n            configService.get(\"IDENTY_REFRESH_SECRET\"),\n            \"HS512\"\n        )\n    }\n\n    /**\n     * create a base user\n     *\n     * @private\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private createBaseUser(): Promise {\n        return this.baseUserReposiotry.save(new BaseUser(), {})\n    }\n\n    /**\n     * check if user exist by phone number\n     *\n     * @private\n     * @param {string} phone\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async userExistByPhoneNumber(phone: string): Promise {\n        return await this.userReposiotry.findOne({where: [{phoneNumber: phone}]}) === undefined ? false : true\n    }\n\n    /**\n     *  check if admin exist by email\n     *\n     * @private\n     * @param {string} email\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    private async adminExistByEmail(email: string): Promise  {\n        return await this.adminReposiotry.findOne({where: [{email: email}]}) === undefined ? false : true\n    }\n\n    /**\n     * create user\n     *\n     * @param {CreateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createUser(req: CreateUserDto): Promise {\n        if (await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        const user = new User()\n        user.name = req.name\n        user.phoneNumber = req.phoneNumber\n        user.baseUser = await this.createBaseUser()\n        return this.userReposiotry.save(user)\n    }\n\n    /**\n     * delete base user use for delete admins and users\n     *\n     * @private\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    private async deleteBaseUser(id: number) {\n        const result = await this.baseUserReposiotry.delete({id: id})\n        if (result.affected == 0) {\n            return false\n        }\n        return true\n    }\n\n    /**\n     * delete user by id\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    async deleteUser(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    /**\n     * create admin\n     *\n     * @param {CreateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createAdmin(req: CreateAdminDto): Promise {\n        if (await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        const admin = new Admin()\n        admin.email = req.email\n        admin.password = req.password\n        admin.baseUser = await this.createBaseUser()\n        return this.adminReposiotry.save(admin)\n\n    }\n\n    /**\n     * get users with filtering\n     *\n     * @param {FindManyOptions} [opts]\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getUsers(opts?: FindManyOptions): Promise {\n        return this.userReposiotry.find(opts)\n    }\n\n    /**\n     * delete admin by id\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof AuthService\n     */\n    async deleteAdmin(id: number) {\n        return this.deleteBaseUser(id)\n    }\n\n    /**\n     * get admins by filtering`\n     *\n     * @param {FindManyOptions} [opts]\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getAdmins(opts?: FindManyOptions): Promise {\n        return this.adminReposiotry.find(opts)\n    }\n\n    /**\n     * get user by id\n     *\n     * @param {number} id\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getUser(id: number): Promise {\n        return this.userReposiotry.findOne(id)\n    }\n\n    /**\n     * get admin by id\n     *\n     * @param {number} id\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async getAdmin(id: number): Promise {\n        return this.adminReposiotry.findOne(id)\n    }\n\n    /**\n     * update user by id\n     *\n     * @param {number} id\n     * @param {UpdateUserDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async updateUser(id:number, req: UpdateUserDto): Promise {\n        const getUser = await this.getUser(id)\n        if(getUser === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n        \n        if(req.phoneNumber && getUser.phoneNumber != req.phoneNumber && await this.userExistByPhoneNumber(req.phoneNumber)) {\n            throw AuthServiceExceptions.UserExist\n        }\n\n        return this.userReposiotry.save(\n            this.userReposiotry.merge(getUser, req),\n        )\n    }\n\n    /**\n     * update admin by id\n     *\n     * @param {number} id\n     * @param {UpdateAdminDto} req\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async updateAdmin(id: number, req: UpdateAdminDto): Promise {\n        const getAdmin = await this.getAdmin(id)\n        if(getAdmin === undefined) {\n            throw AuthServiceExceptions.AdminNotFoud\n        }\n\n        if(req.email && getAdmin.email != req.email && await this.adminExistByEmail(req.email)) {\n            throw AuthServiceExceptions.AdminExist\n        }\n\n        return this.adminReposiotry.save(\n            this.adminReposiotry.merge(\n                getAdmin, \n                req\n            )\n        )\n    }\n\n    /**\n     * func to crate expire time of token\n     *\n     * @private\n     * @param {number} issued\n     * @type {CreateExpiresFunc}\n     * @memberof AuthService\n     */\n    private expiresFunc: CreateExpiresFunc = (issued: number) => {\n        const minuteInMs = 60000\n        const hourInMs = minuteInMs * 60\n        return issued + 24 * hourInMs\n    }\n\n    /**\n     * login admin\n     *\n     * @param {string} email\n     * @param {string} password\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async loginAdmin(email: string, password: string): Promise {\n        const getAdmin = await this.adminReposiotry.findOne(\n            {\n                where: [\n                    {\n                        email: email\n                    }\n                ]\n            }\n        )\n        if (getAdmin === undefined || getAdmin.password != password) {\n            throw AuthServiceExceptions.AdminFailedAuth\n        }\n\n        return this.createTokens({userId: getAdmin.id, role: Role.Admin})\n    }\n\n    /**\n     * login user\n     *\n     * @param {string} phoneNumber\n     * @param {string} code\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async loginUser(phoneNumber: string, code: string): Promise {\n        const getUserWithCode = await this.smsRepository.findOne(\n            {\n                relations: [\"user\"],\n                where: [\n                    {\n                        user: {\n                            phoneNumber: phoneNumber\n                        }\n                    }\n                ],\n            }\n        )\n        if(getUserWithCode === undefined || getUserWithCode.smsCode !== code) {\n            throw AuthServiceExceptions.UserFailedAuth\n        }\n\n        return this.createTokens({userId: getUserWithCode.user.id, role: Role.User})\n    }\n\n    /**\n     * create tokens for user\n     *\n     * @private\n     * @param {Payload} payload\n     * @return {*}  {CreatedTokens}\n     * @memberof AuthService\n     */\n    private createTokens(payload: Payload): CreatedTokens {\n        const token = this.tokenFactory.createToken(payload)(this.expiresFunc)\n\n        const refreshToken = this.tokenFactory.createRefreshToken(payload)(this.expiresFunc)\n\n        return {\n            token: token.token,\n            refreshToken: refreshToken.token\n        }\n    }\n\n\n    /**\n     * create sms code\n     *\n     * @param {string} phoneNumber\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async createSmsCode(phoneNumber: string): Promise {\n        const user = await this.userReposiotry.findOne({where: [{phoneNumber: phoneNumber}]})\n        if(user === undefined) {\n            throw AuthServiceExceptions.UserNotFound\n        }\n\n\n        const randomNubmer = () => Math.floor(Math.random()*9 + 1);\n\n        const userWithSms = await this.smsRepository.findOne({where: {user: {baseUser: {id: user.id}}}})\n        if(userWithSms === undefined) {\n            const userSmsCode = new UserSmsCode()\n            userSmsCode.user = user\n            userSmsCode.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n\n            const created = await this.smsRepository.save(userSmsCode)\n\n            return created.smsCode\n        } else {\n            userWithSms.smsCode = `${randomNubmer()}${randomNubmer()}${randomNubmer()}${randomNubmer()}`\n            const created = await this.smsRepository.save(userWithSms)\n\n            return created.smsCode\n        }\n    }\n\n    /**\n     * decode token to get payload\n     *\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof AuthService\n     */\n    decodeToken(token: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeToken(token)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    /**\n     * decode refresh token to get payload\n     *\n     * @param {string} refresh\n     * @return {*}  {DecodedToken}\n     * @memberof AuthService\n     */\n    decodeRefreshToken(refresh: string): DecodedToken {\n        const decoded = this.tokenFactory.decodeRefreshToken(refresh)\n\n        this.checkToken(decoded)\n\n        return decoded\n    }\n\n    /**\n     * check token \n     *\n     * @private\n     * @param {DecodedToken} decoded\n     * @memberof AuthService\n     */\n    private checkToken(decoded: DecodedToken) {\n        switch(decoded.type) {\n            case DecodeType.InvalidToken, DecodeType.IntegtiryError:\n                throw AuthServiceExceptions.InvalidToken\n        }\n        switch(decoded.expirationStatus) {\n            case ExpirationStatus.Expired:\n                throw AuthServiceExceptions.TokenExpired\n        }\n    }\n\n    /**\n     * refresh token\n     *\n     * @param {string} token\n     * @return {*}  {Promise}\n     * @memberof AuthService\n     */\n    async refreshToken(token: string): Promise {\n        const decoded = this.decodeRefreshToken(token)\n\n        return this.createTokens(decoded.payload.payload)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload-1.html":{"url":"interfaces/Payload-1.html","title":"interface - Payload-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n            \n                Description\n            \n            \n                payload generic type\n\n            \n\n            \n                Extends\n            \n            \n                        TokenInfo\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Payload\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\n/**\n * enum of experation status\n *\n * @export\n * @enum {number}\n */\nexport enum ExpirationStatus {\n    /**\n     * expired\n     */\n    Expired = \"expired\",\n    /**\n     * active\n     */\n    Active = \"active\"\n}\n\n/**\n * dedoce type enum show status of decode\n *\n * @export\n * @enum {number}\n */\nexport enum DecodeType {\n    /**\n     * valid\n     */\n    Valid = 1,\n    /**\n     * invalid\n     */\n    InvalidToken,\n    /**\n     * some error\n     */\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\n/**\n * token info type\n *\n * @interface TokenInfo\n */\ninterface TokenInfo {\n    /**\n     * show in what date token issued\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    issued: number\n    /**\n     * show in what date token expired\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    expires: number\n}\n\n/**\n * payload generic type\n *\n * @export\n * @interface Payload\n * @extends {TokenInfo}\n * @template T\n */\nexport interface Payload extends TokenInfo {\n    /**\n     * Payload \n     *\n     * @type {T}\n     * @memberof Payload\n     */\n    payload: T\n}\n\n/**\n * Created token type\n *\n * @export\n * @interface CreatedToken\n * @extends {TokenInfo}\n */\nexport interface CreatedToken extends TokenInfo {\n    /**\n     * jwt token in string represention\n     *\n     * @type {string}\n     * @memberof CreatedToken\n     */\n    token: string\n}\n\n/**\n * decoded token type\n *\n * @export\n * @interface DecodedToken\n * @template T\n */\nexport interface DecodedToken {\n    /**\n     * decoded type\n     *\n     * @type {DecodeType}\n     * @memberof DecodedToken\n     */\n    type: DecodeType\n    /**\n     * payload can be optional\n     *\n     * @type {Payload}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    payload?: Payload\n    /**\n     * experation status\n     *\n     * @type {ExpirationStatus}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    expirationStatus?: ExpirationStatus\n}\n\n/**\n * token factory class\n * can create token refresh them\n *\n * @export\n * @class TokenFactory\n */\nexport class TokenFactory {\n    /**\n     * Creates an instance of TokenFactory.\n     * @param {string} secretKey\n     * @param {string} refreshSecretKey\n     * @param {TAlgorithm} algorithm\n     * @memberof TokenFactory\n     */\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    /**\n     * create token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    /**\n     * create refresh token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    /**\n     * create refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {T} payload\n     * @param {string} key\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    /**\n     * decode refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {string} token\n     * @param {string} key\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    /**\n     * decode access token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    /**\n     * decode refresh token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    /**\n     * check expiration status of token\n     *\n     * @private\n     * @param {number} expires\n     * @return {*}  {ExpirationStatus}\n     * @memberof TokenFactory\n     */\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                refresh token body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA'})@IsJWT()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:23\n                        \n                    \n\n            \n                \n                    jwt refresh token\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsJWT } from \"class-validator\";\n\n/**\n * refresh token body\n *\n * @export\n * @class RefreshTokenDto\n */\nexport class RefreshTokenDto {\n    /**\n     * jwt refresh token\n     *\n     * @type {string}\n     * @memberof RefreshTokenDto\n     */\n    @ApiProperty(\n        {\n            example: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwYXlsb2FkIjp7InJvbGUiOiJhZG1pbiIsInVzZXJJZCI6Mn0sImlzc3VlZCI6MTY0NzA3MzI5MTk4NiwiZXhwaXJlcyI6MTY0NzE1OTY5MTk4Nn0.v_9Tx8tWre8VkqtF3eaxN8BvNmBstFBwSKYzuoIxd00nBV7_KCYlkOjXxJ4F0AfUvrSoyv1COdFF2K_cG8YlxA\"\n        }\n    )\n    @IsJWT()\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    class to validate role to access to method\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles.guard.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of RolesGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/roles.guard.ts:33\n                \n            \n\n\n            \n                \n                    check role of user to decide can they launch method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        {(boolean | Promise | Observable)}\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Request } from \"express\";\nimport { Observable } from \"rxjs\";\nimport { AuthService, AuthServiceExceptions } from \"./auth.service\";\nimport { Role } from \"./roles\";\nimport { ROLES_KEY } from \"./roles.decorator\";\n\n/**\n * class to validate role to access to method\n *\n * @export\n * @class RolesGuard\n * @implements {CanActivate}\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    /**\n     * Creates an instance of RolesGuard.\n     * @param {Reflector} reflector\n     * @param {AuthService} authService\n     * @memberof RolesGuard\n     */\n    constructor (private reflector: Reflector, private readonly authService: AuthService) {}\n\n    /**\n     * check role of user to decide can they launch method\n     *\n     * @param {ExecutionContext} context\n     * @return {*}  {(boolean | Promise | Observable)}\n     * @memberof RolesGuard\n     */\n    canActivate(context: ExecutionContext): boolean | Promise | Observable {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [\n                context.getHandler(),\n                context.getClass()\n            ]\n        )\n\n        const req = context.switchToHttp().getRequest()\n        const authHeader = req.headers.authorization\n        try {\n            if(authHeader === undefined) {\n                throw AuthServiceExceptions.TokenNotFound\n            }\n            const token = authHeader.split(\" \")[1]\n            const decoded = this.authService.decodeToken(token)\n\n            if(!requiredRoles) {\n                return true\n            }\n\n\n            return requiredRoles.some((role) => decoded.payload.payload.role.includes(role))\n        } catch(e) {\n            switch(e) {\n                case AuthServiceExceptions.InvalidToken, AuthServiceExceptions.TokenExpired, AuthServiceExceptions.TokenNotFound:\n                    throw e\n            }\n            return false\n        }\n    }\n\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenFactory.html":{"url":"classes/TokenFactory.html","title":"class - TokenFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n            \n                Description\n            \n            \n                token factory class\ncan create token refresh them\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkExpirationStatus\n                            \n                            \n                                createRefreshToken\n                            \n                            \n                                    Private\n                                createSomeToken\n                            \n                            \n                                createToken\n                            \n                            \n                                decodeRefreshToken\n                            \n                            \n                                    Private\n                                decodeSomeToken\n                            \n                            \n                                decodeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(secretKey: string, refreshSecretKey: string, algorithm: TAlgorithm)\n                    \n                \n                        \n                            \n                                Defined in src/auth/token.ts:144\n                            \n                        \n\n                \n                    \n                            Creates an instance of TokenFactory.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        secretKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshSecretKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        algorithm\n                                                  \n                                                        \n                                                                    TAlgorithm\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkExpirationStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkExpirationStatus(expires: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:292\n                \n            \n\n\n            \n                \n                    check expiration status of token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expires\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpirationStatus\n\n                    \n                    \n                        {ExpirationStatus}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \ncreateRefreshToken(payload: T)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:178\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    create refresh token with given payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateTokenFunc\n\n                    \n                    \n                        {CreateTokenFunc}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createSomeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSomeToken(payload: T, key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:192\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    create refresh or access token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateTokenFunc\n\n                    \n                    \n                        {CreateTokenFunc}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(payload: T)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:166\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    create token with given payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateTokenFunc\n\n                    \n                    \n                        {CreateTokenFunc}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeRefreshToken\n                        \n                    \n                \n            \n            \n                \ndecodeRefreshToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:280\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    decode refresh token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DecodedToken\n\n                    \n                    \n                        {DecodedToken}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        decodeSomeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeSomeToken(token: string, key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:224\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    decode refresh or access token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DecodedToken\n\n                    \n                    \n                        {DecodedToken}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.ts:268\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    decode access token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DecodedToken\n\n                    \n                    \n                        {DecodedToken}\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\n/**\n * enum of experation status\n *\n * @export\n * @enum {number}\n */\nexport enum ExpirationStatus {\n    /**\n     * expired\n     */\n    Expired = \"expired\",\n    /**\n     * active\n     */\n    Active = \"active\"\n}\n\n/**\n * dedoce type enum show status of decode\n *\n * @export\n * @enum {number}\n */\nexport enum DecodeType {\n    /**\n     * valid\n     */\n    Valid = 1,\n    /**\n     * invalid\n     */\n    InvalidToken,\n    /**\n     * some error\n     */\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\n/**\n * token info type\n *\n * @interface TokenInfo\n */\ninterface TokenInfo {\n    /**\n     * show in what date token issued\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    issued: number\n    /**\n     * show in what date token expired\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    expires: number\n}\n\n/**\n * payload generic type\n *\n * @export\n * @interface Payload\n * @extends {TokenInfo}\n * @template T\n */\nexport interface Payload extends TokenInfo {\n    /**\n     * Payload \n     *\n     * @type {T}\n     * @memberof Payload\n     */\n    payload: T\n}\n\n/**\n * Created token type\n *\n * @export\n * @interface CreatedToken\n * @extends {TokenInfo}\n */\nexport interface CreatedToken extends TokenInfo {\n    /**\n     * jwt token in string represention\n     *\n     * @type {string}\n     * @memberof CreatedToken\n     */\n    token: string\n}\n\n/**\n * decoded token type\n *\n * @export\n * @interface DecodedToken\n * @template T\n */\nexport interface DecodedToken {\n    /**\n     * decoded type\n     *\n     * @type {DecodeType}\n     * @memberof DecodedToken\n     */\n    type: DecodeType\n    /**\n     * payload can be optional\n     *\n     * @type {Payload}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    payload?: Payload\n    /**\n     * experation status\n     *\n     * @type {ExpirationStatus}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    expirationStatus?: ExpirationStatus\n}\n\n/**\n * token factory class\n * can create token refresh them\n *\n * @export\n * @class TokenFactory\n */\nexport class TokenFactory {\n    /**\n     * Creates an instance of TokenFactory.\n     * @param {string} secretKey\n     * @param {string} refreshSecretKey\n     * @param {TAlgorithm} algorithm\n     * @memberof TokenFactory\n     */\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    /**\n     * create token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    /**\n     * create refresh token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    /**\n     * create refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {T} payload\n     * @param {string} key\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    /**\n     * decode refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {string} token\n     * @param {string} key\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    /**\n     * decode access token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    /**\n     * decode refresh token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    /**\n     * check expiration status of token\n     *\n     * @private\n     * @param {number} expires\n     * @return {*}  {ExpirationStatus}\n     * @memberof TokenFactory\n     */\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenInfo.html":{"url":"interfaces/TokenInfo.html","title":"interface - TokenInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.ts\n        \n\n\n            \n                Description\n            \n            \n                token info type\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expires\n                                        \n                                \n                                \n                                        \n                                            issued\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expires:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    show in what date token expired\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issued\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issued:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    show in what date token issued\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {encode, TAlgorithm, decode} from 'jwt-simple'\n\n/**\n * enum of experation status\n *\n * @export\n * @enum {number}\n */\nexport enum ExpirationStatus {\n    /**\n     * expired\n     */\n    Expired = \"expired\",\n    /**\n     * active\n     */\n    Active = \"active\"\n}\n\n/**\n * dedoce type enum show status of decode\n *\n * @export\n * @enum {number}\n */\nexport enum DecodeType {\n    /**\n     * valid\n     */\n    Valid = 1,\n    /**\n     * invalid\n     */\n    InvalidToken,\n    /**\n     * some error\n     */\n    IntegtiryError\n}\n\nexport type CreateTokenFunc = (\n    expiresFunc: CreateExpiresFunc,\n) => CreatedToken;\n\nexport type CreateExpiresFunc = (issued: number) => number\n\n/**\n * token info type\n *\n * @interface TokenInfo\n */\ninterface TokenInfo {\n    /**\n     * show in what date token issued\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    issued: number\n    /**\n     * show in what date token expired\n     *\n     * @type {number}\n     * @memberof TokenInfo\n     */\n    expires: number\n}\n\n/**\n * payload generic type\n *\n * @export\n * @interface Payload\n * @extends {TokenInfo}\n * @template T\n */\nexport interface Payload extends TokenInfo {\n    /**\n     * Payload \n     *\n     * @type {T}\n     * @memberof Payload\n     */\n    payload: T\n}\n\n/**\n * Created token type\n *\n * @export\n * @interface CreatedToken\n * @extends {TokenInfo}\n */\nexport interface CreatedToken extends TokenInfo {\n    /**\n     * jwt token in string represention\n     *\n     * @type {string}\n     * @memberof CreatedToken\n     */\n    token: string\n}\n\n/**\n * decoded token type\n *\n * @export\n * @interface DecodedToken\n * @template T\n */\nexport interface DecodedToken {\n    /**\n     * decoded type\n     *\n     * @type {DecodeType}\n     * @memberof DecodedToken\n     */\n    type: DecodeType\n    /**\n     * payload can be optional\n     *\n     * @type {Payload}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    payload?: Payload\n    /**\n     * experation status\n     *\n     * @type {ExpirationStatus}\n     * @memberof DecodedToken\n     * @requires false\n     */\n    expirationStatus?: ExpirationStatus\n}\n\n/**\n * token factory class\n * can create token refresh them\n *\n * @export\n * @class TokenFactory\n */\nexport class TokenFactory {\n    /**\n     * Creates an instance of TokenFactory.\n     * @param {string} secretKey\n     * @param {string} refreshSecretKey\n     * @param {TAlgorithm} algorithm\n     * @memberof TokenFactory\n     */\n    constructor(\n        private readonly secretKey: string,\n        private readonly refreshSecretKey: string,\n        private readonly algorithm: TAlgorithm\n    ) {}\n\n    /**\n     * create token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.secretKey)\n    }\n\n    /**\n     * create refresh token with given payload\n     *\n     * @template T\n     * @param {T} payload\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    createRefreshToken(payload: T): CreateTokenFunc {\n        return this.createSomeToken(payload, this.refreshSecretKey)\n    }\n\n    /**\n     * create refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {T} payload\n     * @param {string} key\n     * @return {*}  {CreateTokenFunc}\n     * @memberof TokenFactory\n     */\n    private createSomeToken(payload: T, key: string): CreateTokenFunc {\n        const createTokenFunc: CreateTokenFunc = (expiresFunc: CreateExpiresFunc) => {\n            const now = Date.now()\n            const expires = expiresFunc(now)\n            const tokenInfo: TokenInfo = {\n                issued: now,\n                expires: expires\n            }\n            const _payload: Payload = {\n                payload: payload,\n                ...tokenInfo,\n            }\n\n            return {\n                ...tokenInfo,\n                token: encode(_payload, key, this.algorithm)\n            }\n        }\n\n        return createTokenFunc\n    }\n\n    /**\n     * decode refresh or access token\n     *\n     * @private\n     * @template T\n     * @param {string} token\n     * @param {string} key\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    private decodeSomeToken(token: string, key: string): DecodedToken {\n        let result: Payload\n        try {\n            result = decode(token, key, false, this.algorithm)\n        } catch(_e) {\n            const e: Error = _e\n\n            if (e.message === \"No token supplied\" || e.message === \"Not enough or too many segments\") {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            if (e.message === \"Signature verification failed\" || e.message === \"Algorithm not supported\") {\n                return {\n                    type: DecodeType.IntegtiryError\n                };\n            }\n    \n            // Handle json parse errors, thrown when the payload is nonsense\n            if (e.message.indexOf(\"Unexpected token\") === 0) {\n                return {\n                    type: DecodeType.InvalidToken\n                };\n            }\n    \n            throw e;\n        }\n\n        return {\n            payload: result,\n            type: DecodeType.Valid,\n            expirationStatus: this.checkExpirationStatus(result.expires)\n        }\n    }\n\n    /**\n     * decode access token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.secretKey)\n    }\n\n    /**\n     * decode refresh token\n     *\n     * @template T\n     * @param {string} token\n     * @return {*}  {DecodedToken}\n     * @memberof TokenFactory\n     */\n    decodeRefreshToken(token: string): DecodedToken {\n        return this.decodeSomeToken(token, this.refreshSecretKey)\n    }\n\n    /**\n     * check expiration status of token\n     *\n     * @private\n     * @param {number} expires\n     * @return {*}  {ExpirationStatus}\n     * @memberof TokenFactory\n     */\n    private checkExpirationStatus(expires: number): ExpirationStatus {\n        const now = Date.now()\n\n        if (expires > now) {\n            return ExpirationStatus.Active\n        }\n\n        return ExpirationStatus.Expired\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAdminDto.html":{"url":"classes/UpdateAdminDto.html","title":"class - UpdateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-admin.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Update user body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user.name@example.com', required: false})@ValidateIf(o => o.email)@IsEmail({}, {message: 'email is not valid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-admin.dto.ts:20\n                        \n                    \n\n            \n                \n                    email of user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qwerty', required: false})@ValidateIf(o => o.name)@IsString({message: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-admin.dto.ts:31\n                        \n                    \n\n            \n                \n                    user password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsEmail, IsString, ValidateIf } from \"class-validator\"\n\n/**\n * Update user body\n *\n * @export\n * @class UpdateAdminDto\n */\nexport class UpdateAdminDto {\n    /**\n     * email of user\n     *\n     * @type {string}\n     * @memberof UpdateAdminDto\n     */\n    @ApiProperty({example: \"user.name@example.com\", required: false})\n    @ValidateIf( o => o.email)\n    @IsEmail({},{message: \"email is not valid\"})\n    email?: string\n\n    /**\n     * user password\n     *\n     * @type {string}\n     * @memberof UpdateAdminDto\n     */\n    @ApiProperty({example: \"qwerty\", required: false})\n    @ValidateIf(o => o.name)\n    @IsString({message: \"\"})\n    password?: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                update user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@ValidateIf(o => o.name)@IsString({message: 'should be a string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    name of user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: '+7 (936) 134 14 24'})@ValidateIf(o => o.phoneNumber)@IsPhoneNumber('RU', {})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    phone number\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsPhoneNumber, IsString, ValidateIf } from \"class-validator\";\n\n/**\n * update user\n *\n * @export\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n    /**\n     * phone number\n     *\n     * @type {string}\n     * @memberof UpdateUserDto\n     */\n    @ApiProperty({required: false, example: \"+7 (936) 134 14 24\"})\n    @ValidateIf(o => o.phoneNumber)\n    @IsPhoneNumber(\"RU\", {})\n    phoneNumber?: string\n\n    /**\n     * name of user\n     *\n     * @type {string}\n     * @memberof UpdateUserDto\n     */\n    @ApiProperty({required: false})\n    @ValidateIf(o => o.name)\n    @IsString({message: \"should be a string\"})\n    name?: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                user entity represantation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                baseUser\n                            \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        baseUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, type => type, {primary: true, onDelete: 'CASCADE', eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user.entity.ts:21\n                        \n                    \n\n            \n                \n                    edge to base user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user.entity.ts:50\n                        \n                    \n\n            \n                \n                    name of user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 18, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user.entity.ts:41\n                        \n                    \n\n            \n                \n                    unique phone number\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToOne } from \"typeorm\";\nimport { BaseUser } from \"./baseuser.entity\";\nimport { UserSmsCode } from \"./user_sms_code.entity\";\n\n/**\n * user entity represantation\n *\n * @export\n * @class User\n */\n@Entity({name: \"User\"})\nexport class User {\n    /**\n     * edge to base user\n     *\n     * @type {BaseUser}\n     * @memberof User\n     */\n    @OneToOne(() => BaseUser, type => type, {primary: true, onDelete: \"CASCADE\", eager: true})\n    @JoinColumn()\n    baseUser: BaseUser;\n\n    /**\n     * id getter\n     *\n     * @readonly\n     * @type {number}\n     * @memberof User\n     */\n    get id(): number {\n        return this.baseUser.id\n    }\n\n    /**\n     * unique phone number\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @Column({length: 18, unique: true})\n    phoneNumber: string;\n\n    /**\n     * name of user\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @Column()\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreateResp.html":{"url":"classes/UserCreateResp.html","title":"class - UserCreateResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreateResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                create user responce\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/create-user.dto.ts:41\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserCreateResp.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:62\n                        \n                    \n\n            \n                \n                    user id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Some name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:84\n                        \n                    \n\n            \n                \n                    user name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '81375461323'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:73\n                        \n                    \n\n            \n                \n                    user phone nubmer\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsPhoneNumber, IsString, Length } from \"class-validator\"\n\n/**\n * Create user body\n *\n * @export\n * @class CreateUserDto\n */\nexport class CreateUserDto {\n    /**\n     * phoneNumber\n     *\n     * @type {string}\n     * @memberof CreateUserDto\n     */\n    @ApiProperty({\n            example: \"+7 (936) 134 14 24\",\n    })\n    @IsPhoneNumber(\"RU\")\n    phoneNumber: string\n\n    /**\n     * name of user\n     *\n     * @type {string}\n     * @memberof CreateUserDto\n     */\n    @ApiProperty()\n    @IsString({message: \"should be a string\"})\n    name: string\n}\n\n\n/**\n * create user responce\n *\n * @export\n * @class UserCreateResp\n */\nexport class UserCreateResp {\n    /**\n     * Creates an instance of UserCreateResp.\n     * @param {{id: number, phoneNumber: string, name: string}} user\n     * @memberof UserCreateResp\n     */\n    constructor(user: {id: number, phoneNumber: string, name: string}) {\n        this.id = user.id\n        this.phoneNumber = user.phoneNumber\n        this.name = user.name\n    }\n\n    /**\n     * user id\n     *\n     * @type {number}\n     * @memberof UserCreateResp\n     */\n    @ApiProperty({\n        example: 1,\n    })\n    id: number\n\n    /**\n     * user phone nubmer\n     *\n     * @type {string}\n     * @memberof UserCreateResp\n     */\n    @ApiProperty({\n        example: \"81375461323\",\n    })\n    phoneNumber: string;\n\n    /**\n     * user name\n     *\n     * @type {string}\n     * @memberof UserCreateResp\n     */\n    @ApiProperty({\n        example: \"Some name\"\n    })\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserSmsCode.html":{"url":"entities/UserSmsCode.html","title":"entity - UserSmsCode","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserSmsCode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/user_sms_code.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                user sms code entity represantation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                smsCode\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user_sms_code.entity.ts:19\n                        \n                    \n\n            \n                \n                    identifier of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        smsCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'smsCode'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user_sms_code.entity.ts:38\n                        \n                    \n\n            \n                \n                    sms code\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user, {eager: true})@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/user_sms_code.entity.ts:29\n                        \n                    \n\n            \n                \n                    edge to user\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToMany, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { User } from \"./user.entity\";\n\n/**\n * user sms code entity represantation\n *\n * @export\n * @class UserSmsCode\n */\n@Entity({name: \"UserSMSCodes\"})\nexport class UserSmsCode {\n    /**\n     * identifier of entity\n     *\n     * @type {number}\n     * @memberof UserSmsCode\n     */\n    @PrimaryGeneratedColumn()\n    id: number\n\n    /**\n     * edge to user\n     *\n     * @type {User}\n     * @memberof UserSmsCode\n     */\n    @OneToOne(() => User, user => user, {eager: true,})\n    @JoinColumn({name: \"userId\"})\n    user: User\n\n    /**\n     * sms code\n     *\n     * @type {string}\n     * @memberof UserSmsCode\n     */\n    @Column({name:\"smsCode\"})\n    smsCode: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            AllAuthServiceExceptionsFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            AuthControllerEdrrorInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            CreatedTokens\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            AuthServiceExceptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/check-token.dto.ts\n            \n            class\n            CheckTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminResp\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/create-token.dto.ts\n            \n            class\n            CreateTokenResp\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            UserCreateResp\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/dto/get-admin.dto.ts\n            \n            class\n            GetAdminResp\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/dto/get-user.dto.ts\n            \n            class\n            GetUsersResp\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login-admin.dto.ts\n            \n            class\n            LoginAdminDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dto/update-admin.dto.ts\n            \n            class\n            UpdateAdminDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/entity/admin.entity.ts\n            \n            entity\n            Admin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/entity/baseuser.entity.ts\n            \n            entity\n            BaseUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/entity/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/entity/user_sms_code.entity.ts\n            \n            entity\n            UserSmsCode\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            class\n            TokenFactory\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            CreatedToken\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            DecodedToken\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            Payload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/token.ts\n            \n            interface\n            TokenInfo\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            jwt-simple : ^0.5.6\n        \n            mysql : ^2.14.1\n        \n            passport : ^0.5.2\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typedoc : ^0.22.15\n        \n            typeorm : 0.2.43\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DecodeType   (src/.../token.ts)\n                        \n                        \n                            ExpirationStatus   (src/.../token.ts)\n                        \n                        \n                            Role   (src/.../roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/token.ts\n    \n        \n            \n                \n                    \n                        \n                        DecodeType\n                    \n                \n                    \n                        \n                            dedoce type enum show status of decode\n\n                        \n                    \n                        \n                            \n                                 Valid\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 InvalidToken\n                            \n                        \n                        \n                            \n                                 IntegtiryError\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ExpirationStatus\n                    \n                \n                    \n                        \n                            enum of experation status\n\n                        \n                    \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n            \n        \n\n    src/auth/roles.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                    \n                        \n                            Users roles enum\n\n                        \n                    \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    entrypoint of programm\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSettings\nThis project require env file in the root with next params\nIDENTY_DATABASE_URI=\"postgresql://root:root@localhost:5432/identy\"\nIDENTY_SECRET=\"super_secret\"\nIDENTY_REFRESH_SECRET=\"refresh_super_secret\"Docs\nProject docs\nTo lauch projects docs run in terminal:\nnpx @compodoc/compodoc -p tsconfig.json -s That's command will generate docs in documantation dir and run it on http://localhost:8080\nSwagger docs\nWhen you launch server that starts swagger docs on http://localhost:3000/swagger/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CreateExpiresFunc   (src/.../token.ts)\n                        \n                        \n                            CreateTokenFunc   (src/.../token.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/token.ts\n    \n    \n        \n            \n                \n                    \n                    CreateExpiresFunc\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CreateTokenFunc\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthServiceExceptions   (src/.../auth.service.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthServiceExceptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    UserExist: Error(\"user exist with this phone number\"),\n    UserNotFound: Error(\"user not found\"),\n    AdminExist: Error(\"admin exist\"),\n    AdminNotFoud: Error(\"admin not found\"),\n    AdminFailedAuth: Error(\"admin failed auth\"),\n    UserFailedAuth: Error(\"User failed auth\"),\n    InvalidToken: Error(\"Invalid token\"),\n    TokenExpired: Error(\"Token expired\"),\n    TokenNotFound: Error(\"Token not found\")\n}\n                    \n                \n\n            \n                \n                    AuthService errors\n\n                \n            \n\n        \n    \n\n    src/auth/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    Roles decorator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    Roles key in context\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
